{
  "db": [
    {
      "meta": {"exported_on": 1554726229693, "version": "009"},
      "data": {
        "posts": [
          {
            "id": 2,
            "uuid": "00508a49-6cbf-4445-8318-db9482b3ce96",
            "title": "Welcome to Ghost",
            "slug": "welcome-to-ghost-2",
            "markdown": "*Yes.. I do realize I left the \"Hello World\" post here. Read it. Enjoy. Go install Ghost. You will be happy that you did.* \n\n-[@ErikOnTheWeb](http:://twitter.com/ErikOnTheWeb)\n\nYou're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in url, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.\n\n> Wisdomous - it's definitely a word.\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)",
            "html": "<p><em>Yes.. I do realize I left the \"Hello World\" post here. Read it. Enjoy. Go install Ghost. You will be happy that you did.</em> </p>\n\n<p>-<a href=\"http:://twitter.com/ErikOnTheWeb\">@ErikOnTheWeb</a></p>\n\n<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in url, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.</p>\n\n<blockquote>\n  <p>Wisdomous - it's definitely a word.</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-02-26 14:50:50",
            "created_by": 1,
            "updated_at": "2014-02-26 16:50:13",
            "updated_by": 1,
            "published_at": "2014-02-26 14:50:50",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 3,
            "uuid": "53e0b982-e7c0-4e60-9392-adb8af07cf57",
            "title": "Recommended Reading: git",
            "slug": "recommended-reading-git",
            "markdown": "# Looking to Improve Your git Skills?\n\nOver the years, I have found myself perpetually Googling programming related questions.\n\nOver the years, I have also found myself repeatedly landing on the same answers/websites.\n\nHere I will share with you some useful links I have come across regarding the wonderful world of **git**\n\n* [A Successful git Branching Model](http://nvie.com/posts/a-successful-git-branching-model/)\n* [git SCM](http://git-scm.com/)\n* ... many more to be added\n\nHave any you would like to see on the list? Shoot them my way at [@ErikOnTheWeb](https://twitter.com/ErikOnTheWeb)",
            "html": "<h1 id=\"lookingtoimproveyourgitskills\">Looking to Improve Your git Skills?</h1>\n\n<p>Over the years, I have found myself perpetually Googling programming related questions.</p>\n\n<p>Over the years, I have also found myself repeatedly landing on the same answers/websites.</p>\n\n<p>Here I will share with you some useful links I have come across regarding the wonderful world of <strong>git</strong></p>\n\n<ul>\n<li><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A Successful git Branching Model</a></li>\n<li><a href=\"http://git-scm.com/\">git SCM</a></li>\n<li>... many more to be added</li>\n</ul>\n\n<p>Have any you would like to see on the list? Shoot them my way at <a href=\"https://twitter.com/ErikOnTheWeb\">@ErikOnTheWeb</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-02-26 16:41:10",
            "created_by": 1,
            "updated_at": "2014-11-19 17:47:50",
            "updated_by": 1,
            "published_at": "2014-02-26 16:43:05",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 5,
            "uuid": "65572fee-7ddb-4fa2-adcf-d5a7f9b9b1a2",
            "title": "Smarter Local Developement: Setting up Vagrant on Mac OS X (The Easy Way)",
            "slug": "vagrant-on-mac-os-x-the-easy-way",
            "markdown": "> Hi. Meet Vagrant: Your New Best Friend\n\nYou may be among the elite few who have made the leap. I, myself, was nearly one of them a few months back. I tweaked around with installing [Vagrant](www.vagrantup.com) on my trusty MacBook Pro dev machine. Heck, I even got a few Vagrant environments up and running locallly.\n\nUnfortunately it stopped there. I kept all of my *real development* confined to the wonderful world of [MAMP](http://www.mamp.info/en/index.html).\n\nToday that stops. Today, I am going to \"launch\" ... hah, an open source project that is going to fully utilize Vagrant development and stick to it.\n\nEnough of the pre-action rant. Let's boil this down to the easiest possible steps to get up and running.\n\n## Step One: System Requirements\n\n* Mac OS X\n* iTerm w/ [zsh Oh-My-Zsh](https://github.com/robbyrussell/oh-my-zsh) (totally preference ;) )\n* [Install Virtual Box](https://www.virtualbox.org/wiki/Downloads)\n* [Install Vagrant](http://www.vagrantup.com/)\n\nNow, my apologies if I am wrong for assuming... but I will just go ahead and assume that we are all adults here and you can manage installing the above yourself ;)\n\n## Step Two: Install the Vagrant Instance\n\n**Warning** Giant, lifechanging shortcut here. I will cover the nuts and bolts behind this in a later lesson.\n\nThanks to Jeffery Way over at [Laracasts](https://laracasts.com/lessons/get-off-mamp-now), we have someone who really knows what they're talking about to provide us with these types of gems.\n\nHere is a little alias he has created (and it has worked wonders for me).\n\n    alias lamp=\"curl -L -o 'install.sh' http://bit.ly/1hBfq57 && curl -L -o 'Vagrantfile' http://bit.ly/1mE3Qt9 && vagrant up\"\n\nGo ahead and install that alias (or just run the commands). Get a cup of coffee or two and you should be good to go.\n\n## Done!\n\nWait... but there must be more, right?! \n\nGo ahead and hit: http://192.168.33.21/ You should be golden.\n\n> Yes. It is that simple.\n\nI did title this **The Easy Way** didn't I?!\n\nLet's follow up next time with some fancy things such as configuring this to work with a better url such as http://mygreatproject.local.\n\n### Questions?\n\nI would love to hear any comments/questions or resources you would like to share. Let me know in the comments below or at [@ErikOnTheWeb](http://twitter.com/erikontheweb)",
            "html": "<blockquote>\n  <p>Hi. Meet Vagrant: Your New Best Friend</p>\n</blockquote>\n\n<p>You may be among the elite few who have made the leap. I, myself, was nearly one of them a few months back. I tweaked around with installing <a href=\"www.vagrantup.com\">Vagrant</a> on my trusty MacBook Pro dev machine. Heck, I even got a few Vagrant environments up and running locallly.</p>\n\n<p>Unfortunately it stopped there. I kept all of my <em>real development</em> confined to the wonderful world of <a href=\"http://www.mamp.info/en/index.html\">MAMP</a>.</p>\n\n<p>Today that stops. Today, I am going to \"launch\" ... hah, an open source project that is going to fully utilize Vagrant development and stick to it.</p>\n\n<p>Enough of the pre-action rant. Let's boil this down to the easiest possible steps to get up and running.</p>\n\n<h2 id=\"steponesystemrequirements\">Step One: System Requirements</h2>\n\n<ul>\n<li>Mac OS X</li>\n<li>iTerm w/ <a href=\"https://github.com/robbyrussell/oh-my-zsh\">zsh Oh-My-Zsh</a> (totally preference ;) )</li>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">Install Virtual Box</a></li>\n<li><a href=\"http://www.vagrantup.com/\">Install Vagrant</a></li>\n</ul>\n\n<p>Now, my apologies if I am wrong for assuming... but I will just go ahead and assume that we are all adults here and you can manage installing the above yourself ;)</p>\n\n<h2 id=\"steptwoinstallthevagrantinstance\">Step Two: Install the Vagrant Instance</h2>\n\n<p><strong>Warning</strong> Giant, lifechanging shortcut here. I will cover the nuts and bolts behind this in a later lesson.</p>\n\n<p>Thanks to Jeffery Way over at <a href=\"https://laracasts.com/lessons/get-off-mamp-now\">Laracasts</a>, we have someone who really knows what they're talking about to provide us with these types of gems.</p>\n\n<p>Here is a little alias he has created (and it has worked wonders for me).</p>\n\n<pre><code>alias lamp=\"curl -L -o 'install.sh' http://bit.ly/1hBfq57 &amp;&amp; curl -L -o 'Vagrantfile' http://bit.ly/1mE3Qt9 &amp;&amp; vagrant up\"\n</code></pre>\n\n<p>Go ahead and install that alias (or just run the commands). Get a cup of coffee or two and you should be good to go.</p>\n\n<h2 id=\"done\">Done!</h2>\n\n<p>Wait... but there must be more, right?! </p>\n\n<p>Go ahead and hit: <a href=\"http://192.168.33.21/\">http://192.168.33.21/</a> You should be golden.</p>\n\n<blockquote>\n  <p>Yes. It is that simple.</p>\n</blockquote>\n\n<p>I did title this <strong>The Easy Way</strong> didn't I?!</p>\n\n<p>Let's follow up next time with some fancy things such as configuring this to work with a better url such as <a href=\"http://mygreatproject.local\">http://mygreatproject.local</a>.</p>\n\n<h3 id=\"questions\">Questions?</h3>\n\n<p>I would love to hear any comments/questions or resources you would like to share. Let me know in the comments below or at <a href=\"http://twitter.com/erikontheweb\">@ErikOnTheWeb</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-03-04 13:33:10",
            "created_by": 1,
            "updated_at": "2014-11-19 17:51:08",
            "updated_by": 1,
            "published_at": "2014-03-04 13:49:03",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 6,
            "uuid": "b609f6a9-4211-4349-ad39-2bcc261a1c57",
            "title": "Trending Web Technologies 2014 ... Utah?!",
            "slug": "trending-web-technologies-2014-utah",
            "markdown": "> Sleeping giant, Utah, emerges as the top web technology hub ousting the previously reigning champs California, New York, and Texas.\n\nAt least that is the headline I envisioned in my mind after running several comparison on [Google Trends](https://www.google.com/trends/explore#q=laravel&geo=US-UT%2C%20US-CA%2C%20US-NY&date=1%2F2011%2037m&cmpt=geo) this morning *(link links to search)*\n\n*Screen Shot of Results (q=?Laravel)*\n\n![Trending Web Technologies 2014: Laravel](/content/images/2014/Mar/Google_Trends___Web_Search_interest__laravel___Utah__United_States___California__United_States___New_York__United_States____Jan_2011___Jan_2014.png)\n\n\nI ran similar searches comparing terms such as\n\n* AngularJS\n* Ruby on Rails\n* NodeJS\n* PHP\n* CodeIgniter\n* JavaScript\n* Laravel\n\n**All of which declared Utah the champion** (overwhelmingly for both Laravel and JavaScript)\n\nNow, I can't speak for what these numbers actually mean. I have sincere and fact-based doubt that these technologies are actually employed more in Utah than the others. Possibly it means that us Utahns just lean a bit heavier on the magic \"I can't quite remember how to do this, so I'll just look it up real quick\" Google search. However, it does give a nice little boost to my Utah-resident pride ;).\n\n\n## Google Trends Embed\n\n<script type=\"text/javascript\" src=\"//www.google.com/trends/embed.js?hl=en-US&q=laravel&geo=US-UT,+US-CA,+US-NY&date=1/2011+37m&cmpt=geo&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330\"></script>\n\n\n### Thoughts?\n\nShare them below or at [@ErikOnTheWeb](http://twitter.com/erikontheweb)",
            "html": "<blockquote>\n  <p>Sleeping giant, Utah, emerges as the top web technology hub ousting the previously reigning champs California, New York, and Texas.</p>\n</blockquote>\n\n<p>At least that is the headline I envisioned in my mind after running several comparison on <a href=\"https://www.google.com/trends/explore#q=laravel&amp;geo=US-UT%2C%20US-CA%2C%20US-NY&amp;date=1%2F2011%2037m&amp;cmpt=geo\">Google Trends</a> this morning <em>(link links to search)</em></p>\n\n<p><em>Screen Shot of Results (q=?Laravel)</em></p>\n\n<p><img src=\"/content/images/2014/Mar/Google_Trends___Web_Search_interest__laravel___Utah__United_States___California__United_States___New_York__United_States&#95;&#95;&#95;&#95;Jan_2011___Jan_2014.png\" alt=\"Trending Web Technologies 2014: Laravel\" /></p>\n\n<p>I ran similar searches comparing terms such as</p>\n\n<ul>\n<li>AngularJS</li>\n<li>Ruby on Rails</li>\n<li>NodeJS</li>\n<li>PHP</li>\n<li>CodeIgniter</li>\n<li>JavaScript</li>\n<li>Laravel</li>\n</ul>\n\n<p><strong>All of which declared Utah the champion</strong> (overwhelmingly for both Laravel and JavaScript)</p>\n\n<p>Now, I can't speak for what these numbers actually mean. I have sincere and fact-based doubt that these technologies are actually employed more in Utah than the others. Possibly it means that us Utahns just lean a bit heavier on the magic \"I can't quite remember how to do this, so I'll just look it up real quick\" Google search. However, it does give a nice little boost to my Utah-resident pride ;).</p>\n\n<h2 id=\"googletrendsembed\">Google Trends Embed</h2>\n\n<script type=\"text/javascript\" src=\"//www.google.com/trends/embed.js?hl=en-US&q=laravel&geo=US-UT,+US-CA,+US-NY&date=1/2011+37m&cmpt=geo&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330\"></script>\n\n<h3 id=\"thoughts\">Thoughts?</h3>\n\n<p>Share them below or at <a href=\"http://twitter.com/erikontheweb\">@ErikOnTheWeb</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-03-04 16:49:33",
            "created_by": 1,
            "updated_at": "2014-03-04 16:56:43",
            "updated_by": 1,
            "published_at": "2014-03-04 16:51:40",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 7,
            "uuid": "d60040c1-3ea1-4d9c-8845-8dba9f55758d",
            "title": "Diving Into SailsJS: The First Voyage",
            "slug": "diving-into-sailsjs",
            "markdown": "---\n\n## To Begin...\n\nI was recently tasked with creating a web development tutorial. The only restriction? To create my own adventure!\n\nMy Adventure of Choice: **[SailsJS](http://sailsjs.org/)**\n\nI've been meaning to tackle **node.js** for a bit now and this seemed like as good a time as any.\n\n## At First Glance\n\n> Love at First Sight\n\n![](/content/images/2014/Mar/Sails_js___Realtime_MVC_Framework_for_Node_js.png)\n\n*From the SailsJS Homepage*\n\n## Setup and Installation\n\nI decided to setup a local **Vagrant** box to serve as my node.js / SailsJS playground.\n\nIn the meantime (while my Vagrant box is installing), I hopped onto my trusty **Digital Ocean** droplet, installed MongoDB and SailsJS. Created a new SailsJS project... and was up in running in literally seconds.\n\n![](/content/images/2014/Mar/Sails.png)\n\n*Fresh Install Screen*\n\n## More to come...\n\nAs in... there will be more to come! ;)\n\n** *Edit: In about the time it took me to write this post, I was up and running on my Vagrant box (thank you [Vaprobash](http://fideloper.github.io/Vaprobash/)! ** ... on to building something great! ... or just something ;)\n",
            "html": "<hr />\n\n<h2 id=\"tobegin\">To Begin...</h2>\n\n<p>I was recently tasked with creating a web development tutorial. The only restriction? To create my own adventure!</p>\n\n<p>My Adventure of Choice: <strong><a href=\"http://sailsjs.org/\">SailsJS</a></strong></p>\n\n<p>I've been meaning to tackle <strong>node.js</strong> for a bit now and this seemed like as good a time as any.</p>\n\n<h2 id=\"atfirstglance\">At First Glance</h2>\n\n<blockquote>\n  <p>Love at First Sight</p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Mar/Sails_js___Realtime_MVC_Framework_for_Node_js.png\" alt=\"\" /></p>\n\n<p><em>From the SailsJS Homepage</em></p>\n\n<h2 id=\"setupandinstallation\">Setup and Installation</h2>\n\n<p>I decided to setup a local <strong>Vagrant</strong> box to serve as my node.js / SailsJS playground.</p>\n\n<p>In the meantime (while my Vagrant box is installing), I hopped onto my trusty <strong>Digital Ocean</strong> droplet, installed MongoDB and SailsJS. Created a new SailsJS project... and was up in running in literally seconds.</p>\n\n<p><img src=\"/content/images/2014/Mar/Sails.png\" alt=\"\" /></p>\n\n<p><em>Fresh Install Screen</em></p>\n\n<h2 id=\"moretocome\">More to come...</h2>\n\n<p>As in... there will be more to come! ;)</p>\n\n<p><em>* *Edit: In about the time it took me to write this post, I was up and running on my Vagrant box (thank you <a href=\"http://fideloper.github.io/Vaprobash/\">Vaprobash</a>! *</em> ... on to building something great! ... or just something ;)</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-03-20 02:40:18",
            "created_by": 1,
            "updated_at": "2014-03-20 03:21:00",
            "updated_by": 1,
            "published_at": "2014-03-20 02:55:12",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 8,
            "uuid": "2304f68a-ef65-4705-bcce-ab8c606db5b5",
            "title": "Building a Realtime Chatroom Application with SailsJS (a node.js MVC Framework)",
            "slug": "building-a-realtime-chat-service-with-sailsjs-and-nodejs",
            "markdown": "***Disclaimer:** This article is currently under construction. More details and follow up posts in the works...*\n\nLet me begin by saying that up until now I have *experimented lightly* with **node.js** at best. I've picked it up a on-and-off a few times over the past year or two and never had the chance to really dug my heels in.\n\nAfter sitting down and spending my first hour with **SailsJS**, I think it is safe to say that will be changing as of today.\n\n**A little background on me:** I have been heavily focused on MVC/PHP/Laravel 4 development for the past 8 months or so (and **more** than happy with the experience) had my eye on spending some time with node.js for some time now and have \n\nI've seen SailsJS pop up more and more in conversations recently, so when I was tasked with creating a web development tutorial I thought, \"Why not?!\".\n\n## What is SailsJS?\n\n![](/content/images/2014/Mar/Sails_js___Realtime_MVC_Framework_for_Node_js.png)\n\n*From the SailsJS Homepage*\n\n> Sails.js make it easy to build custom, enterprise-grade Node.js apps. It is designed to mimic the MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with scalable, service-oriented architecture. It's especially good for building chat, realtime dashboards, or multiplayer games.\n\n## What will we be building today?\n\n**SailsCall**: A node.js Real-Time Web-Based Chat Application built using the SailsJS MVC framework.\n\n>*In other words, something pretty damn cool using nothing but JavaScript ;)*\n\nHere is a peak\n\n![](/content/images/2014/Mar/SailsCall___A_Realtime_Chat_Application_Built_on_node_js_with_SailsJS.png)\n\n![](/content/images/2014/Mar/SailsCall_2.png)\n\n![](/content/images/2014/Mar/Sails_and_Sails_and_Sails.png)\n\nWant to dig into some code?\n\nI thought so: [SailsJS Codebase Hosted on GitHub](https://github.com/erikthedeveloper/sailsjs-the-first-voyage)\n\n## Installation & System Requirements\n\nI am by no means going to cover from ground up development environment setup, installation of node.js, and all of that other good stuff.\n\n* Preferably a *nix environent (... Vagrant?!)\n* node.js installed\n* SailsJS\n* Your ~~IDE~~ weapon of choice (which of course is Sublime Text :) )\n\nHowever once your initial dev machine is setup it really just boils down to this:\n```\nsudo npm -g install sails\nsails new testProject\ncd testProject\nsails lift\n# You're golden\n```\n\n[From the docs](http://sailsjs.org/#!getStarted)\n\n## Let's get started\n\n~~A whirlwind overview of what MVC is or isn't~~... for now, just think of it as a *way* that you **can** structure your code. Loosely put it is simply a coding convention that just so happens to rock and SailsJS is based around it.\n\n> A grossly simplified overview on an extremely subjective topic.\n\n#### **M**odel\nThink of this as your data. These files are located in the `ProjectName/api/models` directory\n\n##### Model: ChatRoom\n```\n// ProjectName/api/models/ChatRoom.js\n/**\n * ChatRoom\n *\n * @module      :: Model\n * @description :: A short summary of how this model works and what it represents.\n * @docs        :: http://sailsjs.org/#!documentation/models\n */\n\nmodule.exports = {\n\n  attributes: {\n\n    title : {\n        type: 'string',\n        required: true\n    },\n    slug  : {\n        type: 'string',\n        required: true,\n        unique: true,\n        regex: '^[a-z-]+'\n    }\n\n  }\n\n};\n```\n\n##### Model: StatusUpdate\n```\n// ProjectName/api/models/StatusUpdate.js\n/**\n * StatusUpdate\n *\n * @module      :: Model\n * @description :: A short summary of how this model works and what it represents.\n * @docs        :: http://sailsjs.org/#!documentation/models\n */\n\nmodule.exports = {\n\n  attributes: {\n\n    chatroom_id: {\n        type: 'integer',\n        required: true\n    },\n\n    username: {\n        type: 'string',\n        required: true\n    },\n\n    content: {\n        type: 'string',\n        required: true\n    }\n\n  }\n\n};\n\n```\n* Chat Rooms\n* Status Updates\n\n#### **V**iew\nThink of this as the end result you see in the browser (i.e. HTML, templates, etc...)\n\n* Home Page\n* Chat Room\n\n#### **C**ontroller\nThink of this as the traffic director.\n\n* One Primary Controller\n* One controller per Model (RESTful API)\n\n\n\n## Ok, Enough With the Details...\n\n**Here is what SailsCall SHOULD be able to do**\n\n* A user can create a public chat room *(based on a unique \"slug\" such as \"vt3000-presentation\")\n* A user can input a \"slug\" on the homepage and be redirected to a valid chat room\n* Users can set their \"Nickname\" to whatever they fancy (G-rated of course)\n* ... and yes. Users can chat amongst each other until pigs fly.\n\nSounds simple enough right?\n\n**About the code**... let's take a peak shall we?\n\n[SailsJS Codebase Hosted on GitHub](https://github.com/erikthedeveloper/sailsjs-the-first-voyage)\n\n*Commence Whirlwind tour of...*\n\n* Routes\n* Models\n* Views\n* Controllers\n\n#### Routes\n```\n// routes.js\n\nmodule.exports.routes = {\n\n  '/': {\n    view: 'home/index'\n  },\n\n  'post /redirect': 'ChatRoomController.redirect',\n\n  '/chat/:chat_slug': {\n    controller: 'ChatRoomController',\n    action: 'render'\n  }\n}\n  \n```\n\n## One More Thing... the Demo!\nOf course: [Link to SailsCall Demo](http://sailscall.erikaybar.name/chat/from-blog-post)\n\n**Note that you can click the link in the header, create a new chatroom with a slug of your choice, and invite others there.**\n\n**Also:** this is in an extremely untested state. Beware of any mysterious errors that ~~may~~ occur.\n\n*My pre-emptive apologies for the day that this demo link is down*\n\nWant to run it yourself? Just remember (roughly)\n\n```\ngit clone\ncd ProjectDirectory\nnpm install\nsails lift\n```\n\n*Comments/Links\n\n* [Inspired Partially By](https://github.com/sethetter/sails-chat)",
            "html": "<p><strong><em>Disclaimer:</strong> This article is currently under construction. More details and follow up posts in the works...</em></p>\n\n<p>Let me begin by saying that up until now I have <em>experimented lightly</em> with <strong>node.js</strong> at best. I've picked it up a on-and-off a few times over the past year or two and never had the chance to really dug my heels in.</p>\n\n<p>After sitting down and spending my first hour with <strong>SailsJS</strong>, I think it is safe to say that will be changing as of today.</p>\n\n<p><strong>A little background on me:</strong> I have been heavily focused on MVC/PHP/Laravel 4 development for the past 8 months or so (and <strong>more</strong> than happy with the experience) had my eye on spending some time with node.js for some time now and have </p>\n\n<p>I've seen SailsJS pop up more and more in conversations recently, so when I was tasked with creating a web development tutorial I thought, \"Why not?!\".</p>\n\n<h2 id=\"whatissailsjs\">What is SailsJS?</h2>\n\n<p><img src=\"/content/images/2014/Mar/Sails_js___Realtime_MVC_Framework_for_Node_js.png\" alt=\"\" /></p>\n\n<p><em>From the SailsJS Homepage</em></p>\n\n<blockquote>\n  <p>Sails.js make it easy to build custom, enterprise-grade Node.js apps. It is designed to mimic the MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with scalable, service-oriented architecture. It's especially good for building chat, realtime dashboards, or multiplayer games.</p>\n</blockquote>\n\n<h2 id=\"whatwillwebebuildingtoday\">What will we be building today?</h2>\n\n<p><strong>SailsCall</strong>: A node.js Real-Time Web-Based Chat Application built using the SailsJS MVC framework.</p>\n\n<blockquote>\n  <p><em>In other words, something pretty damn cool using nothing but JavaScript ;)</em></p>\n</blockquote>\n\n<p>Here is a peak</p>\n\n<p><img src=\"/content/images/2014/Mar/SailsCall___A_Realtime_Chat_Application_Built_on_node_js_with_SailsJS.png\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2014/Mar/SailsCall_2.png\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2014/Mar/Sails_and_Sails_and_Sails.png\" alt=\"\" /></p>\n\n<p>Want to dig into some code?</p>\n\n<p>I thought so: <a href=\"https://github.com/erikthedeveloper/sailsjs-the-first-voyage\">SailsJS Codebase Hosted on GitHub</a></p>\n\n<h2 id=\"installationsystemrequirements\">Installation &amp; System Requirements</h2>\n\n<p>I am by no means going to cover from ground up development environment setup, installation of node.js, and all of that other good stuff.</p>\n\n<ul>\n<li>Preferably a *nix environent (... Vagrant?!)</li>\n<li>node.js installed</li>\n<li>SailsJS</li>\n<li>Your <del>IDE</del> weapon of choice (which of course is Sublime Text :) )</li>\n</ul>\n\n<p>However once your initial dev machine is setup it really just boils down to this:  </p>\n\n<pre><code>sudo npm -g install sails  \nsails new testProject  \ncd testProject  \nsails lift  \n# You're golden\n</code></pre>\n\n<p><a href=\"http://sailsjs.org/#!getStarted\">From the docs</a></p>\n\n<h2 id=\"letsgetstarted\">Let's get started</h2>\n\n<p><del>A whirlwind overview of what MVC is or isn't</del>... for now, just think of it as a <em>way</em> that you <strong>can</strong> structure your code. Loosely put it is simply a coding convention that just so happens to rock and SailsJS is based around it.</p>\n\n<blockquote>\n  <p>A grossly simplified overview on an extremely subjective topic.</p>\n</blockquote>\n\n<h4 id=\"model\"><strong>M</strong>odel</h4>\n\n<p>Think of this as your data. These files are located in the <code>ProjectName/api/models</code> directory</p>\n\n<h5 id=\"modelchatroom\">Model: ChatRoom</h5>\n\n<pre><code>// ProjectName/api/models/ChatRoom.js\n/**\n * ChatRoom\n *\n * @module      :: Model\n * @description :: A short summary of how this model works and what it represents.\n * @docs        :: http://sailsjs.org/#!documentation/models\n */\n\nmodule.exports = {\n\n  attributes: {\n\n    title : {\n        type: 'string',\n        required: true\n    },\n    slug  : {\n        type: 'string',\n        required: true,\n        unique: true,\n        regex: '^[a-z-]+'\n    }\n\n  }\n\n};\n</code></pre>\n\n<h5 id=\"modelstatusupdate\">Model: StatusUpdate</h5>\n\n<pre><code>// ProjectName/api/models/StatusUpdate.js\n/**\n * StatusUpdate\n *\n * @module      :: Model\n * @description :: A short summary of how this model works and what it represents.\n * @docs        :: http://sailsjs.org/#!documentation/models\n */\n\nmodule.exports = {\n\n  attributes: {\n\n    chatroom_id: {\n        type: 'integer',\n        required: true\n    },\n\n    username: {\n        type: 'string',\n        required: true\n    },\n\n    content: {\n        type: 'string',\n        required: true\n    }\n\n  }\n\n};\n</code></pre>\n\n<ul>\n<li>Chat Rooms</li>\n<li>Status Updates</li>\n</ul>\n\n<h4 id=\"view\"><strong>V</strong>iew</h4>\n\n<p>Think of this as the end result you see in the browser (i.e. HTML, templates, etc...)</p>\n\n<ul>\n<li>Home Page</li>\n<li>Chat Room</li>\n</ul>\n\n<h4 id=\"controller\"><strong>C</strong>ontroller</h4>\n\n<p>Think of this as the traffic director.</p>\n\n<ul>\n<li>One Primary Controller</li>\n<li>One controller per Model (RESTful API)</li>\n</ul>\n\n<h2 id=\"okenoughwiththedetails\">Ok, Enough With the Details...</h2>\n\n<p><strong>Here is what SailsCall SHOULD be able to do</strong></p>\n\n<ul>\n<li>A user can create a public chat room *(based on a unique \"slug\" such as \"vt3000-presentation\")</li>\n<li>A user can input a \"slug\" on the homepage and be redirected to a valid chat room</li>\n<li>Users can set their \"Nickname\" to whatever they fancy (G-rated of course)</li>\n<li>... and yes. Users can chat amongst each other until pigs fly.</li>\n</ul>\n\n<p>Sounds simple enough right?</p>\n\n<p><strong>About the code</strong>... let's take a peak shall we?</p>\n\n<p><a href=\"https://github.com/erikthedeveloper/sailsjs-the-first-voyage\">SailsJS Codebase Hosted on GitHub</a></p>\n\n<p><em>Commence Whirlwind tour of...</em></p>\n\n<ul>\n<li>Routes</li>\n<li>Models</li>\n<li>Views</li>\n<li>Controllers</li>\n</ul>\n\n<h4 id=\"routes\">Routes</h4>\n\n<pre><code>// routes.js\n\nmodule.exports.routes = {\n\n  '/': {\n    view: 'home/index'\n  },\n\n  'post /redirect': 'ChatRoomController.redirect',\n\n  '/chat/:chat_slug': {\n    controller: 'ChatRoomController',\n    action: 'render'\n  }\n}\n</code></pre>\n\n<h2 id=\"onemorethingthedemo\">One More Thing... the Demo!</h2>\n\n<p>Of course: <a href=\"http://sailscall.erikaybar.name/chat/from-blog-post\">Link to SailsCall Demo</a></p>\n\n<p><strong>Note that you can click the link in the header, create a new chatroom with a slug of your choice, and invite others there.</strong></p>\n\n<p><strong>Also:</strong> this is in an extremely untested state. Beware of any mysterious errors that <del>may</del> occur.</p>\n\n<p><em>My pre-emptive apologies for the day that this demo link is down</em></p>\n\n<p>Want to run it yourself? Just remember (roughly)</p>\n\n<pre><code>git clone  \ncd ProjectDirectory  \nnpm install  \nsails lift  \n</code></pre>\n\n<p>*Comments/Links</p>\n\n<ul>\n<li><a href=\"https://github.com/sethetter/sails-chat\">Inspired Partially By</a></li>\n</ul>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-03-20 05:31:17",
            "created_by": 1,
            "updated_at": "2014-03-23 18:51:09",
            "updated_by": 1,
            "published_at": "2014-03-21 13:56:20",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 9,
            "uuid": "88398c17-f79d-4083-856c-3c73d83e6aac",
            "title": "Building a simple TODO app with Ruby on Rails - part 1",
            "slug": "building-a-simple-todo-app-with-ruby-on-rails-part-1",
            "markdown": "Recently, I took a dive into the world of Ruby on Rails. Overall it was an awesome experience, I've come away from it with a ton of new concepts, and it has had a positive impact on my php development (which I use at my job).\n\nA super quick overview of this simple TODO app I threw together with Ruby on Rails:\n\nVisit the: [Github Repo](https://github.com/erikthedeveloper/rails-todo-app-simple)\n\n* Multi-Level ORM relationships between\n * Users\n * Projects\n * Tasklists\n * Tasks\n * Tags *Many-To-Many Tasks<->Tags*\n* Ajax based CRUD operations all from the homepage dashboard\n * *With the exception of Tags.*\n* A huge list of **TODO** items I have that I would love to implement once I free some time up.\n\nRight now, this is built around using Rail's `respond to ... format.js` approach [More info on that...](http://guides.rubyonrails.org/working_with_javascript_in_rails.html)\n\nThe next step would be to convert this to an AngularJS front end which consumes a RESTful JSON API backend. Until then....\n\n> Screenshot of the Homepage/Dashboard\n\n![](/content/images/2014/Apr/Ruby_On_Rails_ToDo_Simple.png)\n\n \n\n\n\n## From the [Github Repo](https://github.com/erikthedeveloper/rails-todo-app-simple)\n\n#### Rails TODO App (simple)\n\nA simple TODO app *built* **in the works** to illustrate the beauty of learning Ruby on Rails.\n\nThis will ultimately serve as a RESTful json API to be consumed by its sister project, an AngularJS SPA TODO app.\n\nIn the meantime in will take many forms.\n\nThere are a variety of relationships between users, projects, tasklists, tasks, and tags.\n\nOversimplified relationships: *user->projects->tasklists->tasks<->tags*\n\nFor an idea of the overall structure checkout **db/schema.rb** and the **app/models** directory\n\n##### Features Implemented\n\n* Basic models and ORM relationships set up\n* 1st revision Ajax (using Rail's format.js method(s)) CRUD for Users, Projects, Tasklists, and Tasks (from '/' dashboard)\n\n##### TODO\n\n* Refine ORM relationships\n* Model validation/etc...\n* 1st revision json api\n* Link up AngularJS TODO app\n\n###### Installation\n\nFor now... steer clear ;). But if you must\n\n    git clone https://github.com/erikthedeveloper/rails-todo-app-simple.git\n    cd rails-todo-app-simple # project directory\n    rake db:setup\n    rails server\n    # Head on over to http://localhost:3000\n   \nVisit the: [Github Repo](https://github.com/erikthedeveloper/rails-todo-app-simple)",
            "html": "<p>Recently, I took a dive into the world of Ruby on Rails. Overall it was an awesome experience, I've come away from it with a ton of new concepts, and it has had a positive impact on my php development (which I use at my job).</p>\n\n<p>A super quick overview of this simple TODO app I threw together with Ruby on Rails:</p>\n\n<p>Visit the: <a href=\"https://github.com/erikthedeveloper/rails-todo-app-simple\">Github Repo</a></p>\n\n<ul>\n<li>Multi-Level ORM relationships between\n<ul><li>Users</li>\n<li>Projects</li>\n<li>Tasklists</li>\n<li>Tasks</li>\n<li>Tags <em>Many-To-Many Tasks&lt;->Tags</em></li></ul></li>\n<li>Ajax based CRUD operations all from the homepage dashboard\n<ul><li><em>With the exception of Tags.</em></li></ul></li>\n<li>A huge list of <strong>TODO</strong> items I have that I would love to implement once I free some time up.</li>\n</ul>\n\n<p>Right now, this is built around using Rail's <code>respond to ... format.js</code> approach <a href=\"http://guides.rubyonrails.org/working_with_javascript_in_rails.html\">More info on that...</a></p>\n\n<p>The next step would be to convert this to an AngularJS front end which consumes a RESTful JSON API backend. Until then....</p>\n\n<blockquote>\n  <p>Screenshot of the Homepage/Dashboard</p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Apr/Ruby_On_Rails_ToDo_Simple.png\" alt=\"\" /></p>\n\n<h2 id=\"fromthegithubrepohttpsgithubcomerikthedeveloperrailstodoappsimple\">From the <a href=\"https://github.com/erikthedeveloper/rails-todo-app-simple\">Github Repo</a></h2>\n\n<h4 id=\"railstodoappsimple\">Rails TODO App (simple)</h4>\n\n<p>A simple TODO app <em>built</em> <strong>in the works</strong> to illustrate the beauty of learning Ruby on Rails.</p>\n\n<p>This will ultimately serve as a RESTful json API to be consumed by its sister project, an AngularJS SPA TODO app.</p>\n\n<p>In the meantime in will take many forms.</p>\n\n<p>There are a variety of relationships between users, projects, tasklists, tasks, and tags.</p>\n\n<p>Oversimplified relationships: <em>user->projects->tasklists->tasks&lt;->tags</em></p>\n\n<p>For an idea of the overall structure checkout <strong>db/schema.rb</strong> and the <strong>app/models</strong> directory</p>\n\n<h5 id=\"featuresimplemented\">Features Implemented</h5>\n\n<ul>\n<li>Basic models and ORM relationships set up</li>\n<li>1st revision Ajax (using Rail's format.js method(s)) CRUD for Users, Projects, Tasklists, and Tasks (from '/' dashboard)</li>\n</ul>\n\n<h5 id=\"todo\">TODO</h5>\n\n<ul>\n<li>Refine ORM relationships</li>\n<li>Model validation/etc...</li>\n<li>1st revision json api</li>\n<li>Link up AngularJS TODO app</li>\n</ul>\n\n<h6 id=\"installation\">Installation</h6>\n\n<p>For now... steer clear ;). But if you must</p>\n\n<pre><code>git clone https://github.com/erikthedeveloper/rails-todo-app-simple.git\ncd rails-todo-app-simple # project directory\nrake db:setup\nrails server\n# Head on over to http://localhost:3000\n</code></pre>\n\n<p>Visit the: <a href=\"https://github.com/erikthedeveloper/rails-todo-app-simple\">Github Repo</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-04-16 14:14:58",
            "created_by": 1,
            "updated_at": "2014-04-16 14:26:48",
            "updated_by": 1,
            "published_at": "2014-04-16 14:25:45",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 10,
            "uuid": "ed9634da-dd76-4f6d-9864-9926cb42512f",
            "title": "PHP Autoloading with Composer (an intro)",
            "slug": "modern-php-composer-autoloading-an-intro",
            "markdown": "This is going to be a simplified, high-level look at:\n\n* ~~Using [Composer](https://getcomposer.org/) for dependency management in PHP projects~~\n* Using [Composer](https://getcomposer.org/)'s beautiful autoload directive\n* ~~Possibly a glimpse of getting started with [PHPUnit](http://phpunit.de/) for unit testing our application~~\n\nWe will be building a simple ~~Calculator app~~ Useless application...\n\nThe examples illustrated here are admittely useless, but imagine building an application with hundreds of classes and a complex directory structure. Would you really want to maintain a disgusting amount of `require 'the/path/to/my/Class.php';` statments?\n\nI thought not. Hence Composer.\n\n**The source:** [GitHub Repo](https://github.com/erikthedeveloper/tutsource-php-autoloading-with-composer)\n\n## Setup\n\n#### Install Composer\nFirst, we need to install composer. This is an extremely simple process outlined in [The Composer Docs](https://getcomposer.org/doc/00-intro.md#globally). I recommend following the global installation instructions so you can use the command in any project/directory\n\n```language-bash\n$ curl -sS https://getcomposer.org/installer | php\n$ mv composer.phar /usr/local/bin/composer\n$ # Yes... that is all :)\n```\n\n#### Setup our development directory\n\n```language-bash\nmkdir OurDirectory; cd OurDirectory\ngit init\ntouch README.md\ngit add .\ngit commit -m \"Initial Commit\"\ngit checkout -b develop\n```\n\n\n\n\n#### The First Steps with Composer\n\nFor now, we are going to stick strictly with Composer's autoloading feature. If you've been developing modern PHP applications, chances are you've either been using Composer's autoloading feature or you've been resorting to methods of which I will refrain from comment.\n\nWe could do this all manually... in fact, since it is so simple, we will. Just know that a simple `composer init` would generate such a file.\n\nIn our project's root, we will create a `composer.json` file that looks something like this...\n\n**composer.json**\n```language-javascript\n{\n    \"autoload\": {\n\n    }\n}\n```\n\nNow run `composer install`\n\nand!... well, not a whole lot happened. Baby steps...\n\n![Composer generates some files...](/content/images/2014/May/composer_json_b___composer_autoloading_and_phpunit_an_intro.png)\n\n\nNow fast forward a bit...\n\n![](/content/images/2014/May/LoadMe_php_b___composer_autoloading_and_phpunit_an_intro.png)\n\n* Create src/classmap_dir\n * Create a class to test our autloading `LoadMe.php`\n* Add 'classmap' directive to our composer's autoload directive\n\n[Composer's Autoloading Reference](https://getcomposer.org/doc/04-schema.md#autoload)\n\n\n#### Now Fire it Up!\n\nFor simplicity's sake I will be using PHP's built in web server.\n\n>PHP's built in web server?!\n\nIn case you didn't know (and I wish I would have known earlier). A nifty feature baked in since ... oh, 5.4-ish. You can use\n    \n    php -S localhost:8080\n\nThis will set the document root to the current directory.\n\nIn my case I am using\n    \n    php -S localhost:8080 -t src\n    # -t sets the document root to ... in this case 'src'\n    \nI've put together a simple `index.php` for us to use as a playground environment. I've instantiated our new `LoadMe` class, fired it up and! ...\n\n>Fatal error: Class 'LoadMe' not found in...\n\nOk, so we skipped a step. That magic \"Autoloading\" that everyone keeps talking about... we need to somehow implement that. Now this isn't the best way (in fact it may be the worst), but let's start at the basics.\n\nWe will go ahead and `require '../vendor/autoload.php';` in our `index.php` and!...\n\n>Fatal error: Class 'LoadMe' not found in...\n\nOk, so we have one more step *(I promise, we are doing this the hardway to begin with...)*\n\nGo ahead and type `composer dump-autoload` into your fancy terminal and!...\n\n> Hello Sir\n\n**Houston, we have autoloading.**\n\nSo at this point we are utlizing the `classmap` directive in our autoloading and now we can simply\n\n* Add a class (i.e. `MyClass.php`) to our `src/classmap_dir`\n* Run `composer dump-autoload`\n* Instantiate our class as needed throughout our ~~awesome application~~ *index.php file*\n\n### And we end up with...\n\nThe beautiful end result\n![](/content/images/2014/May/Composer_Playground.png)\n\nA snapshot of our file structure and what we have set up so far\n![](/content/images/2014/May/Hangouts_and_index_php_b___composer_autoloading_and_phpunit_an_intro.png)\n\n**The source:** [GitHub Repo](https://github.com/erikthedeveloper/tutsource-php-autoloading-with-composer)\n\n**Note to reader:** Using `classmap` is not ideal. Just skip straight to using `PSR-4` in place of `classmap`. I will do my best to continue this series ... I may not. I'm sure you can figure it out ;).\n\nIf you are working with PHP **at all** it is definitely worth your time. Great resource [Google \"php autoloading with composer\"](https://www.google.com/search?q=php+autoloading+with+composer)\n\n[Read More about Autoloading and PSR autloading here](https://getcomposer.org/doc/04-schema.md#autoload)\n",
            "html": "<p>This is going to be a simplified, high-level look at:</p>\n\n<ul>\n<li><del>Using <a href=\"https://getcomposer.org/\">Composer</a> for dependency management in PHP projects</del></li>\n<li>Using <a href=\"https://getcomposer.org/\">Composer</a>'s beautiful autoload directive</li>\n<li><del>Possibly a glimpse of getting started with <a href=\"http://phpunit.de/\">PHPUnit</a> for unit testing our application</del></li>\n</ul>\n\n<p>We will be building a simple <del>Calculator app</del> Useless application...</p>\n\n<p>The examples illustrated here are admittely useless, but imagine building an application with hundreds of classes and a complex directory structure. Would you really want to maintain a disgusting amount of <code>require 'the/path/to/my/Class.php';</code> statments?</p>\n\n<p>I thought not. Hence Composer.</p>\n\n<p><strong>The source:</strong> <a href=\"https://github.com/erikthedeveloper/tutsource-php-autoloading-with-composer\">GitHub Repo</a></p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<h4 id=\"installcomposer\">Install Composer</h4>\n\n<p>First, we need to install composer. This is an extremely simple process outlined in <a href=\"https://getcomposer.org/doc/00-intro.md#globally\">The Composer Docs</a>. I recommend following the global installation instructions so you can use the command in any project/directory</p>\n\n<pre><code class=\"language-bash\">$ curl -sS https://getcomposer.org/installer | php\n$ mv composer.phar /usr/local/bin/composer\n$ # Yes... that is all :)\n</code></pre>\n\n<h4 id=\"setupourdevelopmentdirectory\">Setup our development directory</h4>\n\n<pre><code class=\"language-bash\">mkdir OurDirectory; cd OurDirectory  \ngit init  \ntouch README.md  \ngit add .  \ngit commit -m \"Initial Commit\"  \ngit checkout -b develop  \n</code></pre>\n\n<h4 id=\"thefirststepswithcomposer\">The First Steps with Composer</h4>\n\n<p>For now, we are going to stick strictly with Composer's autoloading feature. If you've been developing modern PHP applications, chances are you've either been using Composer's autoloading feature or you've been resorting to methods of which I will refrain from comment.</p>\n\n<p>We could do this all manually... in fact, since it is so simple, we will. Just know that a simple <code>composer init</code> would generate such a file.</p>\n\n<p>In our project's root, we will create a <code>composer.json</code> file that looks something like this...</p>\n\n<p><strong>composer.json</strong></p>\n\n<pre><code class=\"language-javascript\">{\n    \"autoload\": {\n\n    }\n}\n</code></pre>\n\n<p>Now run <code>composer install</code></p>\n\n<p>and!... well, not a whole lot happened. Baby steps...</p>\n\n<p><img src=\"/content/images/2014/May/composer_json_b___composer_autoloading_and_phpunit_an_intro.png\" alt=\"Composer generates some files...\" /></p>\n\n<p>Now fast forward a bit...</p>\n\n<p><img src=\"/content/images/2014/May/LoadMe_php_b___composer_autoloading_and_phpunit_an_intro.png\" alt=\"\" /></p>\n\n<ul>\n<li>Create src/classmap_dir\n<ul><li>Create a class to test our autloading <code>LoadMe.php</code></li></ul></li>\n<li>Add 'classmap' directive to our composer's autoload directive</li>\n</ul>\n\n<p><a href=\"https://getcomposer.org/doc/04-schema.md#autoload\">Composer's Autoloading Reference</a></p>\n\n<h4 id=\"nowfireitup\">Now Fire it Up!</h4>\n\n<p>For simplicity's sake I will be using PHP's built in web server.</p>\n\n<blockquote>\n  <p>PHP's built in web server?!</p>\n</blockquote>\n\n<p>In case you didn't know (and I wish I would have known earlier). A nifty feature baked in since ... oh, 5.4-ish. You can use</p>\n\n<pre><code>php -S localhost:8080\n</code></pre>\n\n<p>This will set the document root to the current directory.</p>\n\n<p>In my case I am using</p>\n\n<pre><code>php -S localhost:8080 -t src\n# -t sets the document root to ... in this case 'src'\n</code></pre>\n\n<p>I've put together a simple <code>index.php</code> for us to use as a playground environment. I've instantiated our new <code>LoadMe</code> class, fired it up and! ...</p>\n\n<blockquote>\n  <p>Fatal error: Class 'LoadMe' not found in...</p>\n</blockquote>\n\n<p>Ok, so we skipped a step. That magic \"Autoloading\" that everyone keeps talking about... we need to somehow implement that. Now this isn't the best way (in fact it may be the worst), but let's start at the basics.</p>\n\n<p>We will go ahead and <code>require '../vendor/autoload.php';</code> in our <code>index.php</code> and!...</p>\n\n<blockquote>\n  <p>Fatal error: Class 'LoadMe' not found in...</p>\n</blockquote>\n\n<p>Ok, so we have one more step <em>(I promise, we are doing this the hardway to begin with...)</em></p>\n\n<p>Go ahead and type <code>composer dump-autoload</code> into your fancy terminal and!...</p>\n\n<blockquote>\n  <p>Hello Sir</p>\n</blockquote>\n\n<p><strong>Houston, we have autoloading.</strong></p>\n\n<p>So at this point we are utlizing the <code>classmap</code> directive in our autoloading and now we can simply</p>\n\n<ul>\n<li>Add a class (i.e. <code>MyClass.php</code>) to our <code>src/classmap_dir</code></li>\n<li>Run <code>composer dump-autoload</code></li>\n<li>Instantiate our class as needed throughout our <del>awesome application</del> <em>index.php file</em></li>\n</ul>\n\n<h3 id=\"andweendupwith\">And we end up with...</h3>\n\n<p>The beautiful end result <br />\n<img src=\"/content/images/2014/May/Composer_Playground.png\" alt=\"\" /></p>\n\n<p>A snapshot of our file structure and what we have set up so far <br />\n<img src=\"/content/images/2014/May/Hangouts_and_index_php_b___composer_autoloading_and_phpunit_an_intro.png\" alt=\"\" /></p>\n\n<p><strong>The source:</strong> <a href=\"https://github.com/erikthedeveloper/tutsource-php-autoloading-with-composer\">GitHub Repo</a></p>\n\n<p><strong>Note to reader:</strong> Using <code>classmap</code> is not ideal. Just skip straight to using <code>PSR-4</code> in place of <code>classmap</code>. I will do my best to continue this series ... I may not. I'm sure you can figure it out ;).</p>\n\n<p>If you are working with PHP <strong>at all</strong> it is definitely worth your time. Great resource <a href=\"https://www.google.com/search?q=php+autoloading+with+composer\">Google \"php autoloading with composer\"</a></p>\n\n<p><a href=\"https://getcomposer.org/doc/04-schema.md#autoload\">Read More about Autoloading and PSR autloading here</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-05-07 02:40:11",
            "created_by": 1,
            "updated_at": "2014-05-14 15:27:59",
            "updated_by": 1,
            "published_at": "2014-05-07 14:59:22",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 11,
            "uuid": "44821768-1b74-49b9-8c1e-2c5a4d06cc3c",
            "title": "[WIP] How to Use Laravel's ActiveRecord Eloquent Model Events ... from within the Model",
            "slug": "use-laravels-eloquent-model-events-from-within",
            "markdown": "##### *[WIP] (i.e. not complete)*\n\nIf you have been developing any type of modern PHP applications over the past several years, chances are you have at least had a glimpse at [Laravel 4+](http://laravel.com). For those who haven't ... In a nutshell it is a web framework that opens up a whole world of awesomeness, best practices, and most-importantly .... *drumroll* **enjoyment and [community](https://laracasts.com/lessons/laravel-community-crash-course) to PHP development**.\n\nNot to say that Laravel is the only way to go or that it is perfect in any way. However, I dare say that any self-respecting PHP developer should at the least take the time to put together a few hello world, if not full-blown, web applications. *Yeah, that wasn't opiniated at all...*\n\nIf you end up hating it, great. But I promise you will come away with a new perspective on modern PHP development.\n\nI won't go over how to [install Laravel 4](http://laravel.com/docs/installation#install-laravel), but here is one take on getting you past the basic `laravel new MyApp`  from a more seasoned pro [Fideloper's Application Setup](http://fideloper.com/laravel-4-application-setup-app-library-autoloading)\n\n## Eloquent's Model Based Events\n\nFrom the [Eloquent Model Event Docs](http://laravel.com/docs/eloquent#model-events)\n\n> Eloquent models fire several events, allowing you to hook into various points in the model's lifecycle using the following methods: creating, created, updating, updated, saving, saved, deleting, deleted, restoring, restored.\n\nand....\n\n>Whenever a new item is saved for the first time, the creating and created events will fire. If an item is not new and the save method is called, the updating / updated events will fire. In both cases, the saving / saved events will fire.\n\nThank you copy/paste ;)...\n\nAnyhow, what this means for you and I as PHP web application developers is that we have now been granted the power of [Event Driven Programming](https://laracasts.com/lessons/model-events).\n\n\n## Other (better) Write-Ups on the Matter\n\nI can't pretend to even begin covering what can be accomplished via Laravel's ActiveRecord model events, so I will point you to some more powerful/complete content on the matter.\n\n* [Jason Lewis on Laravel Events](http://jasonlewis.me/article/laravel-events)\n* [Philip Brown (Culttt)](http://culttt.com/2014/03/10/using-events-laravel-4/)\n* [Using Model Observers](http://matthewhailwood.co.nz/laravel-model-validation-using-observers/)\n* [Laracasts q?=event](https://laracasts.com/search?q=event)\n* [The Docs](http://laravel.com/docs/eloquent#model-events)\n\n\n### The Scenario....\n\nWhat I will be covering is how to cleanly/easily utilize these events from within your `Model` class.\n\n> And ... it's time for work ;) [WIP]\n\nFor example, you may have a **User** model ...\n\n\n### The Solution....\n\nIs this....\n\n### The Code...\n\nIs here... [GitHub Repo](https://github.com/erikthedeveloper/tutsource-laravel-eloquent-model-events)\n\n```\n# And some snippets....\n```\n\n### The End...\n\nYep...",
            "html": "<h5 id=\"wipienotcomplete\"><em>[WIP] (i.e. not complete)</em></h5>\n\n<p>If you have been developing any type of modern PHP applications over the past several years, chances are you have at least had a glimpse at <a href=\"http://laravel.com\">Laravel 4+</a>. For those who haven't ... In a nutshell it is a web framework that opens up a whole world of awesomeness, best practices, and most-importantly .... <em>drumroll</em> <strong>enjoyment and <a href=\"https://laracasts.com/lessons/laravel-community-crash-course\">community</a> to PHP development</strong>.</p>\n\n<p>Not to say that Laravel is the only way to go or that it is perfect in any way. However, I dare say that any self-respecting PHP developer should at the least take the time to put together a few hello world, if not full-blown, web applications. <em>Yeah, that wasn't opiniated at all...</em></p>\n\n<p>If you end up hating it, great. But I promise you will come away with a new perspective on modern PHP development.</p>\n\n<p>I won't go over how to <a href=\"http://laravel.com/docs/installation#install-laravel\">install Laravel 4</a>, but here is one take on getting you past the basic <code>laravel new MyApp</code>  from a more seasoned pro <a href=\"http://fideloper.com/laravel-4-application-setup-app-library-autoloading\">Fideloper's Application Setup</a></p>\n\n<h2 id=\"eloquentsmodelbasedevents\">Eloquent's Model Based Events</h2>\n\n<p>From the <a href=\"http://laravel.com/docs/eloquent#model-events\">Eloquent Model Event Docs</a></p>\n\n<blockquote>\n  <p>Eloquent models fire several events, allowing you to hook into various points in the model's lifecycle using the following methods: creating, created, updating, updated, saving, saved, deleting, deleted, restoring, restored.</p>\n</blockquote>\n\n<p>and....</p>\n\n<blockquote>\n  <p>Whenever a new item is saved for the first time, the creating and created events will fire. If an item is not new and the save method is called, the updating / updated events will fire. In both cases, the saving / saved events will fire.</p>\n</blockquote>\n\n<p>Thank you copy/paste ;)...</p>\n\n<p>Anyhow, what this means for you and I as PHP web application developers is that we have now been granted the power of <a href=\"https://laracasts.com/lessons/model-events\">Event Driven Programming</a>.</p>\n\n<h2 id=\"otherbetterwriteupsonthematter\">Other (better) Write-Ups on the Matter</h2>\n\n<p>I can't pretend to even begin covering what can be accomplished via Laravel's ActiveRecord model events, so I will point you to some more powerful/complete content on the matter.</p>\n\n<ul>\n<li><a href=\"http://jasonlewis.me/article/laravel-events\">Jason Lewis on Laravel Events</a></li>\n<li><a href=\"http://culttt.com/2014/03/10/using-events-laravel-4/\">Philip Brown (Culttt)</a></li>\n<li><a href=\"http://matthewhailwood.co.nz/laravel-model-validation-using-observers/\">Using Model Observers</a></li>\n<li><a href=\"https://laracasts.com/search?q=event\">Laracasts q?=event</a></li>\n<li><a href=\"http://laravel.com/docs/eloquent#model-events\">The Docs</a></li>\n</ul>\n\n<h3 id=\"thescenario\">The Scenario....</h3>\n\n<p>What I will be covering is how to cleanly/easily utilize these events from within your <code>Model</code> class.</p>\n\n<blockquote>\n  <p>And ... it's time for work ;) [WIP]</p>\n</blockquote>\n\n<p>For example, you may have a <strong>User</strong> model ...</p>\n\n<h3 id=\"thesolution\">The Solution....</h3>\n\n<p>Is this....</p>\n\n<h3 id=\"thecode\">The Code...</h3>\n\n<p>Is here... <a href=\"https://github.com/erikthedeveloper/tutsource-laravel-eloquent-model-events\">GitHub Repo</a></p>\n\n<pre><code># And some snippets....\n</code></pre>\n\n<h3 id=\"theend\">The End...</h3>\n\n<p>Yep...</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-05-09 12:45:44",
            "created_by": 1,
            "updated_at": "2014-05-09 13:04:55",
            "updated_by": 1,
            "published_at": "2014-05-09 13:04:55",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 12,
            "uuid": "e966d4c1-ebd3-49c1-bae2-6cc62e381472",
            "title": "Up And Running With AngularJS - Part 1",
            "slug": "up-and-running-with-angularjs-part-1",
            "markdown": "[WIP]\n\nIn this post ... [AngularJS](https://angularjs.org/)\n\n[Project GitHub Repo](https://github.com/erikthedeveloper/up-and-running-with-angularjs)\n\n![AngularJS](/content/images/2014/May/AngularJS_b___Superheroic_JavaScript_MVW_Framework.png)\n\n*From the Homepage*\n\n> HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary for your application. The resulting environment is extraordinarily expressive, readable, and quick to develop.\n\n## Quick Start - Step 1\n\nThe **bare essentials** for those who have yet to lay eyes on AngularJS code...\n\n* Create an HTML file (part-one/index.html)\n* Grab [Google's CDN link for AngularJS](https://developers.google.com/speed/libraries/devguide#angularjs)\n* Throw in some [Bootstrap 3 via CDN](http://www.bootstrapcdn.com/)\n* Voila\n\nHere is the code in its entirety...\n\n```language-markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Up and Running with AngularJS - Part One</title>\n    <!-- Bootstrap 3 CSS CDN -->\n    <link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css\">\n</head>\n\n<!-- Add ng-app to activate AngularJS -->\n<body ng-app>\n\n    <div class=\"container\">\n        <h1>Up and Running with AngularJS <small>Part One</small></h1>\n\n        <!-- Declare the controller for this div. Scope hoopla. More on that later... -->\n        <div ng-controller=\"OurController\">\n            <p>\n                <!-- Lets play with some data binding! -->\n                Here is foo: {{foo}}\n            </p>\n        </div>\n\n    </div>\n\n    <!-- AngularJS CDN     -->\n    <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js\"></script>\n    <!-- Some Basic AngularJS -->\n    <script type=\"text/javascript\">\n        function OurController($scope) {\n            // Bind foo to our scope for \"OurController\"\n            $scope.foo = \"Bar\";\n        }\n    </script>\n</body>\n</html>\n```\n\nAnd we have **data binding**. Albeit overly simple and virtually useless.\n\n![AngularJS Data Binding Simple Example](/content/images/2014/May/Up_and_Running_with_AngularJS___Part_One.png)\n\nWhat are those `{{ }}` crazy looking curly braces you ask?\n\nMore on that to come...\n\n[Project GitHub Repo](https://github.com/erikthedeveloper/up-and-running-with-angularjs)\n\n\n*Special Note: Thank you to Dave Balmer for the Quick [Guide on setting up Syntax Highlighting with prism.js set up on the default Ghost Blog Theme](http://blog.davebalmer.com/adding-syntax-highlighting-to-ghost/)*\n",
            "html": "<p>[WIP]</p>\n\n<p>In this post ... <a href=\"https://angularjs.org/\">AngularJS</a></p>\n\n<p><a href=\"https://github.com/erikthedeveloper/up-and-running-with-angularjs\">Project GitHub Repo</a></p>\n\n<p><img src=\"/content/images/2014/May/AngularJS_b___Superheroic_JavaScript_MVW_Framework.png\" alt=\"AngularJS\" /></p>\n\n<p><em>From the Homepage</em></p>\n\n<blockquote>\n  <p>HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary for your application. The resulting environment is extraordinarily expressive, readable, and quick to develop.</p>\n</blockquote>\n\n<h2 id=\"quickstartstep1\">Quick Start - Step 1</h2>\n\n<p>The <strong>bare essentials</strong> for those who have yet to lay eyes on AngularJS code...</p>\n\n<ul>\n<li>Create an HTML file (part-one/index.html)</li>\n<li>Grab <a href=\"https://developers.google.com/speed/libraries/devguide#angularjs\">Google's CDN link for AngularJS</a></li>\n<li>Throw in some <a href=\"http://www.bootstrapcdn.com/\">Bootstrap 3 via CDN</a></li>\n<li>Voila</li>\n</ul>\n\n<p>Here is the code in its entirety...</p>\n\n<pre><code class=\"language-markup\">&lt;!doctype html&gt;  \n&lt;html lang=\"en\"&gt;  \n&lt;head&gt;  \n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Up and Running with AngularJS - Part One&lt;/title&gt;\n    &lt;!-- Bootstrap 3 CSS CDN --&gt;\n    &lt;link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n\n&lt;!-- Add ng-app to activate AngularJS --&gt;  \n&lt;body ng-app&gt;\n\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Up and Running with AngularJS &lt;small&gt;Part One&lt;/small&gt;&lt;/h1&gt;\n\n        &lt;!-- Declare the controller for this div. Scope hoopla. More on that later... --&gt;\n        &lt;div ng-controller=\"OurController\"&gt;\n            &lt;p&gt;\n                &lt;!-- Lets play with some data binding! --&gt;\n                Here is foo: {{foo}}\n            &lt;/p&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n\n    &lt;!-- AngularJS CDN     --&gt;\n    &lt;script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- Some Basic AngularJS --&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function OurController($scope) {\n            // Bind foo to our scope for \"OurController\"\n            $scope.foo = \"Bar\";\n        }\n    &lt;/script&gt;\n&lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>\n\n<p>And we have <strong>data binding</strong>. Albeit overly simple and virtually useless.</p>\n\n<p><img src=\"/content/images/2014/May/Up_and_Running_with_AngularJS___Part_One.png\" alt=\"AngularJS Data Binding Simple Example\" /></p>\n\n<p>What are those <code>{{ }}</code> crazy looking curly braces you ask?</p>\n\n<p>More on that to come...</p>\n\n<p><a href=\"https://github.com/erikthedeveloper/up-and-running-with-angularjs\">Project GitHub Repo</a></p>\n\n<p><em>Special Note: Thank you to Dave Balmer for the Quick <a href=\"http://blog.davebalmer.com/adding-syntax-highlighting-to-ghost/\">Guide on setting up Syntax Highlighting with prism.js set up on the default Ghost Blog Theme</a></em></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-05-14 12:41:05",
            "created_by": 1,
            "updated_at": "2014-05-14 15:26:06",
            "updated_by": 1,
            "published_at": "2014-05-14 15:01:47",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 13,
            "uuid": "b566a2d4-7742-497e-a0bf-7b23d1023406",
            "title": "Up And Running with AngularJS - Part 2",
            "slug": "up-and-running-with-angularjs-part-2",
            "markdown": "Ok, so in my [intro to AngularJS](http://erikaybar.name/up-and-running-with-angularjs-part-1/) I covered the absolute basics of how to get started with AngularJS and went only as far as loading the AngularJS library into the page, setting up a basic controller, and using some 2-way data binding. Absolute basics only....\n\nHere, I am going to fast forward quite a bit and see if I can crank out a more complete example which I will then build on (eventually building out the RESTful backend API and using the AngularJS front end to consume and interact with the data).\n\n## We will be building...\n\nIf there is one lesson I've learned over my time experimenting with side projects such as this, it is that nailing down a concrete \"idea\" and sticking with it from concept to product is easier said than done. Having said that I am going to keep this example application as simple as possible.\n\n[GitHub Repository](https://github.com/erikthedeveloper/up-and-running-with-angularjs)\n\n### TODO app\n\nFocusing only on the first iteration of the front end AngularJS components, this app will:\n\n* Allow a project to have multiple tasks\n* Where Tasks may:\n    * Have a title\n\t* Have a due date\n    * Have a complete status\n    * Be marked as complete\n    * Be deleted\n    * *~ Have comments left on them*\n* Utilize hard coded data in place of retreiving data from the API\n\n\n\nSome pieces that I will leave for future development:\n\n* Drag/Drop functionality\n* Allow a user to have multiple projects\n* Implement login/authentication\n\n\n## Kick start the development process\n\nFor now, I will continue working out of the up-and-running-with-angularjs repository we created last time (part-2)\n\nAs I said, I am going to fast forward a bit. I won't worry too much about the installation of these requirements, but I will try to list them out completely.\n\n* git\n* [node.js/npm](http://nodejs.org/)\n* [Grunt](http://gruntjs.com/)\n* [Yeoman](http://yeoman.io/)\n* [Yeoman AngularJS Generator](https://github.com/yeoman/generator-angular)\n\nFirst things first, get the above installed, up, and running.\n\n\nNow let's get a glimpse of the magic that Yeoman provides us.\n\n```language-bash\n$ yo angular TodoYoAngular\n```\n\n![Run Yo AngularJS Generator](/content/images/2014/May/1__yo_angular_TodoYoAngular__sh_.png)\n\nLooking a bit closer at what just happened, we can see Yeoman generated quite a few files for us\n\n```language-bash\n$ tree -L 2 -I node_module*\n\n├── Gruntfile.js\n├── app\n│   ├── 404.html\n│   ├── bower_components\n│   ├── favicon.ico\n│   ├── images\n│   ├── index.html\n│   ├── robots.txt\n│   ├── scripts\n│   ├── styles\n│   └── views\n├── bower.json\n├── karma-e2e.conf.js\n├── karma.conf.js\n├── package.json\n└── test\n    ├── runner.html\n    └── spec\n\n$ # Fire up the Grunt server\n$ grunt serve\n```\n\nAnd like magic!...\n\n![](/content/images/2014/May/1__grunt_serve__node__and_127_0_0_1_9000___.png)\n\n\n### [WIP]\n\n[GitHub Repository](https://github.com/erikthedeveloper/up-and-running-with-angularjs)",
            "html": "<p>Ok, so in my <a href=\"http://erikaybar.name/up-and-running-with-angularjs-part-1/\">intro to AngularJS</a> I covered the absolute basics of how to get started with AngularJS and went only as far as loading the AngularJS library into the page, setting up a basic controller, and using some 2-way data binding. Absolute basics only....</p>\n\n<p>Here, I am going to fast forward quite a bit and see if I can crank out a more complete example which I will then build on (eventually building out the RESTful backend API and using the AngularJS front end to consume and interact with the data).</p>\n\n<h2 id=\"wewillbebuilding\">We will be building...</h2>\n\n<p>If there is one lesson I've learned over my time experimenting with side projects such as this, it is that nailing down a concrete \"idea\" and sticking with it from concept to product is easier said than done. Having said that I am going to keep this example application as simple as possible.</p>\n\n<p><a href=\"https://github.com/erikthedeveloper/up-and-running-with-angularjs\">GitHub Repository</a></p>\n\n<h3 id=\"todoapp\">TODO app</h3>\n\n<p>Focusing only on the first iteration of the front end AngularJS components, this app will:</p>\n\n<ul>\n<li>Allow a project to have multiple tasks</li>\n<li>Where Tasks may:\n<ul><li>Have a title</li>\n<li>Have a due date</li>\n<li>Have a complete status</li>\n<li>Be marked as complete</li>\n<li>Be deleted</li>\n<li><em>~ Have comments left on them</em></li></ul></li>\n<li>Utilize hard coded data in place of retreiving data from the API</li>\n</ul>\n\n<p>Some pieces that I will leave for future development:</p>\n\n<ul>\n<li>Drag/Drop functionality</li>\n<li>Allow a user to have multiple projects</li>\n<li>Implement login/authentication</li>\n</ul>\n\n<h2 id=\"kickstartthedevelopmentprocess\">Kick start the development process</h2>\n\n<p>For now, I will continue working out of the up-and-running-with-angularjs repository we created last time (part-2)</p>\n\n<p>As I said, I am going to fast forward a bit. I won't worry too much about the installation of these requirements, but I will try to list them out completely.</p>\n\n<ul>\n<li>git</li>\n<li><a href=\"http://nodejs.org/\">node.js/npm</a></li>\n<li><a href=\"http://gruntjs.com/\">Grunt</a></li>\n<li><a href=\"http://yeoman.io/\">Yeoman</a></li>\n<li><a href=\"https://github.com/yeoman/generator-angular\">Yeoman AngularJS Generator</a></li>\n</ul>\n\n<p>First things first, get the above installed, up, and running.</p>\n\n<p>Now let's get a glimpse of the magic that Yeoman provides us.</p>\n\n<pre><code class=\"language-bash\">$ yo angular TodoYoAngular\n</code></pre>\n\n<p><img src=\"/content/images/2014/May/1__yo_angular_TodoYoAngular__sh_.png\" alt=\"Run Yo AngularJS Generator\" /></p>\n\n<p>Looking a bit closer at what just happened, we can see Yeoman generated quite a few files for us</p>\n\n<pre><code class=\"language-bash\">$ tree -L 2 -I node_module*\n\n├── Gruntfile.js\n├── app\n│   ├── 404.html\n│   ├── bower_components\n│   ├── favicon.ico\n│   ├── images\n│   ├── index.html\n│   ├── robots.txt\n│   ├── scripts\n│   ├── styles\n│   └── views\n├── bower.json\n├── karma-e2e.conf.js\n├── karma.conf.js\n├── package.json\n└── test\n    ├── runner.html\n    └── spec\n\n$ # Fire up the Grunt server\n$ grunt serve\n</code></pre>\n\n<p>And like magic!...</p>\n\n<p><img src=\"/content/images/2014/May/1__grunt_serve__node__and_127_0_0_1_9000___.png\" alt=\"\" /></p>\n\n<h3 id=\"wip\">[WIP]</h3>\n\n<p><a href=\"https://github.com/erikthedeveloper/up-and-running-with-angularjs\">GitHub Repository</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-05-21 12:15:34",
            "created_by": 1,
            "updated_at": "2014-05-21 12:54:17",
            "updated_by": 1,
            "published_at": "2014-05-21 12:50:15",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 14,
            "uuid": "715c716b-df34-4336-8497-56d1e1b63c2f",
            "title": "Git, GitHub, and Pull Requests for the One Man Development Team",
            "slug": "git-for-the-one-man-show",
            "markdown": "I've been getting much more time in with Git, [GitHub](https://github.com/), and [BitBucket](https://bitbucket.org/) lately, and it has definitely given a huge boost to my development productivity.\n\nThinking back, I remember when Git seemed to me like some archaic voodoo that only programmers could learn to wield after years of rigorous training. Now, as I use Git on a daily basis for both personal and professional projects, I'm starting to truly appreciate the power that it offers and the benefits it can provide to a team of developers (yes... even if that \"team\" is really just one developer).\n\nEvery few weeks, I'll look back and comb through my git log. This is always one of those good news/bad news scenarios. The bad news being, my previous code/history could really use some work (*bad past me!*). The good news being that my code/history today looks worlds better than that of the past. *... and several weeks from now, I will surely look back and think...*\n\nSome of the more useful information I've soaked up over the past year or so...\n\n**Must Read Git Workflow Articles**\n\n- [A Successful Git Model](http://nvie.com/posts/a-successful-git-branching-model/) is really what got me started on the git path. If you are just starting out or trying to get a better grasp on how to use git as a beginner, this is a great starting point.\n- [sandofsky's Understanding Git Workflow](https://sandofsky.com/blog/git-workflow.html) is a bit more advanced, but has probably had the largest influence on how I currently think about public vs. private branches/history\n\n> The no-ff band-aid, broken bisect, and blame mysteries are all symptoms that you’re using a screwdriver as a hammer. - @sandofsky\n\n**More Awesome Git Resources**\n\n- I think of [git-scm](http://git-scm.com/documentation) as basically the Git bible.\n- Atlassian's [Git Workflow Docs/Guide](https://www.atlassian.com/git/workflows)\n- CodeSchool has some [pretty awesome interactive Git Courses](https://www.codeschool.com/paths/electives)\n- [Ghost Documentation Git Workflow](https://github.com/TryGhost/Ghost/wiki/Git-workflow) has some good recommendations\n- And never forget [to search Stack Overflow: Git Workflow](http://stackoverflow.com/search?tab=votes&q=git%20workflow)...\n\nSome key thoughts I've taken away from it all...\n\n## Getting Started with Pull Requests\n\nInspired by some recent posts over at the [nerds.airbnb.com Engineering Blog](http://nerds.airbnb.com/testing-at-airbnb/), I decided it was time I put some time into the art of using [Pull Requests](https://help.github.com/articles/using-pull-requests).\n\n> **From the AirBNB post:**  Adoption of pull requests held a number of advantages for our team. It improved our stylistic consistency, gave us a forum to discuss code structure and architectural decisions, and increased the likelihood that typos and logical errors would be caught before they reached our users. By acting as a channel through which all new code must pass, it also gave individuals on the team much greater visibility into what was shipping. This increased visibility, in turn, enabled us to begin a cultural transformation around testing.\n\nDon't get me wrong, I've been using Git for some time now, but as a one man development team I never felt the need to use many of the features that GitHub and/or BitBucket provides. After the past few weeks, I can attest that structuring my git workflow like so has led to:\n\n- A huge boost in development focus (i.e. not straying from building \"Feature A\" and mixing in \"Bug Fix B\" and \"Refactor C\")\n- Cleaner code\n- More logical/sequential commit history\n- Much more confidence that the changes introduced did not break anything \n\n*On a side note: I've finally made the leap to writing some automated testing outside of my \"experiments/throwaway projects\" and it has seriously been awesome to see the effect it had on an existing project. ... more on that to come ;)*\n\n## And So Much More... \n\nAs I began writing this, I realized that there is so much to possibly cover when it comes to Git (hence the numerous articles, tutorials, and videos available all over the internet). \n\nProper Branching\n\n```language-bash\nmaster # Only affected through PRs on origin\ndevelop\nfeature/foo_a\nfeature/foo_b\nrefactor/bar_a\nbugfix/baz_c\n```\n\nMerging and Rebasing\n\n```language-bash\ngit checkout develop\ngit pull --rebase\ngit checkout feature/foo_b\ngit rebase -i develop\n# rearrange/squash commits as needed\ngit push origin feature/foo_b\n# Submit pull request (feature/foo_b -> develop)\n# Code Review, Changes/Commits, Merge, Delete feature/foo_b\n```\n\ndiff/log branches\n\n```language-bash\n# Show differences between working HEAD (or branch) and another branch. Add the '-p' option for patch info\ngit diff HEAD --not develop --stat\n\n# Show commit log difference between branches\ngit log HEAD --not develop --stat\n\n```\n\n* tagging releases\n* issue tracker\n* resolving/mentioning issues and pull requests in commit messages\n* GitHub and BitBucket code review features\n* `git mergetool` for resolving merge conflicts\n* and the list goes on...\n\n\nI would love to hear how you and/or your team is using git and what type of workflow approach you find works best. I'm sure several months from now, I will look back and realize that even now I was doing things a bit ... hacky ;)\n\nI guess that is what I get for being a web programmer. A life of never ending learning and feeling like I'm only touching the tip of the iceberg!  ",
            "html": "<p>I've been getting much more time in with Git, <a href=\"https://github.com/\">GitHub</a>, and <a href=\"https://bitbucket.org/\">BitBucket</a> lately, and it has definitely given a huge boost to my development productivity.</p>\n\n<p>Thinking back, I remember when Git seemed to me like some archaic voodoo that only programmers could learn to wield after years of rigorous training. Now, as I use Git on a daily basis for both personal and professional projects, I'm starting to truly appreciate the power that it offers and the benefits it can provide to a team of developers (yes... even if that \"team\" is really just one developer).</p>\n\n<p>Every few weeks, I'll look back and comb through my git log. This is always one of those good news/bad news scenarios. The bad news being, my previous code/history could really use some work (<em>bad past me!</em>). The good news being that my code/history today looks worlds better than that of the past. <em>... and several weeks from now, I will surely look back and think...</em></p>\n\n<p>Some of the more useful information I've soaked up over the past year or so...</p>\n\n<p><strong>Must Read Git Workflow Articles</strong></p>\n\n<ul>\n<li><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A Successful Git Model</a> is really what got me started on the git path. If you are just starting out or trying to get a better grasp on how to use git as a beginner, this is a great starting point.</li>\n<li><a href=\"https://sandofsky.com/blog/git-workflow.html\">sandofsky's Understanding Git Workflow</a> is a bit more advanced, but has probably had the largest influence on how I currently think about public vs. private branches/history</li>\n</ul>\n\n<blockquote>\n  <p>The no-ff band-aid, broken bisect, and blame mysteries are all symptoms that you’re using a screwdriver as a hammer. - @sandofsky</p>\n</blockquote>\n\n<p><strong>More Awesome Git Resources</strong></p>\n\n<ul>\n<li>I think of <a href=\"http://git-scm.com/documentation\">git-scm</a> as basically the Git bible.</li>\n<li>Atlassian's <a href=\"https://www.atlassian.com/git/workflows\">Git Workflow Docs/Guide</a></li>\n<li>CodeSchool has some <a href=\"https://www.codeschool.com/paths/electives\">pretty awesome interactive Git Courses</a></li>\n<li><a href=\"https://github.com/TryGhost/Ghost/wiki/Git-workflow\">Ghost Documentation Git Workflow</a> has some good recommendations</li>\n<li>And never forget <a href=\"http://stackoverflow.com/search?tab=votes&amp;q=git%20workflow\">to search Stack Overflow: Git Workflow</a>...</li>\n</ul>\n\n<p>Some key thoughts I've taken away from it all...</p>\n\n<h2 id=\"gettingstartedwithpullrequests\">Getting Started with Pull Requests</h2>\n\n<p>Inspired by some recent posts over at the <a href=\"http://nerds.airbnb.com/testing-at-airbnb/\">nerds.airbnb.com Engineering Blog</a>, I decided it was time I put some time into the art of using <a href=\"https://help.github.com/articles/using-pull-requests\">Pull Requests</a>.</p>\n\n<blockquote>\n  <p><strong>From the AirBNB post:</strong>  Adoption of pull requests held a number of advantages for our team. It improved our stylistic consistency, gave us a forum to discuss code structure and architectural decisions, and increased the likelihood that typos and logical errors would be caught before they reached our users. By acting as a channel through which all new code must pass, it also gave individuals on the team much greater visibility into what was shipping. This increased visibility, in turn, enabled us to begin a cultural transformation around testing.</p>\n</blockquote>\n\n<p>Don't get me wrong, I've been using Git for some time now, but as a one man development team I never felt the need to use many of the features that GitHub and/or BitBucket provides. After the past few weeks, I can attest that structuring my git workflow like so has led to:</p>\n\n<ul>\n<li>A huge boost in development focus (i.e. not straying from building \"Feature A\" and mixing in \"Bug Fix B\" and \"Refactor C\")</li>\n<li>Cleaner code</li>\n<li>More logical/sequential commit history</li>\n<li>Much more confidence that the changes introduced did not break anything </li>\n</ul>\n\n<p><em>On a side note: I've finally made the leap to writing some automated testing outside of my \"experiments/throwaway projects\" and it has seriously been awesome to see the effect it had on an existing project. ... more on that to come ;)</em></p>\n\n<h2 id=\"andsomuchmore\">And So Much More...</h2>\n\n<p>As I began writing this, I realized that there is so much to possibly cover when it comes to Git (hence the numerous articles, tutorials, and videos available all over the internet). </p>\n\n<p>Proper Branching</p>\n\n<pre><code class=\"language-bash\">master # Only affected through PRs on origin  \ndevelop  \nfeature/foo_a  \nfeature/foo_b  \nrefactor/bar_a  \nbugfix/baz_c  \n</code></pre>\n\n<p>Merging and Rebasing</p>\n\n<pre><code class=\"language-bash\">git checkout develop  \ngit pull --rebase  \ngit checkout feature/foo_b  \ngit rebase -i develop  \n# rearrange/squash commits as needed\ngit push origin feature/foo_b  \n# Submit pull request (feature/foo_b -&gt; develop)\n# Code Review, Changes/Commits, Merge, Delete feature/foo_b\n</code></pre>\n\n<p>diff/log branches</p>\n\n<pre><code class=\"language-bash\"># Show differences between working HEAD (or branch) and another branch. Add the '-p' option for patch info\ngit diff HEAD --not develop --stat\n\n# Show commit log difference between branches\ngit log HEAD --not develop --stat\n</code></pre>\n\n<ul>\n<li>tagging releases</li>\n<li>issue tracker</li>\n<li>resolving/mentioning issues and pull requests in commit messages</li>\n<li>GitHub and BitBucket code review features</li>\n<li><code>git mergetool</code> for resolving merge conflicts</li>\n<li>and the list goes on...</li>\n</ul>\n\n<p>I would love to hear how you and/or your team is using git and what type of workflow approach you find works best. I'm sure several months from now, I will look back and realize that even now I was doing things a bit ... hacky ;)</p>\n\n<p>I guess that is what I get for being a web programmer. A life of never ending learning and feeling like I'm only touching the tip of the iceberg!  </p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-06-30 13:06:51",
            "created_by": 1,
            "updated_at": "2014-07-01 11:17:23",
            "updated_by": 1,
            "published_at": "2014-07-01 11:06:56",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 16,
            "uuid": "c17ef9d9-0ae2-4239-8099-629b83f9b03b",
            "title": "Links and Stuff: July 2014",
            "slug": "links-and-stuff-july-2014",
            "markdown": "If there is anything that is universal to web developers across technological and cultural boundaries, it is searching for solutions ... a lot. \n\nI've decided that I will keep a log of the most useful links I come across. Maybe they will help others out on their similar quests ... and! ... More likely so I can have a quick way to reference \"that article that seems to have been lost in the abyss that is my browser history\".\n\nI will keep these types of lists down to only resources that I, for some reason or other, found noteworthy at the time. Feel free to share any must-have's that you feel belong on the list.\n\nPardon the lack of details ;)\n\n##Testing (PHPSpec, PHPUnit, and Laravel)\n\n- https://laracasts.com/lessons/phpspec-laravel-and-refactoring\n- [PHP: The Right Way](http://www.phptherightway.com/)\n- [Database Transactions in Laravel - @fideloper](http://fideloper.com/laravel-database-transactions)\n- [Skipped and Incomplete Tests - PHPUnit Docs](http://phpunit.de/manual/4.1/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.incomplete-tests)\n- [Conversation: When to use and not to use PHPSpec](https://github.com/phpspec/phpspec/issues/299#issuecomment-37144148)\n- [PHPSpec/Laravel Helper Package (BenConstable)](https://github.com/BenConstable/phpspec-laravel)\n- [TutsPlus May 2014 - Getting Started With Phpspec](http://code.tutsplus.com/tutorials/getting-started-with-phpspec--cms-20919)\n- [Sylius Contributing Docs](http://sylius.readthedocs.org/en/latest/contributing/code/bdd.html) Good clear examples of how to setup and use PHPSpec, Behat, Selenium, etc...\n\nhttp://code.tutsplus.com/tutorials/getting-started-with-phpspec--cms-20919\n\n\n##PHP\n\n- [Garbage Collection in PHP Explained - SitePoint](http://www.sitepoint.com/better-understanding-phps-garbage-collection/)\n- [Simple \"Convert bytes to MB/GB/etc...\" snippet - StackOverflow](http://stackoverflow.com/a/5501447/2644281)\n- [How to create a PSR-4 PHP package](http://culttt.com/2014/05/07/create-psr-4-php-package/)\n\n##Software Engineering\n- [@fideloper on Hexagonal Architecture](http://fideloper.com/hexagonal-architecture) - Awesomely comprehensive/detailed... you may want to grab a cup of coffee. ... actually, make that two.\n- [Laravel.io Podcast Ep:14](https://itunes.apple.com/us/podcast/laravel.io-podcast/id653204183?i=311072799&mt=2) - The guys at Laravel.io talk about application architecture, growing as a software developer, and engaging in community.\n\n##AngularJS\n\n- [angular-ui/ui-router - GitHub](https://github.com/angular-ui/ui-router)\n- [Scotch.io AngularJS Routing Using UI-Router](http://scotch.io/tutorials/javascript/angular-routing-using-ui-router)\n\n## Database/Persistence\n\n- [SitePoint - Top 10 MySQL Mistakes Made By PHP Developers](http://www.sitepoint.com/mysql-mistakes-php-developers/)\n\n### Some Code...\n\nSome of the results of my experimentation: works in progress...\n\n#####Todo Application using Laravel, AngularJS, and Vagrant/Homestead\n\nA minimal example of testing Laravel's Eloquent relationships using PHPSpec with much more in the works...\n\nhttps://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\n\n#####Package: SendGrid Web API\n\nMy first shot at developing a standalone PSR compliant package. This will interface with SendGrid's Web API for sending email, list management, and reporting/analytics.\n\n[ErikAybar\\SendGridWeb - GitHub Repo](https://github.com/erikthedeveloper/sendgrid-web-api)",
            "html": "<p>If there is anything that is universal to web developers across technological and cultural boundaries, it is searching for solutions ... a lot. </p>\n\n<p>I've decided that I will keep a log of the most useful links I come across. Maybe they will help others out on their similar quests ... and! ... More likely so I can have a quick way to reference \"that article that seems to have been lost in the abyss that is my browser history\".</p>\n\n<p>I will keep these types of lists down to only resources that I, for some reason or other, found noteworthy at the time. Feel free to share any must-have's that you feel belong on the list.</p>\n\n<p>Pardon the lack of details ;)</p>\n\n<h2 id=\"testingphpspecphpunitandlaravel\">Testing (PHPSpec, PHPUnit, and Laravel)</h2>\n\n<ul>\n<li><a href=\"https://laracasts.com/lessons/phpspec-laravel-and-refactoring\">https://laracasts.com/lessons/phpspec-laravel-and-refactoring</a></li>\n<li><a href=\"http://www.phptherightway.com/\">PHP: The Right Way</a></li>\n<li><a href=\"http://fideloper.com/laravel-database-transactions\">Database Transactions in Laravel - @fideloper</a></li>\n<li><a href=\"http://phpunit.de/manual/4.1/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.incomplete-tests\">Skipped and Incomplete Tests - PHPUnit Docs</a></li>\n<li><a href=\"https://github.com/phpspec/phpspec/issues/299#issuecomment-37144148\">Conversation: When to use and not to use PHPSpec</a></li>\n<li><a href=\"https://github.com/BenConstable/phpspec-laravel\">PHPSpec/Laravel Helper Package (BenConstable)</a></li>\n<li><a href=\"http://code.tutsplus.com/tutorials/getting-started-with-phpspec--cms-20919\">TutsPlus May 2014 - Getting Started With Phpspec</a></li>\n<li><a href=\"http://sylius.readthedocs.org/en/latest/contributing/code/bdd.html\">Sylius Contributing Docs</a> Good clear examples of how to setup and use PHPSpec, Behat, Selenium, etc...</li>\n</ul>\n\n<p><a href=\"http://code.tutsplus.com/tutorials/getting-started-with-phpspec--cms-20919\">http://code.tutsplus.com/tutorials/getting-started-with-phpspec--cms-20919</a></p>\n\n<h2 id=\"php\">PHP</h2>\n\n<ul>\n<li><a href=\"http://www.sitepoint.com/better-understanding-phps-garbage-collection/\">Garbage Collection in PHP Explained - SitePoint</a></li>\n<li><a href=\"http://stackoverflow.com/a/5501447/2644281\">Simple \"Convert bytes to MB/GB/etc...\" snippet - StackOverflow</a></li>\n<li><a href=\"http://culttt.com/2014/05/07/create-psr-4-php-package/\">How to create a PSR-4 PHP package</a></li>\n</ul>\n\n<h2 id=\"softwareengineering\">Software Engineering</h2>\n\n<ul>\n<li><a href=\"http://fideloper.com/hexagonal-architecture\">@fideloper on Hexagonal Architecture</a> - Awesomely comprehensive/detailed... you may want to grab a cup of coffee. ... actually, make that two.</li>\n<li><a href=\"https://itunes.apple.com/us/podcast/laravel.io-podcast/id653204183?i=311072799&amp;mt=2\">Laravel.io Podcast Ep:14</a> - The guys at Laravel.io talk about application architecture, growing as a software developer, and engaging in community.</li>\n</ul>\n\n<h2 id=\"angularjs\">AngularJS</h2>\n\n<ul>\n<li><a href=\"https://github.com/angular-ui/ui-router\">angular-ui/ui-router - GitHub</a></li>\n<li><a href=\"http://scotch.io/tutorials/javascript/angular-routing-using-ui-router\">Scotch.io AngularJS Routing Using UI-Router</a></li>\n</ul>\n\n<h2 id=\"databasepersistence\">Database/Persistence</h2>\n\n<ul>\n<li><a href=\"http://www.sitepoint.com/mysql-mistakes-php-developers/\">SitePoint - Top 10 MySQL Mistakes Made By PHP Developers</a></li>\n</ul>\n\n<h3 id=\"somecode\">Some Code...</h3>\n\n<p>Some of the results of my experimentation: works in progress...</p>\n\n<h5 id=\"todoapplicationusinglaravelangularjsandvagranthomestead\">Todo Application using Laravel, AngularJS, and Vagrant/Homestead</h5>\n\n<p>A minimal example of testing Laravel's Eloquent relationships using PHPSpec with much more in the works...</p>\n\n<p><a href=\"https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\">https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead</a></p>\n\n<h5 id=\"packagesendgridwebapi\">Package: SendGrid Web API</h5>\n\n<p>My first shot at developing a standalone PSR compliant package. This will interface with SendGrid's Web API for sending email, list management, and reporting/analytics.</p>\n\n<p><a href=\"https://github.com/erikthedeveloper/sendgrid-web-api\">ErikAybar\\SendGridWeb - GitHub Repo</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-07-01 19:09:11",
            "created_by": 1,
            "updated_at": "2014-07-11 17:28:12",
            "updated_by": 1,
            "published_at": "2014-07-05 20:55:48",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 18,
            "uuid": "09b21b58-9ea4-476d-a605-4682bd472018",
            "title": "OctoberCMS - The First Encounter",
            "slug": "octobercms-my-first-encounter",
            "markdown": "I have had my eye on [OctoberCMS](http://octobercms.com/) development for some time now and it was recently released to the public.\n\n![](/content/images/2014/Jul/October___The_PHP_platform_that_gets_back_to_basics_.png)\n\nTime to give it a shot. \n\n> Here we go...\n\n# Installation\n\nWhile the documentation (which at a glance looks amazingly comprehensive and user friendly) recommends using the [Easy/Wizard Installer](http://octobercms.com/docs/help/installation) let's be honest ... as a developer I had no other choice but to stick with the [CLI installation instructions](http://octobercms.com/docs/help/console#console-install)\n\n> ... Reminiscing of my first encounters with [Installing Laravel with Composer](http://laravel.com/docs/installation#install-composer)\n\n![Installing OctoberCMS with Composer](/content/images/2014/Jul/1__composer_create_project_october_october_october_dev_master__php_.png)\n\nDon't forget to:\n\n- Generate a unique key for `config.app.key` I'm guessing/hoping the wizard install covers this for you. Easy enough via `php artisan key:generate`\n![](/content/images/2014/Jul/1__eaybar_Eriks_MBA____Projects_ErikAybarDigitalOcean_myoctober_dev_october__zsh__and_app_php_b___october.png)\n- Make the few changes required to the config files (app, cms, database, etc...)\n- *Note to Laravel developers* there is no `ProjectRoot/public` it looks as though the OctoberCMS team decided to promote those contents directly to `ProjectRoot` so make sure to set your document root correctly to `ProjectRoot`\n- Thanks to @taylorotwell's brilliant [Vagrant/Homestead solution](http://laravel.com/docs/homestead) development environment, I simply had to:\n    - add 4 lines to my `Homestead.yaml`\n    - update my `/etc/hosts` file\n    - `vagrant reload --provision`\n    - browse to [http://myoctober.dev/](http://myoctober.dev/)  and..\n    \n![](/content/images/2014/Jul/1__eaybar_Eriks_MBA____Projects_Homestead__zsh__and_hosts_b___Homestead.png)\n\n\n\n### ... We're in!\n\n![](/content/images/2014/Jul/October_CMS___Demonstration.png)\n\n... I will admint, that easier than expected on the first run. All in all (including the time it took me to put this together), I am looking at ~20 minutes. I'm assuming the wizard installer is much quicker, and had I just ran throught the process (excluding screenshots/rambling) it would have been more like a 5 - 10 minute process from discovery to browsing to \"The Demo\".\n\nI'm excited to get some time in with [OctoberCMS](http://octobercms.com) both as a developer and a potential user.\n\nAs a developer, this article on [Raising the Bar of Quality](http://octobercms.com/blog/post/raising-bar-quality) got me more than excited to poke around the source code. \n\n> The quality of code was immediately clear and concise from even the very early Alpha stages. I was so blown away with the quality of code and forethought by Aleksey and Sam that I was literally inspired and compelled to start coding. - [ChadStrat from RadiantWeb](http://goradiantweb.com/blog)\n\nAs someone who has been spending the majority of my days with Laravel 4+ since December, I can say they definitely have some enjoyable source code and look to be 100% open to contributions.\n\n![](/content/images/2014/Jul/Issues_B7_octobercms_october.png)\n\n\n**I would be interested to hear from others' take on OctoberCMS*** who also have experience developing Laravel-based applications. \n\nI hope to get some time in with it... and *deep breath...* migrate this very website over to using it. We'll see how it goes...",
            "html": "<p>I have had my eye on <a href=\"http://octobercms.com/\">OctoberCMS</a> development for some time now and it was recently released to the public.</p>\n\n<p><img src=\"/content/images/2014/Jul/October___The_PHP_platform_that_gets_back_to_basics_.png\" alt=\"\" /></p>\n\n<p>Time to give it a shot. </p>\n\n<blockquote>\n  <p>Here we go...</p>\n</blockquote>\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>While the documentation (which at a glance looks amazingly comprehensive and user friendly) recommends using the <a href=\"http://octobercms.com/docs/help/installation\">Easy/Wizard Installer</a> let's be honest ... as a developer I had no other choice but to stick with the <a href=\"http://octobercms.com/docs/help/console#console-install\">CLI installation instructions</a></p>\n\n<blockquote>\n  <p>... Reminiscing of my first encounters with <a href=\"http://laravel.com/docs/installation#install-composer\">Installing Laravel with Composer</a></p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Jul/1__composer_create_project_october_october_october_dev_master__php_.png\" alt=\"Installing OctoberCMS with Composer\" /></p>\n\n<p>Don't forget to:</p>\n\n<ul>\n<li>Generate a unique key for <code>config.app.key</code> I'm guessing/hoping the wizard install covers this for you. Easy enough via <code>php artisan key:generate</code>\n<img src=\"/content/images/2014/Jul/1__eaybar_Eriks_MBA&#95;&#95;&#95;&#95;Projects_ErikAybarDigitalOcean_myoctober_dev_october__zsh__and_app_php_b___october.png\" alt=\"\" /></li>\n<li>Make the few changes required to the config files (app, cms, database, etc...)</li>\n<li><em>Note to Laravel developers</em> there is no <code>ProjectRoot/public</code> it looks as though the OctoberCMS team decided to promote those contents directly to <code>ProjectRoot</code> so make sure to set your document root correctly to <code>ProjectRoot</code></li>\n<li>Thanks to @taylorotwell's brilliant <a href=\"http://laravel.com/docs/homestead\">Vagrant/Homestead solution</a> development environment, I simply had to:\n<ul><li>add 4 lines to my <code>Homestead.yaml</code></li>\n<li>update my <code>/etc/hosts</code> file</li>\n<li><code>vagrant reload --provision</code></li>\n<li>browse to <a href=\"http://myoctober.dev/\">http://myoctober.dev/</a>  and..</li></ul></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Jul/1__eaybar_Eriks_MBA&#95;&#95;&#95;&#95;Projects_Homestead__zsh__and_hosts_b___Homestead.png\" alt=\"\" /></p>\n\n<h3 id=\"werein\">... We're in!</h3>\n\n<p><img src=\"/content/images/2014/Jul/October_CMS___Demonstration.png\" alt=\"\" /></p>\n\n<p>... I will admint, that easier than expected on the first run. All in all (including the time it took me to put this together), I am looking at ~20 minutes. I'm assuming the wizard installer is much quicker, and had I just ran throught the process (excluding screenshots/rambling) it would have been more like a 5 - 10 minute process from discovery to browsing to \"The Demo\".</p>\n\n<p>I'm excited to get some time in with <a href=\"http://octobercms.com\">OctoberCMS</a> both as a developer and a potential user.</p>\n\n<p>As a developer, this article on <a href=\"http://octobercms.com/blog/post/raising-bar-quality\">Raising the Bar of Quality</a> got me more than excited to poke around the source code. </p>\n\n<blockquote>\n  <p>The quality of code was immediately clear and concise from even the very early Alpha stages. I was so blown away with the quality of code and forethought by Aleksey and Sam that I was literally inspired and compelled to start coding. - <a href=\"http://goradiantweb.com/blog\">ChadStrat from RadiantWeb</a></p>\n</blockquote>\n\n<p>As someone who has been spending the majority of my days with Laravel 4+ since December, I can say they definitely have some enjoyable source code and look to be 100% open to contributions.</p>\n\n<p><img src=\"/content/images/2014/Jul/Issues_B7_octobercms_october.png\" alt=\"\" /></p>\n\n<p><strong>I would be interested to hear from others' take on OctoberCMS*</strong> who also have experience developing Laravel-based applications. </p>\n\n<p>I hope to get some time in with it... and <em>deep breath...</em> migrate this very website over to using it. We'll see how it goes...</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-07-06 20:51:06",
            "created_by": 1,
            "updated_at": "2014-07-06 21:34:53",
            "updated_by": 1,
            "published_at": "2014-07-06 21:25:26",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 20,
            "uuid": "69eb5ebe-0ad5-408d-8700-a9c303b43f72",
            "title": "Building and Testing a RESTful API using Behat, PHPUnit, and Laravel - Part 1",
            "slug": "building-and-testing-a-restful-api-using-behat-phpunit-and-laravel-part-1",
            "markdown": "**Note to reader: head on over to my follow up post [Using Behat for Building and Testing a RESTful JSON API (Laravel)](http://erikaybar.name/behat-for-testing-laravel-restful-json-api/)**\n\nI wanted to share my experience(s) in setting up Behat to test an API I'm building using Laravel. You'll have to excuse the lack of english. Code will have to suffice for now ;)\n\nThis is meant to be an absolute minimal example to get you up and running hitting your Laravel API using GuzzlePHP with Behat and making assertions with PHPUnit. This is *not meant to be* a comprehensive \"this is the right way to test\" example. Enjoy.\n\nThe project that this is a part of can be found here: https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\n\nA work in progress that includes a configured Vagrant/Homestead development environment and separate directories/sites for the JSON API we are building with Laravel and the front end web app built on AngularJS.\n\n> Our end result? Test output from running `behat`.\n\n![](/content/images/2014/Jul/1__eaybar_Eriks_MBA____Projects_GitHub_Repos_Misc_erikthedeveloper_todo_laravel_angularjs_homestead_TheApp_LaravelApi__zsh_.png)\n\n## Super Brief Code Examples\n\n#### composer.json\n\nInstall the required dependencies. In addition to Behat the composer packages required for the testing are PHPUnit for the assertions, and guzzlehttp for consuming our API.\n\nNote that GuzzleHttp is part of the `require` rather than `require-dev`. We do have some plans to use it to consume 3rd party APIs.\n\n```language-javascript\n/*\n...\n*/\n\n\"require\": {\n\t\t\"laravel/framework\": \"4.2.*\",\n        \n        /* To hit our API (and eventually others) */\n        \"guzzlehttp/guzzle\": \"~4.0\"\n\t},\n    \"require-dev\": {\n        \"barryvdh/laravel-ide-helper\": \"1.*\",\n        \"way/generators\": \"2.*\",\n        \"doctrine/dbal\": \"~2.3\",\n        \"phpspec/phpspec\": \"~2.0\",\n        \n        /* Behat + PHPUnit */\n        \"behat/behat\": \"2.*\",\n        \"phpunit/phpunit\": \"~3.0\",\n        \n        \"benconstable/phpspec-laravel\": \"~1.0\"\n    },\n   \n/*\n...\n*/\n```\n\n#### basic api routes.feature\n\nI began by writing out the feature. http://docs.behat.org/guides/1.gherkin.html\n\n```language-php\nFeature: Basic API Routes\n    In order to interact with my application from the front end\n    As a front end developer with no knowledge of API wizardry\n    I need to have an awesomely clear API to work with\n\n    Scenario: GET \"/\"\n        When I send a GET request to \"/\"\n        Then the response code should be 200\n        And the JSON response should have a \"message\" containing \"Hello World\"\n```\n\n\n#### FeatureContext.php\n```language-php\n<?php\n\nuse Behat\\Behat\\Context\\ClosuredContextInterface,\n    Behat\\Behat\\Context\\TranslatedContextInterface,\n    Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\n\nuse GuzzleHttp\\Client;\n\n/**\n * Available auto-magically after composer install w/ phpunit/phpunit\n */\nrequire_once 'PHPUnit/Autoload.php';\nrequire_once 'PHPUnit/Framework/Assert/Functions.php';\n\n/**\n * Features context.\n */\nclass FeatureContext extends BehatContext\n{\n\n    protected $client;\n\n    protected $response;\n\n    protected $base_url = 'http://api.my-todo-app.dev';\n\n    /**\n     * Initializes context.\n     * Every scenario gets its own context object.\n     *\n     * @param array $parameters context parameters (set them up through behat.yml)\n     */\n    public function __construct(array $parameters)\n    {\n        $client_params = [\n            'base_url' => $this->base_url\n        ];\n        $this->client = new Client($client_params);\n    }\n\n    /**\n     * @When /^I send a ([A-Z]+) request to \"([^\"]*)\"$/\n     */\n    public function iSendARequestTo($method, $uri)\n    {\n        $request        = $this->client->createRequest($method, $uri);\n        $this->response = $this->client->send($request);\n    }\n\n    /**\n     * @Then /^the response code should be (\\d+)$/\n     */\n    public function theResponseCodeShouldBe($response_code)\n    {\n        assertEquals($response_code, $this->response->getStatusCode());\n    }\n\n    /**\n     * @Given /^the JSON response should have a \"([^\"]*)\" containing \"([^\"]*)\"$/\n     */\n    public function theJsonResponseShouldHaveAContaining($var_name, $var_contain_val)\n    {\n        $json_data = $this->response->json();\n        assertArrayHasKey($var_name, $json_data);\n        assertContains($var_contain_val, $json_data[$var_name]);\n    }\n}\n\n```\n\n#### routes.php\n```language-php\n<?php\n\nRoute::get('/', function()\n{\n    $data = [\n        \"message\" => \"Hello World welcome\"\n    ];\n\treturn Response::json($data);\n});\n```\n\n\nStill a WIP, but this should get the point across for now. I hope this helps someone get up and running as I was unable to come across any brief, clear examples using Behat for testing a RESTful API, PHPUnit for assertions with Behat, and Laravel as an API.\n\n... will continue writing when I get the chance. Until now, this project is under active development at: https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\n\n\n**Note to reader: head on over to my follow up post [Using Behat for Building and Testing a RESTful JSON API (Laravel)](http://erikaybar.name/behat-for-testing-laravel-restful-json-api/)**",
            "html": "<p><strong>Note to reader: head on over to my follow up post <a href=\"http://erikaybar.name/behat-for-testing-laravel-restful-json-api/\">Using Behat for Building and Testing a RESTful JSON API (Laravel)</a></strong></p>\n\n<p>I wanted to share my experience(s) in setting up Behat to test an API I'm building using Laravel. You'll have to excuse the lack of english. Code will have to suffice for now ;)</p>\n\n<p>This is meant to be an absolute minimal example to get you up and running hitting your Laravel API using GuzzlePHP with Behat and making assertions with PHPUnit. This is <em>not meant to be</em> a comprehensive \"this is the right way to test\" example. Enjoy.</p>\n\n<p>The project that this is a part of can be found here: <a href=\"https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\">https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead</a></p>\n\n<p>A work in progress that includes a configured Vagrant/Homestead development environment and separate directories/sites for the JSON API we are building with Laravel and the front end web app built on AngularJS.</p>\n\n<blockquote>\n  <p>Our end result? Test output from running <code>behat</code>.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Jul/1__eaybar_Eriks_MBA&#95;&#95;&#95;&#95;Projects_GitHub_Repos_Misc_erikthedeveloper_todo_laravel_angularjs_homestead_TheApp_LaravelApi__zsh_.png\" alt=\"\" /></p>\n\n<h2 id=\"superbriefcodeexamples\">Super Brief Code Examples</h2>\n\n<h4 id=\"composerjson\">composer.json</h4>\n\n<p>Install the required dependencies. In addition to Behat the composer packages required for the testing are PHPUnit for the assertions, and guzzlehttp for consuming our API.</p>\n\n<p>Note that GuzzleHttp is part of the <code>require</code> rather than <code>require-dev</code>. We do have some plans to use it to consume 3rd party APIs.</p>\n\n<pre><code class=\"language-javascript\">/*\n...\n*/\n\n\"require\": {\n        \"laravel/framework\": \"4.2.*\",\n\n        /* To hit our API (and eventually others) */\n        \"guzzlehttp/guzzle\": \"~4.0\"\n    },\n    \"require-dev\": {\n        \"barryvdh/laravel-ide-helper\": \"1.*\",\n        \"way/generators\": \"2.*\",\n        \"doctrine/dbal\": \"~2.3\",\n        \"phpspec/phpspec\": \"~2.0\",\n\n        /* Behat + PHPUnit */\n        \"behat/behat\": \"2.*\",\n        \"phpunit/phpunit\": \"~3.0\",\n\n        \"benconstable/phpspec-laravel\": \"~1.0\"\n    },\n\n/*\n...\n*/\n</code></pre>\n\n<h4 id=\"basicapiroutesfeature\">basic api routes.feature</h4>\n\n<p>I began by writing out the feature. <a href=\"http://docs.behat.org/guides/1.gherkin.html\">http://docs.behat.org/guides/1.gherkin.html</a></p>\n\n<pre><code class=\"language-php\">Feature: Basic API Routes  \n    In order to interact with my application from the front end\n    As a front end developer with no knowledge of API wizardry\n    I need to have an awesomely clear API to work with\n\n    Scenario: GET \"/\"\n        When I send a GET request to \"/\"\n        Then the response code should be 200\n        And the JSON response should have a \"message\" containing \"Hello World\"\n</code></pre>\n\n<h4 id=\"featurecontextphp\">FeatureContext.php</h4>\n\n<pre><code class=\"language-php\">&lt;?php\n\nuse Behat\\Behat\\Context\\ClosuredContextInterface,  \n    Behat\\Behat\\Context\\TranslatedContextInterface,\n    Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,  \n    Behat\\Gherkin\\Node\\TableNode;\n\nuse GuzzleHttp\\Client;\n\n/**\n * Available auto-magically after composer install w/ phpunit/phpunit\n */\nrequire_once 'PHPUnit/Autoload.php';  \nrequire_once 'PHPUnit/Framework/Assert/Functions.php';\n\n/**\n * Features context.\n */\nclass FeatureContext extends BehatContext  \n{\n\n    protected $client;\n\n    protected $response;\n\n    protected $base_url = 'http://api.my-todo-app.dev';\n\n    /**\n     * Initializes context.\n     * Every scenario gets its own context object.\n     *\n     * @param array $parameters context parameters (set them up through behat.yml)\n     */\n    public function __construct(array $parameters)\n    {\n        $client_params = [\n            'base_url' =&gt; $this-&gt;base_url\n        ];\n        $this-&gt;client = new Client($client_params);\n    }\n\n    /**\n     * @When /^I send a ([A-Z]+) request to \"([^\"]*)\"$/\n     */\n    public function iSendARequestTo($method, $uri)\n    {\n        $request        = $this-&gt;client-&gt;createRequest($method, $uri);\n        $this-&gt;response = $this-&gt;client-&gt;send($request);\n    }\n\n    /**\n     * @Then /^the response code should be (\\d+)$/\n     */\n    public function theResponseCodeShouldBe($response_code)\n    {\n        assertEquals($response_code, $this-&gt;response-&gt;getStatusCode());\n    }\n\n    /**\n     * @Given /^the JSON response should have a \"([^\"]*)\" containing \"([^\"]*)\"$/\n     */\n    public function theJsonResponseShouldHaveAContaining($var_name, $var_contain_val)\n    {\n        $json_data = $this-&gt;response-&gt;json();\n        assertArrayHasKey($var_name, $json_data);\n        assertContains($var_contain_val, $json_data[$var_name]);\n    }\n}\n</code></pre>\n\n<h4 id=\"routesphp\">routes.php</h4>\n\n<pre><code class=\"language-php\">&lt;?php\n\nRoute::get('/', function()  \n{\n    $data = [\n        \"message\" =&gt; \"Hello World welcome\"\n    ];\n    return Response::json($data);\n});\n</code></pre>\n\n<p>Still a WIP, but this should get the point across for now. I hope this helps someone get up and running as I was unable to come across any brief, clear examples using Behat for testing a RESTful API, PHPUnit for assertions with Behat, and Laravel as an API.</p>\n\n<p>... will continue writing when I get the chance. Until now, this project is under active development at: <a href=\"https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead\">https://github.com/erikthedeveloper/todo-laravel-angularjs-homestead</a></p>\n\n<p><strong>Note to reader: head on over to my follow up post <a href=\"http://erikaybar.name/behat-for-testing-laravel-restful-json-api/\">Using Behat for Building and Testing a RESTful JSON API (Laravel)</a></strong></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-07-15 11:22:39",
            "created_by": 1,
            "updated_at": "2014-12-12 14:33:01",
            "updated_by": 1,
            "published_at": "2014-07-15 12:02:47",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 21,
            "uuid": "cd7ee06d-f0da-4b32-b7ce-446fc4cd83ae",
            "title": "So I've Been Looking at Ember.js ...",
            "slug": "considering-emberjs-as-a-javascript-framework",
            "markdown": "It seems when it comes to Javascript MVC frameworks it can be dizzying trying to keep up with which is the hottest *\"Best\"* option to go with for a new project.\n\n## EmberJS\n\nI've spent a bit of time tinkering with AngularJS and few others, but have yet to really invest any serious time in diving in deep into any of the Javascript frameworks out there. I've recently had my eyes set on Ember.js. I really like the convention-over-configuration and the huge emphasis on the [role of the URL (Tom Dale)](http://tomdale.net/2012/05/ember-routing/).\n\nI've been hearing more and more about [EmberJS](http://emberjs.com/) lately and feel like it deserves a bit of my time :) ...\n\n\n![](/content/images/2014/Aug/Ember_js___A_framework_for_creating_ambitious_web_applications.png)\n\n> A FRAMEWORK FOR CREATING AMBITIOUS WEB APPLICATIONS.\n\n\n... coming from the wonderful world of Laravel development, this makes me feel right at home.\n\nCase and point:\n\n![](/content/images/2014/Aug/Laravel___The_PHP_framework_for_web_artisans_.png)\n\nFrom the [Laravel PHP MVC Framework](http://laravel.com)'s homepage\n\n\nMoving onto looking deeper into the EmberJS website you will immediately notice that the documentation is well organized and that the Ember team puts a huge emphasis on clear, complete examples http://emberjs.com/guides/\n\n![](/content/images/2014/Aug/Ember_js___Guides_and_Tutorials__Ember_js_Guides.png)\n\n... again, feeling totally at home after spending the majority of my days with the Laravel docs open!\n\nRight on the first page:\n\n> To help you get started, we've also made a 30-minute screencast that will guide you through building a full-featured Ember.js application. \n\nSource for EmberJS Example Application: https://github.com/tildeio/bloggr-client\n\nAnyhow, you could spend days digging through the docs, guides, and website. Not to mention the awesome (growing) list of dedicated EmberJS learning resources available out there:\n\n* http://www.embercasts.com/\n* https://www.codeschool.com/courses/warming-up-with-ember-js\n\nOver the next few weeks/months, I hope to get some serious time in with Ember.js and get a feel for if it is a better fit for my needs style than some of the other Javascript MVC frameworks out there (i.e. [AngularJS](https://angularjs.org/), [React](http://facebook.github.io/react/), [etc...](https://www.google.com/search?q=javascript+frameworks))\n\n\n",
            "html": "<p>It seems when it comes to Javascript MVC frameworks it can be dizzying trying to keep up with which is the hottest <em>\"Best\"</em> option to go with for a new project.</p>\n\n<h2 id=\"emberjs\">EmberJS</h2>\n\n<p>I've spent a bit of time tinkering with AngularJS and few others, but have yet to really invest any serious time in diving in deep into any of the Javascript frameworks out there. I've recently had my eyes set on Ember.js. I really like the convention-over-configuration and the huge emphasis on the <a href=\"http://tomdale.net/2012/05/ember-routing/\">role of the URL (Tom Dale)</a>.</p>\n\n<p>I've been hearing more and more about <a href=\"http://emberjs.com/\">EmberJS</a> lately and feel like it deserves a bit of my time :) ...</p>\n\n<p><img src=\"/content/images/2014/Aug/Ember_js___A_framework_for_creating_ambitious_web_applications.png\" alt=\"\" /></p>\n\n<blockquote>\n  <p>A FRAMEWORK FOR CREATING AMBITIOUS WEB APPLICATIONS.</p>\n</blockquote>\n\n<p>... coming from the wonderful world of Laravel development, this makes me feel right at home.</p>\n\n<p>Case and point:</p>\n\n<p><img src=\"/content/images/2014/Aug/Laravel___The_PHP_framework_for_web_artisans_.png\" alt=\"\" /></p>\n\n<p>From the <a href=\"http://laravel.com\">Laravel PHP MVC Framework</a>'s homepage</p>\n\n<p>Moving onto looking deeper into the EmberJS website you will immediately notice that the documentation is well organized and that the Ember team puts a huge emphasis on clear, complete examples <a href=\"http://emberjs.com/guides/\">http://emberjs.com/guides/</a></p>\n\n<p><img src=\"/content/images/2014/Aug/Ember_js___Guides_and_Tutorials__Ember_js_Guides.png\" alt=\"\" /></p>\n\n<p>... again, feeling totally at home after spending the majority of my days with the Laravel docs open!</p>\n\n<p>Right on the first page:</p>\n\n<blockquote>\n  <p>To help you get started, we've also made a 30-minute screencast that will guide you through building a full-featured Ember.js application. </p>\n</blockquote>\n\n<p>Source for EmberJS Example Application: <a href=\"https://github.com/tildeio/bloggr-client\">https://github.com/tildeio/bloggr-client</a></p>\n\n<p>Anyhow, you could spend days digging through the docs, guides, and website. Not to mention the awesome (growing) list of dedicated EmberJS learning resources available out there:</p>\n\n<ul>\n<li><a href=\"http://www.embercasts.com/\">http://www.embercasts.com/</a></li>\n<li><a href=\"https://www.codeschool.com/courses/warming-up-with-ember-js\">https://www.codeschool.com/courses/warming-up-with-ember-js</a></li>\n</ul>\n\n<p>Over the next few weeks/months, I hope to get some serious time in with Ember.js and get a feel for if it is a better fit for my needs style than some of the other Javascript MVC frameworks out there (i.e. <a href=\"https://angularjs.org/\">AngularJS</a>, <a href=\"http://facebook.github.io/react/\">React</a>, <a href=\"https://www.google.com/search?q=javascript+frameworks\">etc...</a>)</p>",
            "image": "http://erikaybar.name/content/images/2014/Aug/Ember_js___A_framework_for_creating_ambitious_web_applications.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-08-12 13:20:28",
            "created_by": 1,
            "updated_at": "2014-11-18 14:53:14",
            "updated_by": 1,
            "published_at": "2014-10-11 01:23:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 22,
            "uuid": "324f6113-3e4c-4359-b18d-949e8492d6be",
            "title": "Setting Up Mac OS X Mavericks for Web Development: Getting Started",
            "slug": "preparing-os-x-mavericks-for-web-development",
            "markdown": "Over the last week or two, I have had the opportunity of setting up several OS X machines for development. It had been a while since I sat down to set up a fresh Mac OS X account, and I hadn't quite realized how far I had come along in the last year or so and how many little adjustments and programs had added up in that time.\n\n> As a developer, you spend a significant chunk of your life immersed in your development machine. It should be as refined and as pleasant as possible. Spending a few hours now to save tens or hundreds of hours later is just a no brainer. Not to mention the fun you'll have along the way ;)\n\n> \\- Me\n\nI set out to semi-document the process from start-to-finish of setting up a fresh Mac OS X Mavericks account as a primary web development/programming machine - leaning towards modern PHP development, but also enabling a slew of other web development related goodies.\n\nA bit of an early preview:\n\n![](/content/images/2014/Aug/Screen_Shot_2014_08_19_at_7_04_02_AM.png)\n\nSome of the major highlights will be:\n\n* General clean up and refinement of OS X defaults and settings\n* Installing and setting up a number of Apps to aid with speeding up workflow and general happiness\n* Getting development specific applications and utilities installed and configured\n\t* IDE's\n    * Command line configuration and utilities\n    * Development environment(s)\n    * etc...\n* and of course, whatever else jumps out at me during the process...\n    \n    \n## Configure the OS\n\nSome of these settings may be opinionated, but I've found that Mac OS X Mavericks ships with a few quirky defaults. I'm sure there are plenty of things I've missed on this list, but I feel like it is a decent starting point.\n\n**Trackpad**\n\n* \"Fix\" the default scrolling... setting since it is backwards ;) \n    * `> Scroll & Zoom > Scroll Direction` -> Uncheck\n* `> Point & Click > Tap to Click` -> Check\n\nThis next one is my #1 gripe with the OS X team. Enable \"Double tap and hold to drag\" ... This is buried pretty deep so here we go ;)\n\n* `Accessibility > Mouse & Trackpad > Trackpad Options > Enable Dragging without Drag Lock` -> Check this box\n* Show date, day, time, and name/user on menu bar\n\n![](/content/images/2014/Aug/TRACKPAD_OPTIONS_and_sheet_C15A95B4_871C_4C3B_912D_AB3DACDB1F16.png)\n\n\n**Mission Control**\n\n* uncheck \"Show Dashboard as a Space\"\n* uncheck \"Rearrange Spaces...\"\n* disable both \"Mission Control\" and \"Application Windows\" keyboard shortcuts ... they tend to clash with some crucial IDE shortcuts...\n\n![](/content/images/2014/Aug/Mission_Control_and_Ghost_Admin.png)\n\n* Hot Corners (bottom left)\n    * Top Left: Desktop \"Show Desktop\"\n    * Top Right: Application Windows \"Show me all windows open for [ACTIVE APPLICATION]\"\n    * Bottom Left: Mission Control \"Show all Spaces/etc...\"\n    * Bottom Right: Mission Control \"Show all Spaces/etc...\"\n\n![](/content/images/2014/Aug/Mission_Control.png)\n\n...And of course, don't forget to change the desktop to some awesome picture that makes you feel great inside.\n\n##### General Workflow/Spaces\n\nSpaces, Desktops, or whatever the kids are calling them these days have become an essential part of my workflow. I call them \"Spaces\".\n\nMy workflow is generally using 3 Spaces.\n\n* 1.) Primary/General Use - Usually Chrome w/ some unhealthy number of tabs open\n* 2.) IDE - SublimeText or PHPStorm depending on what I had for breakfast\n* 3.) More specific/occassional use such as Sequel Pro, or some other thing that I need open but am not really using much\n\n![](/content/images/2014/Aug/Screen_Shot_2014_08_19_at_7_04_02_AM.png)\n\nTo switch between them I either stick with the default `^ + left` or `^ + right` or ... by hitting the bottom left/right Hot Corners to zoom out to Mission Control... or ... by switching Applications...\n\nTo switch applications and see what you have running: `⌘ + tab`\n\nI am pretty generous when it comes to creating/deleting new Spaces as needed and generally try dedicate each Space to a specific task/role. \n\nI find once I get into the 5-6 range, my productivity usually plummets and I have to close everything and start fresh :)\n\n##### The Dock\n\nAnother thing I consistently find myself doing on a fresh OS X install is gutting the Dock. There is just something about having all of those giant, default App Icons glaring at me, filling the entirety of the bottom of my screen. \n\nDrag. Drop. Poof. Until we are down to basically nothing\n\nAlso\n\n* Add \"Applications\" directory to dock\n* Change all directories in dock to display as folder and view content as list\n* Reduce dock size\n* Enable magnification\n* Remember `⌘ + ⌥ + d` to hide/show the dock\n* Add Dock spacers\n\nTo add the spacers to your OS X dock ...\n\n```language-bash\n# Do this twice\ndefaults write com.apple.dock persistent-apps -array-add '{\"tile-type\"=\"spacer-tile\";}'\n# and then..\nkillall Dock\n```\n\n... we will revisit this a bit later. Until then you will be left wondering \"why do I have this odd gaping hole in my Dock?\"...\n\nHere is a bit of a preview:\n\n![](/content/images/2014/Aug/Screenshot_8_19_14__6_51_AM.png)\n\n\n##### Security\n\nJust be smart.\n\nEnable require password on sleep, screensaver, etc...\n\nRemember Alfred can easily \"lock\" your screen by simply typing `lock` ... more on Alfred in a bit ;)\n\n\n## Install Goodies - General\n\n#### [Chrome](https://www.google.com/intl/en/chrome/browser/)\n\nIf you are not currently using Chrome as your primary web browser... actually, we won't even go there ;) \n\nI will say that as a developer I highly recommend it and no matter how many times I try, I simply can not get myself to use Firefox for development. It just does not work for me :)\n\n... and yes... as a web developer you probably \"should\" install all of those other web browsers. You know for that \"browser compatibility\" thing I keep hearing about...\n\n* Chrome Extensions\n\t* ...\n\t* ...\n\n##### [Alfred - `⌥ + Space` -> Do Anything](http://www.alfredapp.com/)\n\n![](/content/images/2014/Aug/Alfred_App___Productivity_App_for_Mac_OS_X.png)\n\nAlfred is one of those apps that I wish I had discovered years ago. Ever since converting over to Mac OS X years ago as I began my journey into web development, I have grown to love the `⌘ + Space` -> \"search for and launch anything\" that Mac OS X's Spotlight provides. \n\nThink of Alfred of being just like this... but on steroids. I have yet to unlock the power pack, but the free version has kept me plenty happy... I do know some developers who have gone with the upgrade and swear by it. ... one of these days :)\n\n##### [Skitch - Quick Screenshots (markup, share, etc...)](http://evernote.com/skitch/)\n\n![](/content/images/2014/Aug/Skitch___Evernote.png)\n\n- `⌘ + ⇧ + 5` - Selection\n- `⌘ + ⇧ + ⌥ + 5` - Timed Selection\n- `⌘ + ⇧ + 6` - Full Screen\n\nWIP ...\n\n##### [Mou - Markdown Editor](http://mouapp.com/)\n\n![](/content/images/2014/Aug/Mou___Markdown_editor_for_web_developers__on_Mac_OS_X.png)\n\nWIP ...\n\n##### And a slew of others...\n\n* [Skype](http://www.skype.com/en/)\n* [Spotify](https://www.spotify.com/us/download/mac/) ... or whatever music player you prefer. Just make sure you have something ;)\n* Dropbox\n* Google Drive\t\n* ...\n\n\n\n## An Evolving Process\n\n\nI always love hearing about and learning from others' setups and/or workflows. Feel like I missed something crucial? Have a step or two to add? Let me know in the comments below or find me at [@erikthedev\\_](https://twitter.com/erikthedev_) and I will consider adding it here.\n\nHopefully this first step was a bit helpful... the next step/entry we will be diving into setting up the actual development essentials:\n\n* IDE's (Sublime Text 3 and PHPStorm)\n* Terminal (Iterm2 + Oh My Zsh + rupa/z)\n* Installing node.js, Composer, etc...\n* and of course... whatever else finds its way into my ramblings ;)\n\n*Random Side Note:*\n\n*For those of you (and myself) wanting to use Mac OS X Keyboard characters... Copy/Paste at will!*\n\n# ⌘ ⌥ ^ ⏎ ⇧",
            "html": "<p>Over the last week or two, I have had the opportunity of setting up several OS X machines for development. It had been a while since I sat down to set up a fresh Mac OS X account, and I hadn't quite realized how far I had come along in the last year or so and how many little adjustments and programs had added up in that time.</p>\n\n<blockquote>\n  <p>As a developer, you spend a significant chunk of your life immersed in your development machine. It should be as refined and as pleasant as possible. Spending a few hours now to save tens or hundreds of hours later is just a no brainer. Not to mention the fun you'll have along the way ;)</p>\n  \n  <p>- Me</p>\n</blockquote>\n\n<p>I set out to semi-document the process from start-to-finish of setting up a fresh Mac OS X Mavericks account as a primary web development/programming machine - leaning towards modern PHP development, but also enabling a slew of other web development related goodies.</p>\n\n<p>A bit of an early preview:</p>\n\n<p><img src=\"/content/images/2014/Aug/Screen_Shot_2014_08_19_at_7_04_02_AM.png\" alt=\"\" /></p>\n\n<p>Some of the major highlights will be:</p>\n\n<ul>\n<li>General clean up and refinement of OS X defaults and settings</li>\n<li>Installing and setting up a number of Apps to aid with speeding up workflow and general happiness</li>\n<li>Getting development specific applications and utilities installed and configured\n<ul><li>IDE's</li>\n<li>Command line configuration and utilities</li>\n<li>Development environment(s)</li>\n<li>etc...</li></ul></li>\n<li>and of course, whatever else jumps out at me during the process...</li>\n</ul>\n\n<h2 id=\"configuretheos\">Configure the OS</h2>\n\n<p>Some of these settings may be opinionated, but I've found that Mac OS X Mavericks ships with a few quirky defaults. I'm sure there are plenty of things I've missed on this list, but I feel like it is a decent starting point.</p>\n\n<p><strong>Trackpad</strong></p>\n\n<ul>\n<li>\"Fix\" the default scrolling... setting since it is backwards ;) \n<ul><li><code>&gt; Scroll &amp; Zoom &gt; Scroll Direction</code> -> Uncheck</li></ul></li>\n<li><code>&gt; Point &amp; Click &gt; Tap to Click</code> -> Check</li>\n</ul>\n\n<p>This next one is my #1 gripe with the OS X team. Enable \"Double tap and hold to drag\" ... This is buried pretty deep so here we go ;)</p>\n\n<ul>\n<li><code>Accessibility &gt; Mouse &amp; Trackpad &gt; Trackpad Options &gt; Enable Dragging without Drag Lock</code> -> Check this box</li>\n<li>Show date, day, time, and name/user on menu bar</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/TRACKPAD_OPTIONS_and_sheet_C15A95B4_871C_4C3B_912D_AB3DACDB1F16.png\" alt=\"\" /></p>\n\n<p><strong>Mission Control</strong></p>\n\n<ul>\n<li>uncheck \"Show Dashboard as a Space\"</li>\n<li>uncheck \"Rearrange Spaces...\"</li>\n<li>disable both \"Mission Control\" and \"Application Windows\" keyboard shortcuts ... they tend to clash with some crucial IDE shortcuts...</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/Mission_Control_and_Ghost_Admin.png\" alt=\"\" /></p>\n\n<ul>\n<li>Hot Corners (bottom left)\n<ul><li>Top Left: Desktop \"Show Desktop\"</li>\n<li>Top Right: Application Windows \"Show me all windows open for [ACTIVE APPLICATION]\"</li>\n<li>Bottom Left: Mission Control \"Show all Spaces/etc...\"</li>\n<li>Bottom Right: Mission Control \"Show all Spaces/etc...\"</li></ul></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/Mission_Control.png\" alt=\"\" /></p>\n\n<p>...And of course, don't forget to change the desktop to some awesome picture that makes you feel great inside.</p>\n\n<h5 id=\"generalworkflowspaces\">General Workflow/Spaces</h5>\n\n<p>Spaces, Desktops, or whatever the kids are calling them these days have become an essential part of my workflow. I call them \"Spaces\".</p>\n\n<p>My workflow is generally using 3 Spaces.</p>\n\n<ul>\n<li>1.) Primary/General Use - Usually Chrome w/ some unhealthy number of tabs open</li>\n<li>2.) IDE - SublimeText or PHPStorm depending on what I had for breakfast</li>\n<li>3.) More specific/occassional use such as Sequel Pro, or some other thing that I need open but am not really using much</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/Screen_Shot_2014_08_19_at_7_04_02_AM.png\" alt=\"\" /></p>\n\n<p>To switch between them I either stick with the default <code>^ + left</code> or <code>^ + right</code> or ... by hitting the bottom left/right Hot Corners to zoom out to Mission Control... or ... by switching Applications...</p>\n\n<p>To switch applications and see what you have running: <code>⌘ + tab</code></p>\n\n<p>I am pretty generous when it comes to creating/deleting new Spaces as needed and generally try dedicate each Space to a specific task/role. </p>\n\n<p>I find once I get into the 5-6 range, my productivity usually plummets and I have to close everything and start fresh :)</p>\n\n<h5 id=\"thedock\">The Dock</h5>\n\n<p>Another thing I consistently find myself doing on a fresh OS X install is gutting the Dock. There is just something about having all of those giant, default App Icons glaring at me, filling the entirety of the bottom of my screen. </p>\n\n<p>Drag. Drop. Poof. Until we are down to basically nothing</p>\n\n<p>Also</p>\n\n<ul>\n<li>Add \"Applications\" directory to dock</li>\n<li>Change all directories in dock to display as folder and view content as list</li>\n<li>Reduce dock size</li>\n<li>Enable magnification</li>\n<li>Remember <code>⌘ + ⌥ + d</code> to hide/show the dock</li>\n<li>Add Dock spacers</li>\n</ul>\n\n<p>To add the spacers to your OS X dock ...</p>\n\n<pre><code class=\"language-bash\"># Do this twice\ndefaults write com.apple.dock persistent-apps -array-add '{\"tile-type\"=\"spacer-tile\";}'  \n# and then..\nkillall Dock  \n</code></pre>\n\n<p>... we will revisit this a bit later. Until then you will be left wondering \"why do I have this odd gaping hole in my Dock?\"...</p>\n\n<p>Here is a bit of a preview:</p>\n\n<p><img src=\"/content/images/2014/Aug/Screenshot_8_19_14__6_51_AM.png\" alt=\"\" /></p>\n\n<h5 id=\"security\">Security</h5>\n\n<p>Just be smart.</p>\n\n<p>Enable require password on sleep, screensaver, etc...</p>\n\n<p>Remember Alfred can easily \"lock\" your screen by simply typing <code>lock</code> ... more on Alfred in a bit ;)</p>\n\n<h2 id=\"installgoodiesgeneral\">Install Goodies - General</h2>\n\n<h4 id=\"chromehttpswwwgooglecomintlenchromebrowser\"><a href=\"https://www.google.com/intl/en/chrome/browser/\">Chrome</a></h4>\n\n<p>If you are not currently using Chrome as your primary web browser... actually, we won't even go there ;) </p>\n\n<p>I will say that as a developer I highly recommend it and no matter how many times I try, I simply can not get myself to use Firefox for development. It just does not work for me :)</p>\n\n<p>... and yes... as a web developer you probably \"should\" install all of those other web browsers. You know for that \"browser compatibility\" thing I keep hearing about...</p>\n\n<ul>\n<li>Chrome Extensions\n<ul><li>...</li>\n<li>...</li></ul></li>\n</ul>\n\n<h5 id=\"alfredspacedoanythinghttpwwwalfredappcom\"><a href=\"http://www.alfredapp.com/\">Alfred - <code>⌥ + Space</code> -> Do Anything</a></h5>\n\n<p><img src=\"/content/images/2014/Aug/Alfred_App___Productivity_App_for_Mac_OS_X.png\" alt=\"\" /></p>\n\n<p>Alfred is one of those apps that I wish I had discovered years ago. Ever since converting over to Mac OS X years ago as I began my journey into web development, I have grown to love the <code>⌘ + Space</code> -> \"search for and launch anything\" that Mac OS X's Spotlight provides. </p>\n\n<p>Think of Alfred of being just like this... but on steroids. I have yet to unlock the power pack, but the free version has kept me plenty happy... I do know some developers who have gone with the upgrade and swear by it. ... one of these days :)</p>\n\n<h5 id=\"skitchquickscreenshotsmarkupshareetchttpevernotecomskitch\"><a href=\"http://evernote.com/skitch/\">Skitch - Quick Screenshots (markup, share, etc...)</a></h5>\n\n<p><img src=\"/content/images/2014/Aug/Skitch___Evernote.png\" alt=\"\" /></p>\n\n<ul>\n<li><code>⌘ + ⇧ + 5</code> - Selection</li>\n<li><code>⌘ + ⇧ + ⌥ + 5</code> - Timed Selection</li>\n<li><code>⌘ + ⇧ + 6</code> - Full Screen</li>\n</ul>\n\n<p>WIP ...</p>\n\n<h5 id=\"moumarkdowneditorhttpmouappcom\"><a href=\"http://mouapp.com/\">Mou - Markdown Editor</a></h5>\n\n<p><img src=\"/content/images/2014/Aug/Mou___Markdown_editor_for_web_developers__on_Mac_OS_X.png\" alt=\"\" /></p>\n\n<p>WIP ...</p>\n\n<h5 id=\"andaslewofothers\">And a slew of others...</h5>\n\n<ul>\n<li><a href=\"http://www.skype.com/en/\">Skype</a></li>\n<li><a href=\"https://www.spotify.com/us/download/mac/\">Spotify</a> ... or whatever music player you prefer. Just make sure you have something ;)</li>\n<li>Dropbox</li>\n<li>Google Drive    </li>\n<li>...</li>\n</ul>\n\n<h2 id=\"anevolvingprocess\">An Evolving Process</h2>\n\n<p>I always love hearing about and learning from others' setups and/or workflows. Feel like I missed something crucial? Have a step or two to add? Let me know in the comments below or find me at <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a> and I will consider adding it here.</p>\n\n<p>Hopefully this first step was a bit helpful... the next step/entry we will be diving into setting up the actual development essentials:</p>\n\n<ul>\n<li>IDE's (Sublime Text 3 and PHPStorm)</li>\n<li>Terminal (Iterm2 + Oh My Zsh + rupa/z)</li>\n<li>Installing node.js, Composer, etc...</li>\n<li>and of course... whatever else finds its way into my ramblings ;)</li>\n</ul>\n\n<p><em>Random Side Note:</em></p>\n\n<p><em>For those of you (and myself) wanting to use Mac OS X Keyboard characters... Copy/Paste at will!</em></p>\n\n<h1 id=\"\">⌘ ⌥ ^ ⏎ ⇧</h1>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-08-19 12:18:19",
            "created_by": 1,
            "updated_at": "2014-08-19 15:34:57",
            "updated_by": 1,
            "published_at": "2014-08-19 13:10:57",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 23,
            "uuid": "91ee1a7a-f684-47ee-96fb-54846d082100",
            "title": "Setting Up Mac OS X Mavericks for Web Development: Development Essentials",
            "slug": "setting-up-mac-os-x-web-development-machine-the-essentials",
            "markdown": "##### [Iterm2 - Replacement/Improvement for Mac OS X Terminal](http://iterm2.com/)\n\n* Global Keyboard Shortcut\n\t* Right click in dock. `Options > Assign to All Desktops`\n\t* Set global keyboard shortcut in Iterm2 settings (I use \" ^ + ` \" CNTRL + Backtick )\n* Font -> Ubuntu Mono -> 18 pt -> Increase both horizontal and vertical spacing\n\t* ... yeah. Just wait till we talk about my IDE font size/spacing ;)\n\n**A bit of Terminal Config...**\n\n* Set global keyboard shortcut (I prefer \"CNTRL + `\")\n* Assign to All Desktops\n* 18 pt. [Ubuntu Font](http://font.ubuntu.com/) w/ extra horizontal/vertical spacing\n* Opacity/Blur for background\n\n![](/content/images/2014/Aug/Preferences_and_1__bash_and_Ghost_Admin_and_Setting_Up_Mac_OS_X_Mavericks_for_Web_Development__Getting_Started.png)\n\nThis global shortcut + all desktops settings has been a huge timesaver/productivity boost for me.\n\n**Oh My ZSH**\n\nSomething I do on all machines related to development. Makes my life a lot easier. Simply head on over to https://github.com/robbyrussell/oh-my-zsh and follow the instructions. Actually... here they are. So simple ;)\n\nOne liner:\n\n`curl -L http://install.ohmyz.sh | sh`\n\n#### Ooop! We forgot the command line developer tools\n\n![](/content/images/2014/Aug/1__bash_and_robbyrussell_oh_my_zsh_B7_GitHub.png)\n\nYep... as soon as you try to pull any type of command line wizardy you are sure to get the popup warning \"Command Line Tools Required\" ... \n\nClick install. Wait. Proceed with your life.\n\nThis installs\n\n* git\n* ... WIP\n\n\nAnd..... here we are\n\n![](/content/images/2014/Aug/1__erikaybar_Battle_Station_____zsh_.png)\n\n### IDE(s)\n\n#### Sublime Text 3\n\n**Customizing Sublime Text's look and feel**\n\nhttps://github.com/erikthedeveloper/my-developer-goodies-stash\n\n![](/content/images/2014/Aug/Fullscreen_8_26_14__8_25_AM.png)\n\nWIP ...\n\n#### PHPStorm (EAP 8)\n\nDownload the PHPStorm EAP 8 here: http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program\n\n**Gutting PHPStorm, hiding 90% of the features, and making it look and feel better**\n\nhttps://laracasts.com/series/how-to-be-awesome-in-phpstorm\n\n![](/content/images/2014/Aug/Fullscreen_8_26_14__8_27_AM.png)\n\nWIP ...\n\n#### node.js\n\n**Installing node.js with nvm from start to finish in 3 steps**\n\n```language-bash\n# 1.) Install instructions per the nvm github install instructions... One liner!\n➜  ~  curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3442  100  3442    0     0   3238      0  0:00:01  0:00:01 --:--:--  3241\n=> Downloading nvm from git to '/Users/erikaybar/.nvm'\n=> Cloning into '/Users/erikaybar/.nvm'...\n# ...\n=> Appending source string to /Users/erikaybar/.zshrc\n# 2.) Now reload your .zshrc or .bashrc ... or just quit terminal and reload\n➜  ~  . ~/.zshrc\n➜  ~  which node\nnode not found\n# 3.) Install your desired version of node.js\n➜  ~  nvm install 0.10\n######################################################################## 100.0%\nNow using node v0.10.30\n➜  ~  which node\n/Users/erikaybar/.nvm/v0.10.30/bin/node\n```\n\n```language-bash\nnvm alias default 0.10\n```\n\n* [nvm GitHub](https://github.com/creationix/nvm)\n* https://www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps\n* http://nodejs.org/\n\n#### [Vagrant](http://www.vagrantup.com/downloads.html), [Virtual Box](https://www.virtualbox.org/wiki/Downloads), and [Homestead](http://laravel.com/docs/homestead) - Escaping MAMP ;)\n\n* https://www.virtualbox.org/wiki/Downloads\n\n\n\n* http://www.vagrantup.com/downloads.html\n\t* [Browse Available Vagrant Boxes](https://vagrantcloud.com/search?order=desc&page=1&q=ubuntu&sort=favorites&utf8=%E2%9C%93)\n    \n![](/content/images/2014/Aug/Vagrant.png)\n\n* [laravel/homestead](http://laravel.com/docs/homestead#installation-and-setup) (your new favorite Vagrant box)\n\n> Laravel Homestead is an official, pre-packaged Vagrant \"box\" that provides you a wonderful development environment without requiring you to install PHP, a web server, and any other server software on your local machine. \n\n>No more worrying about messing up your operating system! Vagrant boxes are completely disposable. If something goes wrong, you can destroy and re-create the box in minutes!\n\nHomestead runs on any Windows, Mac, and Linux, and includes the Nginx web server, PHP 5.5, MySQL, Postgres, Redis, Memcached and all of the other goodies you need to develop amazing Laravel applications.\n\n\nVirtual Box and Vagrant are simple Mac OS X installs...\n\nTo install the homestead Vagrant box: `vagrant box add laravel/homestead` (this will take a bit to download...) All the Homestead box is is a pre configured fully ready to go development box that is geared towards PHP development. It includes a handful of super useful things such as:\n\n* Ubuntu 14.04\n* PHP 5.5\n* Nginx\n* MySQL\n* Postgres\n* Node (With Bower, Grunt, and Gulp)\n* Redis\n* Memcached\n* Beanstalkd\n* Laravel Envoy\n* Fabric + HipChat Extension\n\n* [Vaprobash makes setting up new Vagrant boxes easy](http://fideloper.github.io/Vaprobash/)\n\n#### [Composer](https://getcomposer.org/doc/00-intro.md#globally)\n\n\n\nhttps://getcomposer.org/doc/00-intro.md#globally\n\n```language-bash\ncurl -sS https://getcomposer.org/installer | php\n# For global installation\nmv composer.phar /usr/local/bin/composer\n```\n\n\t\n\n#### So many other things...\n\nUntil I feel ready to take this on... a bullet list will have to suffice. Running out of steam here ;)\n\n* ...\n* ...\n* ...\n\n**Back to the terminal...**\n\n`subl` [Set up Sublime Text 3 for command line usage](https://www.sublimetext.com/docs/3/osx_command_line.html) \n\n`brew` [Homebrew - Brew.sh](http://brew.sh/)\n\n```language-bash\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n`tree`\n\n## Setup for Development\n\n**The `Projects` Directory**\n\n`mkdir ~/Projects`\n\nNow keep your #$%@ organized ;)\n\n* ...\n* ...\n* ...\n\n\n## ... WIP ...\n\n\nI always love hearing/learning from others' setups and/or workflows. Let me know in the comments below or find me at [@erikthedev\\_](https://twitter.com/erikthedev_)\n\n\n--- \n\nFor those of you (and myself) wanting to use Mac OS X Keyboard characters...\n\n# ⌘ ⌥ ^ ⏎ ⇧",
            "html": "<h5 id=\"iterm2replacementimprovementformacosxterminalhttpiterm2com\"><a href=\"http://iterm2.com/\">Iterm2 - Replacement/Improvement for Mac OS X Terminal</a></h5>\n\n<ul>\n<li>Global Keyboard Shortcut\n<ul><li>Right click in dock. <code>Options &gt; Assign to All Desktops</code></li>\n<li>Set global keyboard shortcut in Iterm2 settings (I use \" ^ + ` \" CNTRL + Backtick )</li></ul></li>\n<li>Font -> Ubuntu Mono -> 18 pt -> Increase both horizontal and vertical spacing\n<ul><li>... yeah. Just wait till we talk about my IDE font size/spacing ;)</li></ul></li>\n</ul>\n\n<p><strong>A bit of Terminal Config...</strong></p>\n\n<ul>\n<li>Set global keyboard shortcut (I prefer \"CNTRL + `\")</li>\n<li>Assign to All Desktops</li>\n<li>18 pt. <a href=\"http://font.ubuntu.com/\">Ubuntu Font</a> w/ extra horizontal/vertical spacing</li>\n<li>Opacity/Blur for background</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/Preferences_and_1__bash_and_Ghost_Admin_and_Setting_Up_Mac_OS_X_Mavericks_for_Web_Development__Getting_Started.png\" alt=\"\" /></p>\n\n<p>This global shortcut + all desktops settings has been a huge timesaver/productivity boost for me.</p>\n\n<p><strong>Oh My ZSH</strong></p>\n\n<p>Something I do on all machines related to development. Makes my life a lot easier. Simply head on over to <a href=\"https://github.com/robbyrussell/oh-my-zsh\">https://github.com/robbyrussell/oh-my-zsh</a> and follow the instructions. Actually... here they are. So simple ;)</p>\n\n<p>One liner:</p>\n\n<p><code>curl -L http://install.ohmyz.sh | sh</code></p>\n\n<h4 id=\"ooopweforgotthecommandlinedevelopertools\">Ooop! We forgot the command line developer tools</h4>\n\n<p><img src=\"/content/images/2014/Aug/1__bash_and_robbyrussell_oh_my_zsh_B7_GitHub.png\" alt=\"\" /></p>\n\n<p>Yep... as soon as you try to pull any type of command line wizardy you are sure to get the popup warning \"Command Line Tools Required\" ... </p>\n\n<p>Click install. Wait. Proceed with your life.</p>\n\n<p>This installs</p>\n\n<ul>\n<li>git</li>\n<li>... WIP</li>\n</ul>\n\n<p>And..... here we are</p>\n\n<p><img src=\"/content/images/2014/Aug/1__erikaybar_Battle_Station&#95;&#95;&#95;&#95;&#95;zsh_.png\" alt=\"\" /></p>\n\n<h3 id=\"ides\">IDE(s)</h3>\n\n<h4 id=\"sublimetext3\">Sublime Text 3</h4>\n\n<p><strong>Customizing Sublime Text's look and feel</strong></p>\n\n<p><a href=\"https://github.com/erikthedeveloper/my-developer-goodies-stash\">https://github.com/erikthedeveloper/my-developer-goodies-stash</a></p>\n\n<p><img src=\"/content/images/2014/Aug/Fullscreen_8_26_14__8_25_AM.png\" alt=\"\" /></p>\n\n<p>WIP ...</p>\n\n<h4 id=\"phpstormeap8\">PHPStorm (EAP 8)</h4>\n\n<p>Download the PHPStorm EAP 8 here: <a href=\"http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program\">http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program</a></p>\n\n<p><strong>Gutting PHPStorm, hiding 90% of the features, and making it look and feel better</strong></p>\n\n<p><a href=\"https://laracasts.com/series/how-to-be-awesome-in-phpstorm\">https://laracasts.com/series/how-to-be-awesome-in-phpstorm</a></p>\n\n<p><img src=\"/content/images/2014/Aug/Fullscreen_8_26_14__8_27_AM.png\" alt=\"\" /></p>\n\n<p>WIP ...</p>\n\n<h4 id=\"nodejs\">node.js</h4>\n\n<p><strong>Installing node.js with nvm from start to finish in 3 steps</strong></p>\n\n<pre><code class=\"language-bash\"># 1.) Install instructions per the nvm github install instructions... One liner!\n➜  ~  curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3442  100  3442    0     0   3238      0  0:00:01  0:00:01 --:--:--  3241  \n=&gt; Downloading nvm from git to '/Users/erikaybar/.nvm'\n=&gt; Cloning into '/Users/erikaybar/.nvm'...\n# ...\n=&gt; Appending source string to /Users/erikaybar/.zshrc\n# 2.) Now reload your .zshrc or .bashrc ... or just quit terminal and reload\n➜  ~  . ~/.zshrc\n➜  ~  which node\nnode not found  \n# 3.) Install your desired version of node.js\n➜  ~  nvm install 0.10\n######################################################################## 100.0%\nNow using node v0.10.30  \n➜  ~  which node\n/Users/erikaybar/.nvm/v0.10.30/bin/node\n</code></pre>\n\n<pre><code class=\"language-bash\">nvm alias default 0.10  \n</code></pre>\n\n<ul>\n<li><a href=\"https://github.com/creationix/nvm\">nvm GitHub</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps\">https://www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps</a></li>\n<li><a href=\"http://nodejs.org/\">http://nodejs.org/</a></li>\n</ul>\n\n<h4 id=\"vagranthttpwwwvagrantupcomdownloadshtmlvirtualboxhttpswwwvirtualboxorgwikidownloadsandhomesteadhttplaravelcomdocshomesteadescapingmamp\"><a href=\"http://www.vagrantup.com/downloads.html\">Vagrant</a>, <a href=\"https://www.virtualbox.org/wiki/Downloads\">Virtual Box</a>, and <a href=\"http://laravel.com/docs/homestead\">Homestead</a> - Escaping MAMP ;)</h4>\n\n<ul>\n<li><p><a href=\"https://www.virtualbox.org/wiki/Downloads\">https://www.virtualbox.org/wiki/Downloads</a></p></li>\n<li><p><a href=\"http://www.vagrantup.com/downloads.html\">http://www.vagrantup.com/downloads.html</a></p>\n\n<ul><li><a href=\"https://vagrantcloud.com/search?order=desc&amp;page=1&amp;q=ubuntu&amp;sort=favorites&amp;utf8=%E2%9C%93\">Browse Available Vagrant Boxes</a></li></ul></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Aug/Vagrant.png\" alt=\"\" /></p>\n\n<ul>\n<li><a href=\"http://laravel.com/docs/homestead#installation-and-setup\">laravel/homestead</a> (your new favorite Vagrant box)</li>\n</ul>\n\n<blockquote>\n  <p>Laravel Homestead is an official, pre-packaged Vagrant \"box\" that provides you a wonderful development environment without requiring you to install PHP, a web server, and any other server software on your local machine. </p>\n  \n  <p>No more worrying about messing up your operating system! Vagrant boxes are completely disposable. If something goes wrong, you can destroy and re-create the box in minutes!</p>\n</blockquote>\n\n<p>Homestead runs on any Windows, Mac, and Linux, and includes the Nginx web server, PHP 5.5, MySQL, Postgres, Redis, Memcached and all of the other goodies you need to develop amazing Laravel applications.</p>\n\n<p>Virtual Box and Vagrant are simple Mac OS X installs...</p>\n\n<p>To install the homestead Vagrant box: <code>vagrant box add laravel/homestead</code> (this will take a bit to download...) All the Homestead box is is a pre configured fully ready to go development box that is geared towards PHP development. It includes a handful of super useful things such as:</p>\n\n<ul>\n<li>Ubuntu 14.04</li>\n<li>PHP 5.5</li>\n<li>Nginx</li>\n<li>MySQL</li>\n<li>Postgres</li>\n<li>Node (With Bower, Grunt, and Gulp)</li>\n<li>Redis</li>\n<li>Memcached</li>\n<li>Beanstalkd</li>\n<li>Laravel Envoy</li>\n<li><p>Fabric + HipChat Extension</p></li>\n<li><p><a href=\"http://fideloper.github.io/Vaprobash/\">Vaprobash makes setting up new Vagrant boxes easy</a></p></li>\n</ul>\n\n<h4 id=\"composerhttpsgetcomposerorgdoc00intromdglobally\"><a href=\"https://getcomposer.org/doc/00-intro.md#globally\">Composer</a></h4>\n\n<p><a href=\"https://getcomposer.org/doc/00-intro.md#globally\">https://getcomposer.org/doc/00-intro.md#globally</a></p>\n\n<pre><code class=\"language-bash\">curl -sS https://getcomposer.org/installer | php  \n# For global installation\nmv composer.phar /usr/local/bin/composer  \n</code></pre>\n\n<h4 id=\"somanyotherthings\">So many other things...</h4>\n\n<p>Until I feel ready to take this on... a bullet list will have to suffice. Running out of steam here ;)</p>\n\n<ul>\n<li>...</li>\n<li>...</li>\n<li>...</li>\n</ul>\n\n<p><strong>Back to the terminal...</strong></p>\n\n<p><code>subl</code> <a href=\"https://www.sublimetext.com/docs/3/osx_command_line.html\">Set up Sublime Text 3 for command line usage</a> </p>\n\n<p><code>brew</code> <a href=\"http://brew.sh/\">Homebrew - Brew.sh</a></p>\n\n<pre><code class=\"language-bash\">ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"  \n</code></pre>\n\n<p><code>tree</code></p>\n\n<h2 id=\"setupfordevelopment\">Setup for Development</h2>\n\n<p><strong>The <code>Projects</code> Directory</strong></p>\n\n<p><code>mkdir ~/Projects</code></p>\n\n<p>Now keep your #$%@ organized ;)</p>\n\n<ul>\n<li>...</li>\n<li>...</li>\n<li>...</li>\n</ul>\n\n<h2 id=\"wip\">... WIP ...</h2>\n\n<p>I always love hearing/learning from others' setups and/or workflows. Let me know in the comments below or find me at <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a></p>\n\n<hr />\n\n<p>For those of you (and myself) wanting to use Mac OS X Keyboard characters...</p>\n\n<h1 id=\"\">⌘ ⌥ ^ ⏎ ⇧</h1>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-08-19 12:37:39",
            "created_by": 1,
            "updated_at": "2014-08-26 14:32:28",
            "updated_by": 1,
            "published_at": "2014-08-26 14:30:41",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 24,
            "uuid": "b04fc0f9-3155-465c-9b62-41748a0165bd",
            "title": "A Bit of Fun with Sorting Algorithms",
            "slug": "a-quick-thought-on-algorithms",
            "markdown": "I recently began my **CS2420 Algorithms and Data Structures** course as part of [Dixie State University's CIT program](http://cit.dixie.edu/). It is great to finally be back into some full time CS courses in favor of all the general courses I've been in and out of over the past several semesters.\n\nCoincidentally, I also came across this [**Algorithms, Part I** course hosted on Coursera](https://www.coursera.org/course/algs4partI) and taught by some folks over at [Princeton's Computer Science Department](http://www.cs.princeton.edu/). It is free, made up of relatively short, consice videos, programming interview questions, and programming challenges. I would highly recommend it to anyone interested in learning more about computer science and/or algorithms.\n\n![](/content/images/2014/Sep/Algorithms__Part_I___Coursera.png)\n\n### Lesson One: Not all Algorithms are Equal\n\nThis is a fairly trivial example showing the performance difference between several sorting Algorithms implemented in Python.\n\n**with 1,000 items...**\n\n```language-bash\n- - - - - - - - - - The BubbleSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.546469 seconds\nComparisons: 942,057\nSwaps: 243,872\n- - - - - - - - - - The ShakerSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.350792 seconds\nComparisons: 496,503\nSwaps: 243,872\n- - - - - - - - - - The SelectionSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.200294 seconds\nComparisons: 500,500\nSwaps: 1,000\n- - - - - - - - - - The MergeSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.011106 seconds\nComparisons: 8,702\nSwaps: 9,976\n- - - - - - - - - - The QuickSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.008213 seconds\nComparisons: 10,880\nSwaps: 5,919\n- - - - - - - - - - The PythonBuiltInSorter\nSort Success: True\nList Size: 1,000\nTime elapsed 0.000211 seconds\nNo compare/swap data available\n```\n\n**and with 10,000 items...**\n\n```language-bash\n- - - - - - - - - - The BubbleSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 56.599476 seconds\nComparisons: 98,950,104\nSwaps: 25,014,554\n- - - - - - - - - - The ShakerSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 35.286887 seconds\nComparisons: 49,605,039\nSwaps: 25,014,554\n- - - - - - - - - - The SelectionSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 19.127439 seconds\nComparisons: 50,005,000\nSwaps: 10,000\n- - - - - - - - - - The MergeSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 0.147227 seconds\nComparisons: 120,503\nSwaps: 133,616\n- - - - - - - - - - The QuickSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 0.115026 seconds\nComparisons: 154,918\nSwaps: 81,995\n- - - - - - - - - - The PythonBuiltInSorter\nSort Success: True\nList Size: 10,000\nTime elapsed 0.002861 seconds\nNo compare/swap data available\n```\n\nAs you can see with a list of 1,000 any of the algorithms will perform in a reasonable amount of time. However, increasing the list size to only 10,000 starts to really show the implications of a poorly performing algorithm.\n\nFor example the Bubble Sort, which took only ~0.5 seconds to sort 1,000 items took nearly a full minute to sort 10,000 items. Why, if the list size increased by 10 times, didn't the time to sort increase by only 10 times?\n\nNow imagine a list of size 1,000,000 ... 1,000,000,000 ... well, you get the picture :)\n\n**...and as a bonus... with 10,000,000 items** (the bonus being, my Macbook Pro didn't melt in the process... although it sounded a bit like it might...)\n\nOf course I had to leave the lesser performing Algorithms out of this example such as Bubble Sort, Shaker Sort, and Selection Sort since I do not have a spare 30 years or so to stick around and find out the results ;)\n\n```language-bash\n- - - - - - - - - - The MergeSorter\nSort Success: True\nList Size: 10,000,000\nTime elapsed 259.799965 seconds\nComparisons: 220,101,038\nSwaps: 233,222,784\n- - - - - - - - - - The QuickSorter\nSort Success: True\nList Size: 10,000,000\nTime elapsed 224.414171 seconds\nComparisons: 291,762,297\nSwaps: 155,910,402\n- - - - - - - - - - The PythonSorter\nSort Success: True\nList Size: 10,000,000\nTime elapsed 8.752154 seconds\nNo compare/swap data available\n```\n\n*Makes you wonder what the #$%@ Python's sort is doing under the hood ... I guess a few weeks with sorting Algorithm's doesn't quite put me on par with [Guido van Rossum](https://www.python.org/~guido/)*\n\nThat is why we have computer science of course! To sort large lists of integers ;)\n\nThat is all for now. My morning rant with coffee.",
            "html": "<p>I recently began my <strong>CS2420 Algorithms and Data Structures</strong> course as part of <a href=\"http://cit.dixie.edu/\">Dixie State University's CIT program</a>. It is great to finally be back into some full time CS courses in favor of all the general courses I've been in and out of over the past several semesters.</p>\n\n<p>Coincidentally, I also came across this <a href=\"https://www.coursera.org/course/algs4partI\"><strong>Algorithms, Part I</strong> course hosted on Coursera</a> and taught by some folks over at <a href=\"http://www.cs.princeton.edu/\">Princeton's Computer Science Department</a>. It is free, made up of relatively short, consice videos, programming interview questions, and programming challenges. I would highly recommend it to anyone interested in learning more about computer science and/or algorithms.</p>\n\n<p><img src=\"/content/images/2014/Sep/Algorithms__Part_I___Coursera.png\" alt=\"\" /></p>\n\n<h3 id=\"lessononenotallalgorithmsareequal\">Lesson One: Not all Algorithms are Equal</h3>\n\n<p>This is a fairly trivial example showing the performance difference between several sorting Algorithms implemented in Python.</p>\n\n<p><strong>with 1,000 items...</strong></p>\n\n<pre><code class=\"language-bash\">- - - - - - - - - - The BubbleSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.546469 seconds  \nComparisons: 942,057  \nSwaps: 243,872  \n- - - - - - - - - - The ShakerSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.350792 seconds  \nComparisons: 496,503  \nSwaps: 243,872  \n- - - - - - - - - - The SelectionSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.200294 seconds  \nComparisons: 500,500  \nSwaps: 1,000  \n- - - - - - - - - - The MergeSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.011106 seconds  \nComparisons: 8,702  \nSwaps: 9,976  \n- - - - - - - - - - The QuickSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.008213 seconds  \nComparisons: 10,880  \nSwaps: 5,919  \n- - - - - - - - - - The PythonBuiltInSorter\nSort Success: True  \nList Size: 1,000  \nTime elapsed 0.000211 seconds  \nNo compare/swap data available  \n</code></pre>\n\n<p><strong>and with 10,000 items...</strong></p>\n\n<pre><code class=\"language-bash\">- - - - - - - - - - The BubbleSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 56.599476 seconds  \nComparisons: 98,950,104  \nSwaps: 25,014,554  \n- - - - - - - - - - The ShakerSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 35.286887 seconds  \nComparisons: 49,605,039  \nSwaps: 25,014,554  \n- - - - - - - - - - The SelectionSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 19.127439 seconds  \nComparisons: 50,005,000  \nSwaps: 10,000  \n- - - - - - - - - - The MergeSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 0.147227 seconds  \nComparisons: 120,503  \nSwaps: 133,616  \n- - - - - - - - - - The QuickSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 0.115026 seconds  \nComparisons: 154,918  \nSwaps: 81,995  \n- - - - - - - - - - The PythonBuiltInSorter\nSort Success: True  \nList Size: 10,000  \nTime elapsed 0.002861 seconds  \nNo compare/swap data available  \n</code></pre>\n\n<p>As you can see with a list of 1,000 any of the algorithms will perform in a reasonable amount of time. However, increasing the list size to only 10,000 starts to really show the implications of a poorly performing algorithm.</p>\n\n<p>For example the Bubble Sort, which took only ~0.5 seconds to sort 1,000 items took nearly a full minute to sort 10,000 items. Why, if the list size increased by 10 times, didn't the time to sort increase by only 10 times?</p>\n\n<p>Now imagine a list of size 1,000,000 ... 1,000,000,000 ... well, you get the picture :)</p>\n\n<p><strong>...and as a bonus... with 10,000,000 items</strong> (the bonus being, my Macbook Pro didn't melt in the process... although it sounded a bit like it might...)</p>\n\n<p>Of course I had to leave the lesser performing Algorithms out of this example such as Bubble Sort, Shaker Sort, and Selection Sort since I do not have a spare 30 years or so to stick around and find out the results ;)</p>\n\n<pre><code class=\"language-bash\">- - - - - - - - - - The MergeSorter\nSort Success: True  \nList Size: 10,000,000  \nTime elapsed 259.799965 seconds  \nComparisons: 220,101,038  \nSwaps: 233,222,784  \n- - - - - - - - - - The QuickSorter\nSort Success: True  \nList Size: 10,000,000  \nTime elapsed 224.414171 seconds  \nComparisons: 291,762,297  \nSwaps: 155,910,402  \n- - - - - - - - - - The PythonSorter\nSort Success: True  \nList Size: 10,000,000  \nTime elapsed 8.752154 seconds  \nNo compare/swap data available  \n</code></pre>\n\n<p><em>Makes you wonder what the #$%@ Python's sort is doing under the hood ... I guess a few weeks with sorting Algorithm's doesn't quite put me on par with <a href=\"https://www.python.org/~guido/\">Guido van Rossum</a></em></p>\n\n<p>That is why we have computer science of course! To sort large lists of integers ;)</p>\n\n<p>That is all for now. My morning rant with coffee.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-09-03 18:27:01",
            "created_by": 1,
            "updated_at": "2014-09-09 13:46:35",
            "updated_by": 1,
            "published_at": "2014-09-09 13:16:54",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 25,
            "uuid": "0e3f7e6f-017d-4ae0-be70-72414ee9a43c",
            "title": "Quick Tip/Snippet: Change Git user/email per repo",
            "slug": "change-git-user-email-identity-per-repo",
            "markdown": "Recently I've found myself needing to alternate between Git user identities between my personal and work projects.\n\nHere is a quick snippet of how I do so...\n\nMostly for my own reference ;) \n\n## Set personal Git user information\n\n```language-bash\nalias git_user_personal='git config user.email mypersonal@gmail.com'\n# Within repo\n$ git_user_personal\n```\n\n## Set work Git user information\n\n```language-bash\nalias git_user_work='git config user.email myemail@work.com'\n# Within repo\n$ git_user_work\n```\n\nThat is all :)",
            "html": "<p>Recently I've found myself needing to alternate between Git user identities between my personal and work projects.</p>\n\n<p>Here is a quick snippet of how I do so...</p>\n\n<p>Mostly for my own reference ;) </p>\n\n<h2 id=\"setpersonalgituserinformation\">Set personal Git user information</h2>\n\n<pre><code class=\"language-bash\">alias git_user_personal='git config user.email mypersonal@gmail.com'  \n# Within repo\n$ git_user_personal\n</code></pre>\n\n<h2 id=\"setworkgituserinformation\">Set work Git user information</h2>\n\n<pre><code class=\"language-bash\">alias git_user_work='git config user.email myemail@work.com'  \n# Within repo\n$ git_user_work\n</code></pre>\n\n<p>That is all :)</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-09-07 03:25:55",
            "created_by": 1,
            "updated_at": "2014-09-07 03:44:53",
            "updated_by": 1,
            "published_at": "2014-09-07 03:44:05",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 31,
            "uuid": "14ff7dd2-f6e8-4df8-b7b5-ad64fc90556c",
            "title": "Implementing TDD and PHPSpec into an Existing Codebase - Also, My First Shot at a Screencast...",
            "slug": "implementing-phpspec-and-tdd-into-an-existing-codebase",
            "markdown": "**Disclaimer: This is my first attempt at a screencast.**\n\nThis is party me getting to know [ScreenFlow](http://www.telestream.net/screenflow/overview.htm), party me getting to know [PHPSpec](http://phpspec.net/) and having a bit of fun with [PHPStorm](http://www.jetbrains.com/phpstorm/), and partly me getting past the fear of actually putting out a screencast ;)\n\n<iframe src=\"//player.vimeo.com/video/108170482\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/108170482\">Getting Started with PHPSpec and TDD in an Existing PHP Codebase</a> from <a href=\"http://vimeo.com/user25010079\">Erik Aybar</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n\nAnd of course the GitHub repo: https://github.com/erikthedeveloper/a-bit-of-fun-with-vanilla-php\n\n\n\n## The Gist of It\n\n**See the [Pull Request Containing The Up to Date Feature/Etc... Here (#1)](https://github.com/erikthedeveloper/a-bit-of-fun-with-vanilla-php/pull/1)**\n\n- Bring composer into our existing PHP codebase\n- Install PHPSpec using Composer\n- Configure PHPSpec to work with my existing directory structure `phpspec.yml`\n- Writing our first, basic test to verify the existing behavior of the validation feature\n- Introduce new featured and desired behavior/usage\n- Write a test that uses new feature (test first)\n- Update the validation class/methods to satisfy the test.\n  - *May include high levels of rambling and/or figuring things out as I go ;)*\n- Some minor refactoring\n- Test~~s all~~ green!\n\n### A Glimpse of the End Result (updated from video)\n\n![](/content/images/2014/Oct/1__erikaybar_Battle_Station____Erik_School_CS4000_my_public_html__zsh__and_ValidatorSpec_php___my_public_html______Erik_School_CS4000_my_public_html_.png)\n\n### And for some code to sum it all up :)\n\n```language-php\n\n<?php\n// Old/Current behavior vs. New/Desired behavior\n\n/**\n * This is the old way. Using an ugly regexes. Bad developer!\n */\n$rules = [\n    'email'    => \"/\\w+/\",\n    'password' => \"/\\w+/\"\n];\n\n/**\n * This is what we want. An array of readable/sensible validation rules. Better developer!\n */\n$rules = [\n    'email'    => ['email'],\n    'password' => ['password', 'confirmed']\n];\n\n/**\n * - - - - - - - - - - - - - - - - - - - -\n * Everything Below Here Remains the Same\n * - - - - - - - - - - - - - - - - - - - -\n */\n$data = [\n    'email'            => '',\n    'password'         => 'foobar',\n    'password_confirm' => 'not_foobar'\n]\n$this->validate($rules, $data)\n```\n\nThe Tests look a bit like this (actually.. this is the test suite in its entirety ;))\n\n```language-php\n<?php\n\n// ValidatorSpec.php\n\n<?php\n\nnamespace spec\\MyClasses\\Validation;\n\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\n\n/**\n * Class ValidatorSpec\n * @package spec\\MyClasses\\Validation\n * @author  Erik Aybar\n * @mixin \\MyClasses\\Validation\\Validator // Nifty little trick for subject autocompletion :)\n */\nclass ValidatorSpec extends ObjectBehavior\n{\n\n    /**\n     * Used to verify old/existing behavior/usage\n     * @deprecated skipping test by prepending method name with \"old_\"\n     */\n    function old_it_validates_using_the_old_ugly_method()\n    {\n        $this->validate(\n            [\n                'email'    => \"/\\w+/\",\n                'password' => \"/\\w+/\"\n            ],\n            [\n                'email'    => '',\n                'password' => 'foobar'\n            ]\n        )->shouldHaveErrors();\n    }\n\n    function it_validates_each_field_with_a_given_array_of_callables()\n    {\n        $this->validate(\n            [\n                'email'    => ['not_empty'],\n                'password' => ['not_empty']\n            ],\n            [\n                'email'    => '',\n                'password' => 'foobar'\n            ]\n        )->shouldHaveErrors();\n    }\n\n    function it_validates_an_email_address()\n    {\n        $this->validate(\n            ['email' => ['email']],\n            ['email' => 'joe@joe.com']\n        )->shouldHaveValidData();\n    }\n\n    function it_allows_multiple_validation_rules_per_field()\n    {\n        $this->validate(\n            ['email' => ['not_empty', 'email']],\n            ['email' => '']\n        )->shouldHaveErrors();\n        $this->clearValidations();\n        $this->validate(\n            ['email' => ['not_empty', 'email']],\n            ['email' => 'not_an_email here']\n        )->shouldHaveErrors();\n        $this->clearValidations();\n        $this->validate(\n            ['email' => ['not_empty', 'email']],\n            ['email' => 'joe@joe.com']\n        )->shouldHaveValidData();\n    }\n}\n\n```\n\nAnd that about sums it up for now. Again, this screencast was totally a test run and I'm hoping to get some higher quality ones together.... sometime?\n\nLet me know what you think! I'm definitely just scratching the surface on TDD and using testing tools like PHPSpec, Behat, PHPUnit, etc... but it is already having a largely positive impact on the way I think and the quality of the code I write.",
            "html": "<p><strong>Disclaimer: This is my first attempt at a screencast.</strong></p>\n\n<p>This is party me getting to know <a href=\"http://www.telestream.net/screenflow/overview.htm\">ScreenFlow</a>, party me getting to know <a href=\"http://phpspec.net/\">PHPSpec</a> and having a bit of fun with <a href=\"http://www.jetbrains.com/phpstorm/\">PHPStorm</a>, and partly me getting past the fear of actually putting out a screencast ;)</p>\n\n<p><iframe src=\"//player.vimeo.com/video/108170482\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/108170482\">Getting Started with PHPSpec and TDD in an Existing PHP Codebase</a> from <a href=\"http://vimeo.com/user25010079\">Erik Aybar</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p></p>\n\n<p>And of course the GitHub repo: <a href=\"https://github.com/erikthedeveloper/a-bit-of-fun-with-vanilla-php\">https://github.com/erikthedeveloper/a-bit-of-fun-with-vanilla-php</a></p>\n\n<h2 id=\"thegistofit\">The Gist of It</h2>\n\n<p><strong>See the <a href=\"https://github.com/erikthedeveloper/a-bit-of-fun-with-vanilla-php/pull/1\">Pull Request Containing The Up to Date Feature/Etc... Here (#1)</a></strong></p>\n\n<ul>\n<li>Bring composer into our existing PHP codebase</li>\n<li>Install PHPSpec using Composer</li>\n<li>Configure PHPSpec to work with my existing directory structure <code>phpspec.yml</code></li>\n<li>Writing our first, basic test to verify the existing behavior of the validation feature</li>\n<li>Introduce new featured and desired behavior/usage</li>\n<li>Write a test that uses new feature (test first)</li>\n<li>Update the validation class/methods to satisfy the test.\n<ul><li><em>May include high levels of rambling and/or figuring things out as I go ;)</em></li></ul></li>\n<li>Some minor refactoring</li>\n<li>Test<del>s all</del> green!</li>\n</ul>\n\n<h3 id=\"aglimpseoftheendresultupdatedfromvideo\">A Glimpse of the End Result (updated from video)</h3>\n\n<p><img src=\"/content/images/2014/Oct/1__erikaybar_Battle_Station&#95;&#95;&#95;&#95;Erik_School_CS4000_my_public_html__zsh__and_ValidatorSpec_php___my_public_html&#95;&#95;&#95;&#95;&#95;&#95;Erik_School_CS4000_my_public_html_.png\" alt=\"\" /></p>\n\n<h3 id=\"andforsomecodetosumitallup\">And for some code to sum it all up :)</h3>\n\n<pre><code class=\"language-php\">&lt;?php  \n// Old/Current behavior vs. New/Desired behavior\n\n/**\n * This is the old way. Using an ugly regexes. Bad developer!\n */\n$rules = [\n    'email'    =&gt; \"/\\w+/\",\n    'password' =&gt; \"/\\w+/\"\n];\n\n/**\n * This is what we want. An array of readable/sensible validation rules. Better developer!\n */\n$rules = [\n    'email'    =&gt; ['email'],\n    'password' =&gt; ['password', 'confirmed']\n];\n\n/**\n * - - - - - - - - - - - - - - - - - - - -\n * Everything Below Here Remains the Same\n * - - - - - - - - - - - - - - - - - - - -\n */\n$data = [\n    'email'            =&gt; '',\n    'password'         =&gt; 'foobar',\n    'password_confirm' =&gt; 'not_foobar'\n]\n$this-&gt;validate($rules, $data)\n</code></pre>\n\n<p>The Tests look a bit like this (actually.. this is the test suite in its entirety ;))</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n// ValidatorSpec.php\n\n&lt;?php\n\nnamespace spec\\MyClasses\\Validation;\n\nuse PhpSpec\\ObjectBehavior;  \nuse Prophecy\\Argument;\n\n/**\n * Class ValidatorSpec\n * @package spec\\MyClasses\\Validation\n * @author  Erik Aybar\n * @mixin \\MyClasses\\Validation\\Validator // Nifty little trick for subject autocompletion :)\n */\nclass ValidatorSpec extends ObjectBehavior  \n{\n\n    /**\n     * Used to verify old/existing behavior/usage\n     * @deprecated skipping test by prepending method name with \"old_\"\n     */\n    function old_it_validates_using_the_old_ugly_method()\n    {\n        $this-&gt;validate(\n            [\n                'email'    =&gt; \"/\\w+/\",\n                'password' =&gt; \"/\\w+/\"\n            ],\n            [\n                'email'    =&gt; '',\n                'password' =&gt; 'foobar'\n            ]\n        )-&gt;shouldHaveErrors();\n    }\n\n    function it_validates_each_field_with_a_given_array_of_callables()\n    {\n        $this-&gt;validate(\n            [\n                'email'    =&gt; ['not_empty'],\n                'password' =&gt; ['not_empty']\n            ],\n            [\n                'email'    =&gt; '',\n                'password' =&gt; 'foobar'\n            ]\n        )-&gt;shouldHaveErrors();\n    }\n\n    function it_validates_an_email_address()\n    {\n        $this-&gt;validate(\n            ['email' =&gt; ['email']],\n            ['email' =&gt; 'joe@joe.com']\n        )-&gt;shouldHaveValidData();\n    }\n\n    function it_allows_multiple_validation_rules_per_field()\n    {\n        $this-&gt;validate(\n            ['email' =&gt; ['not_empty', 'email']],\n            ['email' =&gt; '']\n        )-&gt;shouldHaveErrors();\n        $this-&gt;clearValidations();\n        $this-&gt;validate(\n            ['email' =&gt; ['not_empty', 'email']],\n            ['email' =&gt; 'not_an_email here']\n        )-&gt;shouldHaveErrors();\n        $this-&gt;clearValidations();\n        $this-&gt;validate(\n            ['email' =&gt; ['not_empty', 'email']],\n            ['email' =&gt; 'joe@joe.com']\n        )-&gt;shouldHaveValidData();\n    }\n}\n</code></pre>\n\n<p>And that about sums it up for now. Again, this screencast was totally a test run and I'm hoping to get some higher quality ones together.... sometime?</p>\n\n<p>Let me know what you think! I'm definitely just scratching the surface on TDD and using testing tools like PHPSpec, Behat, PHPUnit, etc... but it is already having a largely positive impact on the way I think and the quality of the code I write.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-10-07 00:28:35",
            "created_by": 1,
            "updated_at": "2014-10-08 17:46:18",
            "updated_by": 1,
            "published_at": "2014-10-07 00:29:26",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 32,
            "uuid": "d490bb7e-3b13-4a37-b75e-08cad2b82cf6",
            "title": "IDE Bliss and Some Refactoring w/ JetBrain's PHPStorm (screencast)",
            "slug": "jetbrains-phpstorm-and-some-fun-with-refactoring-video",
            "markdown": "### A screencast\n\nTotally not scripted. 100% embarassing. Hey you have to start somewhere though, right?\n\n<iframe src=\"//player.vimeo.com/video/109502006\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/108170482\">PHPStorm Rambling and Refactorage</a> from <a href=\"http://vimeo.com/user25010079\">Erik Aybar</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n\n### Write Up to Follow ... Sometime ;)\n\nSummary: me talking about PHPStorm and refactoring some random code for ~7 minutes :)\n",
            "html": "<h3 id=\"ascreencast\">A screencast</h3>\n\n<p>Totally not scripted. 100% embarassing. Hey you have to start somewhere though, right?</p>\n\n<p><iframe src=\"//player.vimeo.com/video/109502006\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/108170482\">PHPStorm Rambling and Refactorage</a> from <a href=\"http://vimeo.com/user25010079\">Erik Aybar</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p></p>\n\n<h3 id=\"writeuptofollowsometime\">Write Up to Follow ... Sometime ;)</h3>\n\n<p>Summary: me talking about PHPStorm and refactoring some random code for ~7 minutes :)</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-10-20 20:04:19",
            "created_by": 1,
            "updated_at": "2014-12-12 14:30:56",
            "updated_by": 1,
            "published_at": "2014-10-20 13:47:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 33,
            "uuid": "a479293c-d356-407d-99db-0d912944450c",
            "title": "Updating an Outdated GitHub Fork",
            "slug": "git-updating-an-outdated-github-fork",
            "markdown": "Scenario: \n\n- You forked some great repository\n- It has been a while\n- Your repo/fork is severely out of date\n- You want it to be up to date\n\nTo begin, let us ask \n\n> GitHub, why is this feature not baked in?\n\nFor this post we will assume a few things: \n\n- We will refer to the **original source repository as \"source\"**\n- In this context **our fork is \"origin\"**\n- We are working on and submitting a PR **to the branch \"develop\"**\n- You have your ssh key set up to use the `git@github` urls. Otherwise just use the `https://` urls in their place.\n\n## The Short Version\n\n```language-bash\n$ git remote add source git@github.com:owner/some_great_repo.git\n$ git fetch source\n# Hopefully fast forward (via \"--ff-only\")\n# Otherwise rebase/merge/resolve as needed\n$ git checkout develop\n$ git merge source/develop --ff-only\n$ git push\n# voila\n```\n\n## The Very Short (Cheater) Version\n\n- Delete your fork on GitHub.\n- Refork a fresh fork from \"source\".\n- Done.\n\n## The Longer Version...\n\n### Add the \"source\" repository as a remote\n\nThis enables you to pull/fetch from the original source repository on GitHub. This allows you to compare your fork (origin) with the source (source)\n\n```language-bash\n# Display all remotes currently set up (you will likely only have \"origin\")\n$ git remote -v\norigin  git@github.com:myusername/some_great_repo.git (fetch)\norigin  git@github.com:myusername/some_great_repo.git (push)\n# Add a new remote with the name \"source\" located at \"git@github.com:owner/some_great_repo.git\"\n$ git remote add source git@github.com:owner/some_great_repo.git\n# Verify that it worked :)\n$ git remote -v\norigin  git@github.com:myusername/some_great_repo.git (fetch)\norigin  git@github.com:myusername/some_great_repo.git (push)\nsource  git@github.com:owner/some_great_repo.git (fetch)\nsource  git@github.com:owner/some_great_repo.git (push)\n```\n\n### Fetch the newly added remote (\"source\")\n\n```language-bash\n# This will fetch the source repository allowing you to examine/interact with it\n$ git fetch source\nremote: Counting objects: 20, done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 20 (delta 10), reused 1 (delta 0)\nUnpacking objects: 100% (20/20), done.\nFrom github.com:owner/some_great_repo\n * [new branch]      develop     -> source/develop\n```\n\n### You probably want to examine the diff/log...\n\n```language-bash\n$ git log develop...source/develop\n$ git diff develop...source/develop\n# List all branches (including remotes \"-a\")\n$ git branch -a\n* develop\n  remotes/origin/HEAD -> origin/develop\n  remotes/origin/develop\n  remotes/source/develop\n```\n\n### Update your \"local\" branch using the \"source\" branch\n\nAssuming a fast forward is possible, do this. Otherwise you will need to rebase/merge and possibly resolve any conflicts which is a whole topic on its own.\n\n```language-bash\n$ git checkout develop\n$ git merge --ff-only source/develop\nUpdating 22c5306..859b79c\nFast-forward\n README.md | 8 +++++++-\n 1 file changed, 7 insertions(+), 1 deletion(-)\n```\n\n### Push to update your fork\n\n```language-bash\n# Same as: \"git push origin develop\"\n$ git push\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (20/20), done.\nWriting objects: 100% (20/20), 2.39 KiB | 0 bytes/s, done.\nTotal 20 (delta 11), reused 0 (delta 0)\nTo git@github.com:myusername/some_great_repo.git\n   22c5306..859b79c  develop -> develop\n```\n\n### Congratulations. Your fork is now updated.\n\nI would be interested to hear any thoughts or alternative methods from those more experienced. Let me know in the comments below or find me at [@erikthedev_](https://twitter.com/erikthedev_)",
            "html": "<p>Scenario: </p>\n\n<ul>\n<li>You forked some great repository</li>\n<li>It has been a while</li>\n<li>Your repo/fork is severely out of date</li>\n<li>You want it to be up to date</li>\n</ul>\n\n<p>To begin, let us ask </p>\n\n<blockquote>\n  <p>GitHub, why is this feature not baked in?</p>\n</blockquote>\n\n<p>For this post we will assume a few things: </p>\n\n<ul>\n<li>We will refer to the <strong>original source repository as \"source\"</strong></li>\n<li>In this context <strong>our fork is \"origin\"</strong></li>\n<li>We are working on and submitting a PR <strong>to the branch \"develop\"</strong></li>\n<li>You have your ssh key set up to use the <code>git@github</code> urls. Otherwise just use the <code>https://</code> urls in their place.</li>\n</ul>\n\n<h2 id=\"theshortversion\">The Short Version</h2>\n\n<pre><code class=\"language-bash\">$ git remote add source git@github.com:owner/some_great_repo.git\n$ git fetch source\n# Hopefully fast forward (via \"--ff-only\")\n# Otherwise rebase/merge/resolve as needed\n$ git checkout develop\n$ git merge source/develop --ff-only\n$ git push\n# voila\n</code></pre>\n\n<h2 id=\"theveryshortcheaterversion\">The Very Short (Cheater) Version</h2>\n\n<ul>\n<li>Delete your fork on GitHub.</li>\n<li>Refork a fresh fork from \"source\".</li>\n<li>Done.</li>\n</ul>\n\n<h2 id=\"thelongerversion\">The Longer Version...</h2>\n\n<h3 id=\"addthesourcerepositoryasaremote\">Add the \"source\" repository as a remote</h3>\n\n<p>This enables you to pull/fetch from the original source repository on GitHub. This allows you to compare your fork (origin) with the source (source)</p>\n\n<pre><code class=\"language-bash\"># Display all remotes currently set up (you will likely only have \"origin\")\n$ git remote -v\norigin  git@github.com:myusername/some_great_repo.git (fetch)  \norigin  git@github.com:myusername/some_great_repo.git (push)  \n# Add a new remote with the name \"source\" located at \"git@github.com:owner/some_great_repo.git\"\n$ git remote add source git@github.com:owner/some_great_repo.git\n# Verify that it worked :)\n$ git remote -v\norigin  git@github.com:myusername/some_great_repo.git (fetch)  \norigin  git@github.com:myusername/some_great_repo.git (push)  \nsource  git@github.com:owner/some_great_repo.git (fetch)  \nsource  git@github.com:owner/some_great_repo.git (push)  \n</code></pre>\n\n<h3 id=\"fetchthenewlyaddedremotesource\">Fetch the newly added remote (\"source\")</h3>\n\n<pre><code class=\"language-bash\"># This will fetch the source repository allowing you to examine/interact with it\n$ git fetch source\nremote: Counting objects: 20, done.  \nremote: Compressing objects: 100% (20/20), done.  \nremote: Total 20 (delta 10), reused 1 (delta 0)  \nUnpacking objects: 100% (20/20), done.  \nFrom github.com:owner/some_great_repo  \n * [new branch]      develop     -&gt; source/develop\n</code></pre>\n\n<h3 id=\"youprobablywanttoexaminethedifflog\">You probably want to examine the diff/log...</h3>\n\n<pre><code class=\"language-bash\">$ git log develop...source/develop\n$ git diff develop...source/develop\n# List all branches (including remotes \"-a\")\n$ git branch -a\n* develop\n  remotes/origin/HEAD -&gt; origin/develop\n  remotes/origin/develop\n  remotes/source/develop\n</code></pre>\n\n<h3 id=\"updateyourlocalbranchusingthesourcebranch\">Update your \"local\" branch using the \"source\" branch</h3>\n\n<p>Assuming a fast forward is possible, do this. Otherwise you will need to rebase/merge and possibly resolve any conflicts which is a whole topic on its own.</p>\n\n<pre><code class=\"language-bash\">$ git checkout develop\n$ git merge --ff-only source/develop\nUpdating 22c5306..859b79c  \nFast-forward  \n README.md | 8 +++++++-\n 1 file changed, 7 insertions(+), 1 deletion(-)\n</code></pre>\n\n<h3 id=\"pushtoupdateyourfork\">Push to update your fork</h3>\n\n<pre><code class=\"language-bash\"># Same as: \"git push origin develop\"\n$ git push\nCounting objects: 24, done.  \nDelta compression using up to 8 threads.  \nCompressing objects: 100% (20/20), done.  \nWriting objects: 100% (20/20), 2.39 KiB | 0 bytes/s, done.  \nTotal 20 (delta 11), reused 0 (delta 0)  \nTo git@github.com:myusername/some_great_repo.git  \n   22c5306..859b79c  develop -&gt; develop\n</code></pre>\n\n<h3 id=\"congratulationsyourforkisnowupdated\">Congratulations. Your fork is now updated.</h3>\n\n<p>I would be interested to hear any thoughts or alternative methods from those more experienced. Let me know in the comments below or find me at <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-11-14 13:49:53",
            "created_by": 1,
            "updated_at": "2014-11-14 14:35:02",
            "updated_by": 1,
            "published_at": "2014-11-14 01:50:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 34,
            "uuid": "51b0ae85-07c6-4bac-89e5-0175c9224d54",
            "title": "Ember.js Example App w/ Twitter Bootstrap (SASS) and ember-cli",
            "slug": "ember-js-bootstrap-sass-and-ember-cli-quick-start",
            "markdown": "This is an introductory look at setting up a fresh [Ember.js](http://emberjs.com/) App using [ember-cli](http://www.ember-cli.com/), setting up a few basic templates/routes, and installing/configuring some assets such as [Twitter Bootstrap](http://getbootstrap.com/) (using [SASS](http://sass-lang.com/)) using [Bower](http://bower.io/).\n\nI recently came into a situation where I need to accomplish just this and found that the due to Ember's rapid evolution, many of the articles had become out of date. **Which will surely happen to this article as well**. Please note this article is using `ember-cli v0.1.2`, `node v0.10.31`, and `Ember v1.8.1`.\n\n**If you are new to Ember.js**, I highly recommend heading over the the Ember docs and [Getting Started Guides](http://emberjs.com/guides/getting-started/) and spending a bit of time getting to know the framework at least on a high level. If you have any type of [Ruby on Rails](http://rubyonrails.org/), [Laravel](http://laravel.com/), (or any other similar MVC-ish frameworks that utilize generators and the command line), you will feel right at home :).\n\n![Ember.js Homepage](/content/images/2014/11/Fullscreen_11_18_14__10_26_AM.png)\n\n## Quick Start - Copy/Paste (bad!)\n\nAssuming you are already setup with `node`, `ember` (ember-cli), and `bower`.\n\nRecommended: Head on over the my [Ember.js w/ Bootstrap (SASS) Example App](https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app#quick-start) Quick Start instructions.\n\n_At the time of this writing:_\n\n```language-bash\n# Clone the repo and change directories\ngit clone https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app.git MyEmberApp && cd MyEmberApp\n# Because we never work/commit on master ... right? ;)\ngit checkout -b feature/my_first_feature\n# Install the dependencies (package.json && bower.json)\nnpm install && bower install\n# Fire up the ember-cli server\nember server\n# Done. See that wasn't so bad, was it?\n\n# (optionally in a new tab)\nopen http://localhost:4200\n```\n\nNow you should be able to browse to: [http://localhost:4200](http://localhost:4200) and be up and running with Ember.js and Bootstrap 3!\n\nIt should look a bit like this:\n\n![](https://cloud.githubusercontent.com/assets/1240178/5063715/e19a5b76-6dae-11e4-86cc-d32bc233908d.png)\n\nand from there you have a decent starting point to start learning and experimenting with many of Ember.js's features/concepts such as: \n\n- [Handlebars Templates](http://emberjs.com/guides/templates/the-application-template/)\n- [Routing](http://emberjs.com/guides/routing/)\n- [Components](http://emberjs.com/guides/components/)\n- [Controllers](http://emberjs.com/guides/controllers/)\n- [Models](http://emberjs.com/guides/models/)\n- [Views](http://emberjs.com/guides/views/)\n- Customizing your SASS and leveraging Bootstrap within `app/styles/**/*.scss`\n\n---\n\n## The Long Version - Step-by-Step\n\n... Although very short long version :)\n\n### Step 0: Required Tools:\n\n##### Install [node.js](http://nodejs.org/)\n\nIf you don't already have node.js installed on your system, you will need to start here. If you search for \"How to install node.js on [YOUR OPERATION SYSTEM]\" you will come across 100 different methods on how to do just that. \n\nThe simplest way is the just head on over to [nodejs.org](http://nodejs.org/) and download the one click installer.\n\nI've found I have a much better time (and would recommend you take this route) using [`nvm` (Node Version Manager)](https://github.com/creationix/nvm)\n\nTheir [quick install instructions](https://github.com/creationix/nvm#install-script) are pretty straightforward. Just make sure to set `stable` as your `default` `alias`.\n\n```language-bash\n# Download and setup nvm\ncurl https://raw.githubusercontent.com/creationix/nvm/v0.18.0/install.sh | bash\n\n# Now install and activate the most recent \"stable\" node\nnvm install stable\nnvm alias default stable\n\n# At this point you should be golden (try these to verify...)\nwhich node\nwhich npm\n```\n\n##### Install [ember-cli](http://www.ember-cli.com/) and [bower](http://bower.io/)\n\n```language-bash\nnpm install -g ember-cli\nnpm install -g bower\n```\n\n*Note: if you have to use `sudo` for any `npm install -g [...]` commands then your `node` is likely not installed correctly. If you installed via `nvm` this should be a non-issue :)*\n\n### Step 1: Scaffold Default Ember App via `ember-cli`\n\n```language-bash\n$ ember new my-first-ember-app\n$ cd my-first-ember-app\n$ ember server\n```\n\nAt this point you should be able to browse to: [http://localhost:4200/](http://localhost:4200/) ...\n\nIf your are running into problems... well, try try again ;)\n\n### Step 2: Add Some Basic Routes/Templates\n\nIf you are new to `ember-cli`, then you will want to head over and checkout the [ember-cli Generator docs](#).\n\nSome blurb here... Yay! ember-cli so great...\n\n\n\n```language-bash\n$ ember generate template login\n```\n\nDeclare the route in your `router.js` for `\"/login\"`\n\n\n\n```language-javascript\n// app/router.js - Router.map\nRouter.map(function() {\n  this.route('login');\n});\n```\n\n**And for good measure,** let's throw in some Bootstrap specific markup so we can verify that the Bootstrap 3 assets (including glyphicons/fonts) are setup correctly.\n\n\n```language-markup\n// app/templates/login.hbs\n<!-- Note: this is vanilla HTML. TODO: Emberify!-->\n<h2>Login</h2>\n\n<form class=\"form\" action=\"#\">\n\n  <label for=\"email\" class=\"sr-only\">Email</label>\n  <input type=\"email\" class=\"form-control input-lg\" name=\"email\" id=\"email\" placeholder=\"Email\"/>\n\n  <br/>\n\n  <label for=\"password\" class=\"sr-only\">Password</label>\n  <input type=\"password\" class=\"form-control input-lg\" name=\"password\" id=\"password\" placeholder=\"Password\"/>\n\n  <hr/>\n\n  <button class=\"btn btn-lg btn-primary\">\n    <span class=\"glyphicon glyphicon-cog\"></span> Log Me In!\n  </button>\n\n</form>\n```\n### Step 3: Add Dependencies for Bootstrap and SASS\n\n```language-bash\n$ bower install --save-dev bootstrap-sass-official\n$ npm install --save-dev broccoli-sass\n```\n\n*Note: bootstrap-sass is not the bootstrap-sass you are looking for!*\n> [...] `bootstrap-sass` is taken so make sure you use the command above.\n\n#### Step 3b: Enable Bootstrap Assets\n\n\n\n```language-javascript\n// Brocfile.js\napp.import('bower_components/bootstrap-sass-official/assets/javascripts/bootstrap.js');\n```\n\n**Rename `app.css` to `app.scss`**\n\n```language-bash\nmv app/styles/app.css app/styles/app.scss\n```\n\n**Import Bootstrap**\n\nNow you could import directly from the `bower_components/[...]/bootstrap.scss`, but I like to have a little more control/visibility over my imports (especially since the `bower_components`'s Bootstrap is not tracked in the git repository).\n\n- Add a `@import \"bootstrap_imports\";` to the top of your `app.scss`.\n- Within the `app/styles/` add a `bootstrap_imports.scss`\n- Load the page. Your new app should be Bootstrap-ified!\n\n#### Step 3c: Using Bootstrap Glyphicons with ember-cli and Broccolli (fonts path)\n\nSome blurb here....\n\n**Add this to your `Brocfile.js`**\n\n\n\n```language-javascript\n// Brocfile.js\napp.import('bower_components/bootstrap-sass-official/assets/fonts/bootstrap/glyphicons-halflings-regular.woff', {\n  destDir: 'fonts/bootstrap/'\n});\n```\n\n#### Step 3c: Start Customizing Bootstrap!\n\n- Add a `bootstrap_variables.scss` to declare/override Bootstrap's defaults. Why? [Read this article on `!default`](http://robots.thoughtbot.com/sass-default) for an explanation.\n\n\n\n```language-scss\n// bootstrap_imports.scss\n\n// Our custom variables\n@import \"bootstrap_variables\";\n\n// Core variables and mixins\n@import \"bower_components/bootstrap-sass-official/assets/stylesheets/bootstrap/variables\";\n\n// Other import statements below here\n// [...]\n```\n\nAny variables you declare in this new file will take precedence over those declared in the deafult `_variables.scss` included by Bootstrap.\n\n## In Closing...\n\nWell. That about sums it up for now :)\n\nI plan to refine and update my [Ember.js w/ Bootstrap (SASS) Example App](https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app#quick-start) repo as I plan to use it from time to time.\n\nBy the time you read this, the repo will likely be much more up to date, relevant, and useful. Please let me know of any suggestions/alternatives/resources as at the time of this writing I am fairly new to the land of [Broccoli](https://github.com/broccolijs/broccoli) and [Ember.js](http://emberjs.com/) myself!",
            "html": "<p>This is an introductory look at setting up a fresh <a href=\"http://emberjs.com/\">Ember.js</a> App using <a href=\"http://www.ember-cli.com/\">ember-cli</a>, setting up a few basic templates/routes, and installing/configuring some assets such as <a href=\"http://getbootstrap.com/\">Twitter Bootstrap</a> (using <a href=\"http://sass-lang.com/\">SASS</a>) using <a href=\"http://bower.io/\">Bower</a>.</p>\n\n<p>I recently came into a situation where I need to accomplish just this and found that the due to Ember's rapid evolution, many of the articles had become out of date. <strong>Which will surely happen to this article as well</strong>. Please note this article is using <code>ember-cli v0.1.2</code>, <code>node v0.10.31</code>, and <code>Ember v1.8.1</code>.</p>\n\n<p><strong>If you are new to Ember.js</strong>, I highly recommend heading over the the Ember docs and <a href=\"http://emberjs.com/guides/getting-started/\">Getting Started Guides</a> and spending a bit of time getting to know the framework at least on a high level. If you have any type of <a href=\"http://rubyonrails.org/\">Ruby on Rails</a>, <a href=\"http://laravel.com/\">Laravel</a>, (or any other similar MVC-ish frameworks that utilize generators and the command line), you will feel right at home :).</p>\n\n<p><img src=\"/content/images/2014/11/Fullscreen_11_18_14__10_26_AM.png\" alt=\"Ember.js Homepage\" /></p>\n\n<h2 id=\"quickstartcopypastebad\">Quick Start - Copy/Paste (bad!)</h2>\n\n<p>Assuming you are already setup with <code>node</code>, <code>ember</code> (ember-cli), and <code>bower</code>.</p>\n\n<p>Recommended: Head on over the my <a href=\"https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app#quick-start\">Ember.js w/ Bootstrap (SASS) Example App</a> Quick Start instructions.</p>\n\n<p><em>At the time of this writing:</em></p>\n\n<pre><code class=\"language-bash\"># Clone the repo and change directories\ngit clone https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app.git MyEmberApp &amp;&amp; cd MyEmberApp  \n# Because we never work/commit on master ... right? ;)\ngit checkout -b feature/my_first_feature  \n# Install the dependencies (package.json &amp;&amp; bower.json)\nnpm install &amp;&amp; bower install  \n# Fire up the ember-cli server\nember server  \n# Done. See that wasn't so bad, was it?\n\n# (optionally in a new tab)\nopen http://localhost:4200  \n</code></pre>\n\n<p>Now you should be able to browse to: <a href=\"http://localhost:4200\">http://localhost:4200</a> and be up and running with Ember.js and Bootstrap 3!</p>\n\n<p>It should look a bit like this:</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/1240178/5063715/e19a5b76-6dae-11e4-86cc-d32bc233908d.png\" alt=\"\" /></p>\n\n<p>and from there you have a decent starting point to start learning and experimenting with many of Ember.js's features/concepts such as: </p>\n\n<ul>\n<li><a href=\"http://emberjs.com/guides/templates/the-application-template/\">Handlebars Templates</a></li>\n<li><a href=\"http://emberjs.com/guides/routing/\">Routing</a></li>\n<li><a href=\"http://emberjs.com/guides/components/\">Components</a></li>\n<li><a href=\"http://emberjs.com/guides/controllers/\">Controllers</a></li>\n<li><a href=\"http://emberjs.com/guides/models/\">Models</a></li>\n<li><a href=\"http://emberjs.com/guides/views/\">Views</a></li>\n<li>Customizing your SASS and leveraging Bootstrap within <code>app/styles/**/*.scss</code></li>\n</ul>\n\n<hr />\n\n<h2 id=\"thelongversionstepbystep\">The Long Version - Step-by-Step</h2>\n\n<p>... Although very short long version :)</p>\n\n<h3 id=\"step0requiredtools\">Step 0: Required Tools:</h3>\n\n<h5 id=\"installnodejshttpnodejsorg\">Install <a href=\"http://nodejs.org/\">node.js</a></h5>\n\n<p>If you don't already have node.js installed on your system, you will need to start here. If you search for \"How to install node.js on [YOUR OPERATION SYSTEM]\" you will come across 100 different methods on how to do just that. </p>\n\n<p>The simplest way is the just head on over to <a href=\"http://nodejs.org/\">nodejs.org</a> and download the one click installer.</p>\n\n<p>I've found I have a much better time (and would recommend you take this route) using <a href=\"https://github.com/creationix/nvm\"><code>nvm</code> (Node Version Manager)</a></p>\n\n<p>Their <a href=\"https://github.com/creationix/nvm#install-script\">quick install instructions</a> are pretty straightforward. Just make sure to set <code>stable</code> as your <code>default</code> <code>alias</code>.</p>\n\n<pre><code class=\"language-bash\"># Download and setup nvm\ncurl https://raw.githubusercontent.com/creationix/nvm/v0.18.0/install.sh | bash\n\n# Now install and activate the most recent \"stable\" node\nnvm install stable  \nnvm alias default stable\n\n# At this point you should be golden (try these to verify...)\nwhich node  \nwhich npm  \n</code></pre>\n\n<h5 id=\"installemberclihttpwwwemberclicomandbowerhttpbowerio\">Install <a href=\"http://www.ember-cli.com/\">ember-cli</a> and <a href=\"http://bower.io/\">bower</a></h5>\n\n<pre><code class=\"language-bash\">npm install -g ember-cli  \nnpm install -g bower  \n</code></pre>\n\n<p><em>Note: if you have to use <code>sudo</code> for any <code>npm install -g [...]</code> commands then your <code>node</code> is likely not installed correctly. If you installed via <code>nvm</code> this should be a non-issue :)</em></p>\n\n<h3 id=\"step1scaffolddefaultemberappviaembercli\">Step 1: Scaffold Default Ember App via <code>ember-cli</code></h3>\n\n<pre><code class=\"language-bash\">$ ember new my-first-ember-app\n$ cd my-first-ember-app\n$ ember server\n</code></pre>\n\n<p>At this point you should be able to browse to: <a href=\"http://localhost:4200/\">http://localhost:4200/</a> ...</p>\n\n<p>If your are running into problems... well, try try again ;)</p>\n\n<h3 id=\"step2addsomebasicroutestemplates\">Step 2: Add Some Basic Routes/Templates</h3>\n\n<p>If you are new to <code>ember-cli</code>, then you will want to head over and checkout the <a href=\"#\">ember-cli Generator docs</a>.</p>\n\n<p>Some blurb here... Yay! ember-cli so great...</p>\n\n<pre><code class=\"language-bash\">$ ember generate template login\n</code></pre>\n\n<p>Declare the route in your <code>router.js</code> for <code>\"/login\"</code></p>\n\n<pre><code class=\"language-javascript\">// app/router.js - Router.map\nRouter.map(function() {  \n  this.route('login');\n});\n</code></pre>\n\n<p><strong>And for good measure,</strong> let's throw in some Bootstrap specific markup so we can verify that the Bootstrap 3 assets (including glyphicons/fonts) are setup correctly.</p>\n\n<pre><code class=\"language-markup\">// app/templates/login.hbs\n&lt;!-- Note: this is vanilla HTML. TODO: Emberify!--&gt;  \n&lt;h2&gt;Login&lt;/h2&gt;\n\n&lt;form class=\"form\" action=\"#\"&gt;\n\n  &lt;label for=\"email\" class=\"sr-only\"&gt;Email&lt;/label&gt;\n  &lt;input type=\"email\" class=\"form-control input-lg\" name=\"email\" id=\"email\" placeholder=\"Email\"/&gt;\n\n  &lt;br/&gt;\n\n  &lt;label for=\"password\" class=\"sr-only\"&gt;Password&lt;/label&gt;\n  &lt;input type=\"password\" class=\"form-control input-lg\" name=\"password\" id=\"password\" placeholder=\"Password\"/&gt;\n\n  &lt;hr/&gt;\n\n  &lt;button class=\"btn btn-lg btn-primary\"&gt;\n    &lt;span class=\"glyphicon glyphicon-cog\"&gt;&lt;/span&gt; Log Me In!\n  &lt;/button&gt;\n\n&lt;/form&gt;  \n</code></pre>\n\n<h3 id=\"step3adddependenciesforbootstrapandsass\">Step 3: Add Dependencies for Bootstrap and SASS</h3>\n\n<pre><code class=\"language-bash\">$ bower install --save-dev bootstrap-sass-official\n$ npm install --save-dev broccoli-sass\n</code></pre>\n\n<p><em>Note: bootstrap-sass is not the bootstrap-sass you are looking for!</em></p>\n\n<blockquote>\n  <p>[...] <code>bootstrap-sass</code> is taken so make sure you use the command above.</p>\n</blockquote>\n\n<h4 id=\"step3benablebootstrapassets\">Step 3b: Enable Bootstrap Assets</h4>\n\n<pre><code class=\"language-javascript\">// Brocfile.js\napp.import('bower_components/bootstrap-sass-official/assets/javascripts/bootstrap.js');  \n</code></pre>\n\n<p><strong>Rename <code>app.css</code> to <code>app.scss</code></strong></p>\n\n<pre><code class=\"language-bash\">mv app/styles/app.css app/styles/app.scss  \n</code></pre>\n\n<p><strong>Import Bootstrap</strong></p>\n\n<p>Now you could import directly from the <code>bower_components/[...]/bootstrap.scss</code>, but I like to have a little more control/visibility over my imports (especially since the <code>bower_components</code>'s Bootstrap is not tracked in the git repository).</p>\n\n<ul>\n<li>Add a <code>@import \"bootstrap_imports\";</code> to the top of your <code>app.scss</code>.</li>\n<li>Within the <code>app/styles/</code> add a <code>bootstrap_imports.scss</code></li>\n<li>Load the page. Your new app should be Bootstrap-ified!</li>\n</ul>\n\n<h4 id=\"step3cusingbootstrapglyphiconswithembercliandbroccollifontspath\">Step 3c: Using Bootstrap Glyphicons with ember-cli and Broccolli (fonts path)</h4>\n\n<p>Some blurb here....</p>\n\n<p><strong>Add this to your <code>Brocfile.js</code></strong></p>\n\n<pre><code class=\"language-javascript\">// Brocfile.js\napp.import('bower_components/bootstrap-sass-official/assets/fonts/bootstrap/glyphicons-halflings-regular.woff', {  \n  destDir: 'fonts/bootstrap/'\n});\n</code></pre>\n\n<h4 id=\"step3cstartcustomizingbootstrap\">Step 3c: Start Customizing Bootstrap!</h4>\n\n<ul>\n<li>Add a <code>bootstrap_variables.scss</code> to declare/override Bootstrap's defaults. Why? <a href=\"http://robots.thoughtbot.com/sass-default\">Read this article on <code>!default</code></a> for an explanation.</li>\n</ul>\n\n<pre><code class=\"language-scss\">// bootstrap_imports.scss\n\n// Our custom variables\n@import \"bootstrap_variables\";\n\n// Core variables and mixins\n@import \"bower_components/bootstrap-sass-official/assets/stylesheets/bootstrap/variables\";\n\n// Other import statements below here\n// [...]\n</code></pre>\n\n<p>Any variables you declare in this new file will take precedence over those declared in the deafult <code>_variables.scss</code> included by Bootstrap.</p>\n\n<h2 id=\"inclosing\">In Closing...</h2>\n\n<p>Well. That about sums it up for now :)</p>\n\n<p>I plan to refine and update my <a href=\"https://github.com/erikthedeveloper/emberjs-bootstrap3-starter-app#quick-start\">Ember.js w/ Bootstrap (SASS) Example App</a> repo as I plan to use it from time to time.</p>\n\n<p>By the time you read this, the repo will likely be much more up to date, relevant, and useful. Please let me know of any suggestions/alternatives/resources as at the time of this writing I am fairly new to the land of <a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a> and <a href=\"http://emberjs.com/\">Ember.js</a> myself!</p>",
            "image": "/content/images/2014/11/emberjs_tomster_wide.jpg",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "Ember.js Example App w/ ember-cli, Bootstrap (SASS), and Code Examples",
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-11-16 23:50:41",
            "created_by": 1,
            "updated_at": "2014-11-21 15:09:34",
            "updated_by": 1,
            "published_at": "2014-11-16 23:51:04",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 38,
            "uuid": "c3d59c8c-b634-46fd-8f46-bd79423794d4",
            "title": "Using Behat for Building and Testing a RESTful JSON API (Laravel)",
            "slug": "behat-for-testing-laravel-restful-json-api",
            "markdown": "## Testing\n\nTesting. This has been a topic I have been chipping away at for some time now. At first, it seems so foreign, has such a steep learning curve, and causes more pain than anything else. However painful the process has been, I have stuck with it and am now beginning to see much of the light that many seasoned developers and testing advocates seem to swear by. I feel like investing this time into learning testing is beginning to pay off immensely in my growing as a developer; this is felt even in projects that aren't using any form of testing. I got a nice kickstart in learning testing (among many other things) with [Code School's Ruby and Rails Courses](https://www.codeschool.com/paths/ruby) and [RSpec](https://www.codeschool.com/courses/testing-with-rspec) along with **many hours** spent with Jeffery Way over at [Laracasts](https://laracasts.com/collections/testing-in-php). It really opened my eyes to the possibility of working in a development environment where code quality really matters and eventually gave my career a very nice boost in the right direction :)\n\nSome of the tools related to testing that I have grown to really like in the land of PHP are:\n\n- [PHPSpec](http://phpspec.net/docs/introduction.html#matchers)\n- [Behat](http://docs.behat.org/en/v3.0/)\n- [Factory Muffin](https://factory-muffin.thephpleague.com/usage/examples/)\n\nRather than rambling too much about my opinions and experiences regarding testing, here are some links that I have found very useful during my journey.\n\n\n## So You Want to Learn Testing and Behat? What to Build... an API of course!\n\n*Following up from [An Earlier Post](http://erikaybar.name/building-and-testing-a-restful-api-using-behat-phpunit-and-laravel-part-1/)*\n\n**In this post, we will be focusing on using Behat in the context of building a RESTful JSON API built with Laravel 4.x.** We will also throw in an assortment of other related testing tools and goodies such as Guzzle for issuing HTTP requests, PHPUnit for making assertion, and Factory Muffin rather than fixtures.\n\n### A Sneak Peak\n\n**Some Output from Running Our \"Muffins\" Feature Tests/Scenarios**\n![](/content/images/2014/12/Fullscreen_12_12_14__7_00_AM.png)\n\nSome items to take note of from above.\n\n- How readable and easy to understand the test output is...\n- ... The output is nearly identical to the actual ~~test~~ feature\n\nFollowing are some snippets from our `muffins.feature`.\n\n```language-gherkin\n\nBackground:\n  Given there are 7 \"Muffin\"s\n  And the \"Muffin\" with id 3 has attributes:\n  \"\"\"\n  {\n  \"title\": \"Chocolate Bliss\"\n  }\n  \"\"\"\n  \n# ...\n\n  Scenario: muffins.show Get a listing of muffins (w/ pagination and query string goodness)!\n    When I send a GET request to \"/muffins?page=2&per_page=5\"\n    Then the response should contain json:\n    \"\"\"\n    {\n    \"page\": 2,\n    \"per_page\": 5,\n    \"page_results\": 2,\n    \"total_results\": 7\n    }\n    \"\"\"\n    And the response json's \"items\" key should be of type \"array\"\n    \n# ...\n\n  Scenario: muffins.destroy Destroy a muffin!\n    When I send a DELETE request to \"/muffins/3\"\n    Then the response should contain json:\n    \"\"\"\n    {\n    \"deleted\": true\n    }\n    \"\"\"\n    When I send a GET request to \"/muffins/3\"\n    Then the response code should be 404\n    When I send a DELETE request to \"/muffins/3\"\n    Then the response code should be 404\n\n```\n\nYou can see from reading the above scenarios that we are able to make a lot of assumptions. Example:\n\n- Issuing HTTP requests and being able to interact with the response\n- Setting the stage for our scenarios with the `Background: ...` statement\n- Being able to say **\"There are 5 muffins\"** and so on...\n\nUsing [Gherkin](http://docs.behat.org/en/latest/guides/1.gherkin.html), allows us to write these features and scenarios nearly in plain English and abstract away the actual functionality to ... *some magic place*.\n\nExplanation using above examples...\n\n```language-gherkin\n# Let's seed some data!\nGiven there are 7 \"Muffin\"s\n# Specificy some attributes on a specific model\nAnd the \"Muffin\" with id 3 has attributes:\n\"\"\"\n{ \"title\": \"Chocolate Bliss\" }\n\"\"\"\n```\n\nAnd to define these two steps from above...\n\n```language-php\n// ApiFeatureContext.php\n\n/**\n * @Given /^there are (\\d+) \"([^\"]*)\"s$/\n * Example: Given there are 7 \"Muffin\"s\n */\npublic function thereAreSomeNumberOfModel($num, $model_name)\n{\n    FactoryMuffin::seed($num, $model_name);\n}\n\n/**\n * @Given /^the \"([^\"]*)\" with id (\\d+) has attributes:$/\n * Example: And the \"Muffin\" with id 3 has attributes: \"\"\"{\"some_key\":\"some_data\", ...}\"\"\"\n */\npublic function theModelWithIdHasAttributes($model_name, $model_id, \\Behat\\Gherkin\\Node\\PyStringNode $jsonString)\n{\n    $attributes = json_decode($this->replacePlaceHolder($jsonString->getRaw()), true);\n    $model_name::findOrFail($model_id)->update($attributes);\n}\n```\n\nAnd again... even at this level, we have abstracted nearly all of the functionality out into reusable pieces. \n\n## **Writing in Progress**\n\nI have found if I wait until a post is finished and \"ready\" to be published ... well, let's just say it's either this or nothing ;). The [repository containing the code referenced in this write up is living here on GitHub](https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel) and I try to keep my commit history and Pull Requests grouped fairly logically. Feel free to check it out, do some code review, or just leave a comment.\n\nUntil next time...\n\n\n## Initial Setup/Config\n\nUntil next time...\n\n- [behat.yml](https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/behat.yml)\n- [features/bootstrap/ApiFeatureContext.php](https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/features/bootstrap/ApiFeatureContext.php)\n- [tests/factories/all.php](https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/tests/factories/all.php)\n\nAnd detecting the testing environment for HTTP requests within my `bootstrap/start.php`\n\n```language-php\n$env = $app->detectEnvironment( function () {\n    if (isset($_SERVER['HTTP_HOST']) && $_SERVER['HTTP_HOST'] == 'behat-api.test')\n        return 'testing';\n    if (getenv('APP_ENV'))\n        return getenv('APP_ENV');\n});\n```\n\n## Links and Stuff...\n\n#### Links (Tools)\n- [Behat](http://docs.behat.org/en/v3.0/)\n- [Laravel](http://laravel.com/docs/4.2)\n- [Gherkin](http://docs.behat.org/en/latest/guides/1.gherkin.html)\n- [Behat's WebApiExtension](https://github.com/Behat/WebApiExtension)\n- [Factory Muffin](https://factory-muffin.thephpleague.com/usage/examples/)\n- [Guzzle](http://guzzle.readthedocs.org/en/latest/quickstart.html)\n- [PHPUnit](https://phpunit.de/manual/current/en/testing-practices.html)\n\n#### Links (Learning)\n- [RSpec](https://www.codeschool.com/courses/testing-with-rspec)\n- [Laracasts](https://laracasts.com/collections/testing-in-php)\n- [AirBnb on Testing](http://nerds.airbnb.com/testing-at-airbnb/)",
            "html": "<h2 id=\"testing\">Testing</h2>\n\n<p>Testing. This has been a topic I have been chipping away at for some time now. At first, it seems so foreign, has such a steep learning curve, and causes more pain than anything else. However painful the process has been, I have stuck with it and am now beginning to see much of the light that many seasoned developers and testing advocates seem to swear by. I feel like investing this time into learning testing is beginning to pay off immensely in my growing as a developer; this is felt even in projects that aren't using any form of testing. I got a nice kickstart in learning testing (among many other things) with <a href=\"https://www.codeschool.com/paths/ruby\">Code School's Ruby and Rails Courses</a> and <a href=\"https://www.codeschool.com/courses/testing-with-rspec\">RSpec</a> along with <strong>many hours</strong> spent with Jeffery Way over at <a href=\"https://laracasts.com/collections/testing-in-php\">Laracasts</a>. It really opened my eyes to the possibility of working in a development environment where code quality really matters and eventually gave my career a very nice boost in the right direction :)</p>\n\n<p>Some of the tools related to testing that I have grown to really like in the land of PHP are:</p>\n\n<ul>\n<li><a href=\"http://phpspec.net/docs/introduction.html#matchers\">PHPSpec</a></li>\n<li><a href=\"http://docs.behat.org/en/v3.0/\">Behat</a></li>\n<li><a href=\"https://factory-muffin.thephpleague.com/usage/examples/\">Factory Muffin</a></li>\n</ul>\n\n<p>Rather than rambling too much about my opinions and experiences regarding testing, here are some links that I have found very useful during my journey.</p>\n\n<h2 id=\"soyouwanttolearntestingandbehatwhattobuildanapiofcourse\">So You Want to Learn Testing and Behat? What to Build... an API of course!</h2>\n\n<p><em>Following up from <a href=\"http://erikaybar.name/building-and-testing-a-restful-api-using-behat-phpunit-and-laravel-part-1/\">An Earlier Post</a></em></p>\n\n<p><strong>In this post, we will be focusing on using Behat in the context of building a RESTful JSON API built with Laravel 4.x.</strong> We will also throw in an assortment of other related testing tools and goodies such as Guzzle for issuing HTTP requests, PHPUnit for making assertion, and Factory Muffin rather than fixtures.</p>\n\n<h3 id=\"asneakpeak\">A Sneak Peak</h3>\n\n<p><strong>Some Output from Running Our \"Muffins\" Feature Tests/Scenarios</strong>\n<img src=\"/content/images/2014/12/Fullscreen_12_12_14__7_00_AM.png\" alt=\"\" /></p>\n\n<p>Some items to take note of from above.</p>\n\n<ul>\n<li>How readable and easy to understand the test output is...</li>\n<li>... The output is nearly identical to the actual <del>test</del> feature</li>\n</ul>\n\n<p>Following are some snippets from our <code>muffins.feature</code>.</p>\n\n<pre><code class=\"language-gherkin\">Background:  \n  Given there are 7 \"Muffin\"s\n  And the \"Muffin\" with id 3 has attributes:\n  \"\"\"\n  {\n  \"title\": \"Chocolate Bliss\"\n  }\n  \"\"\"\n\n# ...\n\n  Scenario: muffins.show Get a listing of muffins (w/ pagination and query string goodness)!\n    When I send a GET request to \"/muffins?page=2&amp;per_page=5\"\n    Then the response should contain json:\n    \"\"\"\n    {\n    \"page\": 2,\n    \"per_page\": 5,\n    \"page_results\": 2,\n    \"total_results\": 7\n    }\n    \"\"\"\n    And the response json's \"items\" key should be of type \"array\"\n\n# ...\n\n  Scenario: muffins.destroy Destroy a muffin!\n    When I send a DELETE request to \"/muffins/3\"\n    Then the response should contain json:\n    \"\"\"\n    {\n    \"deleted\": true\n    }\n    \"\"\"\n    When I send a GET request to \"/muffins/3\"\n    Then the response code should be 404\n    When I send a DELETE request to \"/muffins/3\"\n    Then the response code should be 404\n</code></pre>\n\n<p>You can see from reading the above scenarios that we are able to make a lot of assumptions. Example:</p>\n\n<ul>\n<li>Issuing HTTP requests and being able to interact with the response</li>\n<li>Setting the stage for our scenarios with the <code>Background: ...</code> statement</li>\n<li>Being able to say <strong>\"There are 5 muffins\"</strong> and so on...</li>\n</ul>\n\n<p>Using <a href=\"http://docs.behat.org/en/latest/guides/1.gherkin.html\">Gherkin</a>, allows us to write these features and scenarios nearly in plain English and abstract away the actual functionality to ... <em>some magic place</em>.</p>\n\n<p>Explanation using above examples...</p>\n\n<pre><code class=\"language-gherkin\"># Let's seed some data!\nGiven there are 7 \"Muffin\"s  \n# Specificy some attributes on a specific model\nAnd the \"Muffin\" with id 3 has attributes:  \n\"\"\"\n{ \"title\": \"Chocolate Bliss\" }\n\"\"\"\n</code></pre>\n\n<p>And to define these two steps from above...</p>\n\n<pre><code class=\"language-php\">// ApiFeatureContext.php\n\n/**\n * @Given /^there are (\\d+) \"([^\"]*)\"s$/\n * Example: Given there are 7 \"Muffin\"s\n */\npublic function thereAreSomeNumberOfModel($num, $model_name)  \n{\n    FactoryMuffin::seed($num, $model_name);\n}\n\n/**\n * @Given /^the \"([^\"]*)\" with id (\\d+) has attributes:$/\n * Example: And the \"Muffin\" with id 3 has attributes: \"\"\"{\"some_key\":\"some_data\", ...}\"\"\"\n */\npublic function theModelWithIdHasAttributes($model_name, $model_id, \\Behat\\Gherkin\\Node\\PyStringNode $jsonString)  \n{\n    $attributes = json_decode($this-&gt;replacePlaceHolder($jsonString-&gt;getRaw()), true);\n    $model_name::findOrFail($model_id)-&gt;update($attributes);\n}\n</code></pre>\n\n<p>And again... even at this level, we have abstracted nearly all of the functionality out into reusable pieces. </p>\n\n<h2 id=\"writinginprogress\"><strong>Writing in Progress</strong></h2>\n\n<p>I have found if I wait until a post is finished and \"ready\" to be published ... well, let's just say it's either this or nothing ;). The <a href=\"https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel\">repository containing the code referenced in this write up is living here on GitHub</a> and I try to keep my commit history and Pull Requests grouped fairly logically. Feel free to check it out, do some code review, or just leave a comment.</p>\n\n<p>Until next time...</p>\n\n<h2 id=\"initialsetupconfig\">Initial Setup/Config</h2>\n\n<p>Until next time...</p>\n\n<ul>\n<li><a href=\"https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/behat.yml\">behat.yml</a></li>\n<li><a href=\"https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/features/bootstrap/ApiFeatureContext.php\">features/bootstrap/ApiFeatureContext.php</a></li>\n<li><a href=\"https://github.com/erikthedeveloper/le-testing-api-with-behat-laravel/blob/master/tests/factories/all.php\">tests/factories/all.php</a></li>\n</ul>\n\n<p>And detecting the testing environment for HTTP requests within my <code>bootstrap/start.php</code></p>\n\n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment( function () {\n    if (isset($_SERVER['HTTP_HOST']) &amp;&amp; $_SERVER['HTTP_HOST'] == 'behat-api.test')\n        return 'testing';\n    if (getenv('APP_ENV'))\n        return getenv('APP_ENV');\n});\n</code></pre>\n\n<h2 id=\"linksandstuff\">Links and Stuff...</h2>\n\n<h4 id=\"linkstools\">Links (Tools)</h4>\n\n<ul>\n<li><a href=\"http://docs.behat.org/en/v3.0/\">Behat</a></li>\n<li><a href=\"http://laravel.com/docs/4.2\">Laravel</a></li>\n<li><a href=\"http://docs.behat.org/en/latest/guides/1.gherkin.html\">Gherkin</a></li>\n<li><a href=\"https://github.com/Behat/WebApiExtension\">Behat's WebApiExtension</a></li>\n<li><a href=\"https://factory-muffin.thephpleague.com/usage/examples/\">Factory Muffin</a></li>\n<li><a href=\"http://guzzle.readthedocs.org/en/latest/quickstart.html\">Guzzle</a></li>\n<li><a href=\"https://phpunit.de/manual/current/en/testing-practices.html\">PHPUnit</a></li>\n</ul>\n\n<h4 id=\"linkslearning\">Links (Learning)</h4>\n\n<ul>\n<li><a href=\"https://www.codeschool.com/courses/testing-with-rspec\">RSpec</a></li>\n<li><a href=\"https://laracasts.com/collections/testing-in-php\">Laracasts</a></li>\n<li><a href=\"http://nerds.airbnb.com/testing-at-airbnb/\">AirBnb on Testing</a></li>\n</ul>",
            "image": "/content/images/2014/12/behat_laravel_screenshot.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2014-12-12 13:27:49",
            "created_by": 1,
            "updated_at": "2014-12-12 14:34:47",
            "updated_by": 1,
            "published_at": "2014-12-12 14:29:59",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 40,
            "uuid": "f1748af2-e81c-4533-8fed-41adeef9ed87",
            "title": "Javascript - A Never Ending Journey of Learning, Trial, and Error.",
            "slug": "javascript-a-never-ending-learning-journey",
            "markdown": "If you've spent anytime in javascript lately, you know that the javascript build tool landscape can be rather overwhelming. Just a few years ago the go to solution for automation and build processes was Grunt. That worked great for some time and then along came Gulp. All of the sudden [the Internet was raving about how great this new kid on the block, Gulp,](http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/) was \"in\" and Grunt was \"out\". If you were still using Grunt, that meant you were falling behind the curve! Essentially: Gulp all the things.\n\nFast forward a year or two. Now replace Grunt/Gulp in that scenario with whichever new  kid is on the block by the time you stumble across this write up. Now replace \"build tools\" with \"MV* frameworks\". Now replace \"MV* frameworks\" with \"utility libraries\". Now replace \"utility libraries\" with \"dependency management\" and \"module formats\". And \"testing\". And \"CLI tools\". etc... etc... I think that paints a rather accurate picture of what the life of a modern javascript developer tends to looks like.\n\nJavascript has exploded in popularity in the last several years and as a result so has the ecosystem of tools, libraries, and developer communities surrounding it. Which is certainly a great thing for the advancement of the web! It can just be a bit overwhelming trying to keep up with what you \"should\" know, what is \"outdated\", and what is just a \"trend\".\n\n## A *Few* Tools to Know...\n\nHere are just a handful of the \"must-know\" *hint of sarcasm* tools/libraries that a modern javascript developer is expected to be familiar with *(Plucked off the top of my head and not in any particular order. Yes, I know. I'm missing all of \"your favorites\".)*. I've **bolded** some of my current favorites *(subject to change without given notice!)*.:\n\n#### Javascript Automation and Build Tools\n\n- [Grunt - The Javascript Task Runner](http://gruntjs.com/)\n- **[Gulp - Automate and enhance your workflow](http://gulpjs.com/)**\n- [Broccoli - a build tool for applications that run in the browser](https://github.com/broccolijs/broccoli)\n- [Webpack - the {production, unbiased, flexible, extensible, open source} module bundler](http://webpack.github.io/)\n\n#### Javascript Testing Libraries\n\n- [QUnit - A Javascript Unit Testing framework](http://qunitjs.com/)\n- [Mocha - The fun, simple, flexible, javascript test framework](http://mochajs.org/)\n- [Jasmine - Behavior-Driven Javascript](http://jasmine.github.io/)\n- **[Jest (Facebook) - Painless javascript unit testing](https://facebook.github.io/jest/)**\n\n#### Javascript Frameworks and Libraries `(M?V.*)?` (Front End)\n\n- [jQuery - write less, do more.](http://jquery.com/)\n- [Underscore - a whole mess of useful functional programming helpers](http://underscorejs.org/)\n- **[lodash - utility library delivering consistency, modularity, performance, & extras.](https://lodash.com/)**\n- [AngularJS - Superheroic javascript MVW framework](https://angularjs.org/)\n- **[Ember - A framework for creating ambitious web applications](http://emberjs.com/)**\n- **[React - A javascript library for building user interfaces](http://facebook.github.io/react/)**\n\n#### Dependency Management\n\n##### Module Formats\n- AMD\n- **CommonJS**\n- ES6 Modules\n- Global javascript managed via `script` include order *yikes...*\n\n##### Package Repositories\n- **[Bower - A package manager for the web](http://bower.io/)**\n- **[npm - the package manager for javascript](https://www.npmjs.com/)**\n- [jspm.io - Frictionless browser package management](http://jspm.io/)\n\n##### Dependency Loaders\n- **[Browserify](http://browserify.org/)**\n- [SystemJS](https://github.com/systemjs/systemjs)\n- [Inject (LinkedIn)](http://www.injectjs.com/)\n- [RequireJS](http://requirejs.org/)\n\n**Let me be clear.** I'm only speaking of my experiences with client-side javascript. Server-side javascript is an entirely separate journey/list!\n\n## And the Journey Continues\n\nIf there is anything that I've learned over the past several years as I dive deeper into the journey that is being a {software,web} {programmer,developer,engineer,magician} (whatever you or your company calling yourself), it is that you simply cannot learn it all. You can surely try. And believe me, I and many others before me have **tried to keep up with it all**. This only results in burnout. You simply can't learn it all. You simply don't need to know it all. Just don't.\n\nThe solution? Pick one single tool, library, or concept and pursue it. Stick with that one thing beyond the point of hitting that initial wall of discomfort. Fight the urge to jump around from gaining a 101 knowledge of \"everything\" and really get to know each topic/technology that you set out to learn. In saying that, you have to know how to recognize the value that time spent in a particular topic or technology **might** provide. Just like my wife always tells me when attempting to get me to \"read more\"... haha!\n\n> Give the book a fair chance. If you get to page 20 and you are not enjoying it, move on to something else. There are so many books out there that you can't read them all.\n\nI feel like this applies directly to my experience with javascript (or any development related technologies really...). You have to give a technology/concept a fair shake before either deciding that \"Yes, I want to invest some serious time into this\" or \"No, I'm going to forget all about this and move on.\".\n\nNow just stop and think about all of this. Think about how could you possibly keep up with all of this. Think about how you are going to fit time into your daily life, which for me includes (wife, kids, cats, dogs, house, family, work, school, fun, House of Cards, `[...]`). It just doesn't fit. You simply can't keep up with it all. The best we can do is choose a small slice of the pie, stick with it, and hope that it is the right slice!\n\nAnd there we have it. **The advice that I only wish I could follow myself.** *JSDADD* (Javascript Developer ADD) the struggle is real.",
            "html": "<p>If you've spent anytime in javascript lately, you know that the javascript build tool landscape can be rather overwhelming. Just a few years ago the go to solution for automation and build processes was Grunt. That worked great for some time and then along came Gulp. All of the sudden <a href=\"http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/\">the Internet was raving about how great this new kid on the block, Gulp,</a> was \"in\" and Grunt was \"out\". If you were still using Grunt, that meant you were falling behind the curve! Essentially: Gulp all the things.</p>\n\n<p>Fast forward a year or two. Now replace Grunt/Gulp in that scenario with whichever new  kid is on the block by the time you stumble across this write up. Now replace \"build tools\" with \"MV* frameworks\". Now replace \"MV* frameworks\" with \"utility libraries\". Now replace \"utility libraries\" with \"dependency management\" and \"module formats\". And \"testing\". And \"CLI tools\". etc... etc... I think that paints a rather accurate picture of what the life of a modern javascript developer tends to looks like.</p>\n\n<p>Javascript has exploded in popularity in the last several years and as a result so has the ecosystem of tools, libraries, and developer communities surrounding it. Which is certainly a great thing for the advancement of the web! It can just be a bit overwhelming trying to keep up with what you \"should\" know, what is \"outdated\", and what is just a \"trend\".</p>\n\n<h2 id=\"afewtoolstoknow\">A <em>Few</em> Tools to Know...</h2>\n\n<p>Here are just a handful of the \"must-know\" <em>hint of sarcasm</em> tools/libraries that a modern javascript developer is expected to be familiar with <em>(Plucked off the top of my head and not in any particular order. Yes, I know. I'm missing all of \"your favorites\".)</em>. I've <strong>bolded</strong> some of my current favorites <em>(subject to change without given notice!)</em>.:</p>\n\n<h4 id=\"javascriptautomationandbuildtools\">Javascript Automation and Build Tools</h4>\n\n<ul>\n<li><a href=\"http://gruntjs.com/\">Grunt - The Javascript Task Runner</a></li>\n<li><strong><a href=\"http://gulpjs.com/\">Gulp - Automate and enhance your workflow</a></strong></li>\n<li><a href=\"https://github.com/broccolijs/broccoli\">Broccoli - a build tool for applications that run in the browser</a></li>\n<li><a href=\"http://webpack.github.io/\">Webpack - the {production, unbiased, flexible, extensible, open source} module bundler</a></li>\n</ul>\n\n<h4 id=\"javascripttestinglibraries\">Javascript Testing Libraries</h4>\n\n<ul>\n<li><a href=\"http://qunitjs.com/\">QUnit - A Javascript Unit Testing framework</a></li>\n<li><a href=\"http://mochajs.org/\">Mocha - The fun, simple, flexible, javascript test framework</a></li>\n<li><a href=\"http://jasmine.github.io/\">Jasmine - Behavior-Driven Javascript</a></li>\n<li><strong><a href=\"https://facebook.github.io/jest/\">Jest (Facebook) - Painless javascript unit testing</a></strong></li>\n</ul>\n\n<h4 id=\"javascriptframeworksandlibrariesmvfrontend\">Javascript Frameworks and Libraries <code>(M?V.*)?</code> (Front End)</h4>\n\n<ul>\n<li><a href=\"http://jquery.com/\">jQuery - write less, do more.</a></li>\n<li><a href=\"http://underscorejs.org/\">Underscore - a whole mess of useful functional programming helpers</a></li>\n<li><strong><a href=\"https://lodash.com/\">lodash - utility library delivering consistency, modularity, performance, &amp; extras.</a></strong></li>\n<li><a href=\"https://angularjs.org/\">AngularJS - Superheroic javascript MVW framework</a></li>\n<li><strong><a href=\"http://emberjs.com/\">Ember - A framework for creating ambitious web applications</a></strong></li>\n<li><strong><a href=\"http://facebook.github.io/react/\">React - A javascript library for building user interfaces</a></strong></li>\n</ul>\n\n<h4 id=\"dependencymanagement\">Dependency Management</h4>\n\n<h5 id=\"moduleformats\">Module Formats</h5>\n\n<ul>\n<li>AMD</li>\n<li><strong>CommonJS</strong></li>\n<li>ES6 Modules</li>\n<li>Global javascript managed via <code>script</code> include order <em>yikes...</em></li>\n</ul>\n\n<h5 id=\"packagerepositories\">Package Repositories</h5>\n\n<ul>\n<li><strong><a href=\"http://bower.io/\">Bower - A package manager for the web</a></strong></li>\n<li><strong><a href=\"https://www.npmjs.com/\">npm - the package manager for javascript</a></strong></li>\n<li><a href=\"http://jspm.io/\">jspm.io - Frictionless browser package management</a></li>\n</ul>\n\n<h5 id=\"dependencyloaders\">Dependency Loaders</h5>\n\n<ul>\n<li><strong><a href=\"http://browserify.org/\">Browserify</a></strong></li>\n<li><a href=\"https://github.com/systemjs/systemjs\">SystemJS</a></li>\n<li><a href=\"http://www.injectjs.com/\">Inject (LinkedIn)</a></li>\n<li><a href=\"http://requirejs.org/\">RequireJS</a></li>\n</ul>\n\n<p><strong>Let me be clear.</strong> I'm only speaking of my experiences with client-side javascript. Server-side javascript is an entirely separate journey/list!</p>\n\n<h2 id=\"andthejourneycontinues\">And the Journey Continues</h2>\n\n<p>If there is anything that I've learned over the past several years as I dive deeper into the journey that is being a {software,web} {programmer,developer,engineer,magician} (whatever you or your company calling yourself), it is that you simply cannot learn it all. You can surely try. And believe me, I and many others before me have <strong>tried to keep up with it all</strong>. This only results in burnout. You simply can't learn it all. You simply don't need to know it all. Just don't.</p>\n\n<p>The solution? Pick one single tool, library, or concept and pursue it. Stick with that one thing beyond the point of hitting that initial wall of discomfort. Fight the urge to jump around from gaining a 101 knowledge of \"everything\" and really get to know each topic/technology that you set out to learn. In saying that, you have to know how to recognize the value that time spent in a particular topic or technology <strong>might</strong> provide. Just like my wife always tells me when attempting to get me to \"read more\"... haha!</p>\n\n<blockquote>\n  <p>Give the book a fair chance. If you get to page 20 and you are not enjoying it, move on to something else. There are so many books out there that you can't read them all.</p>\n</blockquote>\n\n<p>I feel like this applies directly to my experience with javascript (or any development related technologies really...). You have to give a technology/concept a fair shake before either deciding that \"Yes, I want to invest some serious time into this\" or \"No, I'm going to forget all about this and move on.\".</p>\n\n<p>Now just stop and think about all of this. Think about how could you possibly keep up with all of this. Think about how you are going to fit time into your daily life, which for me includes (wife, kids, cats, dogs, house, family, work, school, fun, House of Cards, <code>[...]</code>). It just doesn't fit. You simply can't keep up with it all. The best we can do is choose a small slice of the pie, stick with it, and hope that it is the right slice!</p>\n\n<p>And there we have it. <strong>The advice that I only wish I could follow myself.</strong> <em>JSDADD</em> (Javascript Developer ADD) the struggle is real.</p>",
            "image": "/content/images/2015/03/master_javascript_js_-_www_-___webroot_practicegenius_erikaybar_sites-mobile-app_www_.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2015-03-10 14:16:00",
            "created_by": 1,
            "updated_at": "2015-05-05 15:13:37",
            "updated_by": 1,
            "published_at": "2015-03-10 14:19:26",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 42,
            "uuid": "4c1d5df7-35fd-4f1e-bff5-ce65940894ae",
            "title": "Distraction - The Enemy of Learning",
            "slug": "distraction-is-the-enemy-of-learning",
            "markdown": "When attempting to pick up or improve your skills relating to a technology or concept, it is so easy to be sidelined by distraction. Instead of spending one hour kicking off an Angular app, I find myself distracted setting up tooling and development environment. Rather than taking an hour and getting some test coverage going for my React app, I find myself debating which testing framework I should go with. Instead of simply interfacing with some existing API (GitHub, Twitter, etc...) I find myself getting sidetracked into building my own API alongside whatever client side project I have in mind. In many cases, distraction prevents me from even getting started with what I set out to accomplish, \"learning this one single thing\".\n\nThe farther I progress with my Javascript skills/career the more difficult avoiding this distraction becomes. The more tools and concepts I expose myself to the higher the number of possible branches of distraction. There are so many possibilities of concepts, libraries, frameworks, and tooling out there that I feel like you almost have to just pick one and commit some time to it, promising yourself you will at least give it a fair shot before moving onto its counterpart. Some examples of these types of \"choices\":\n\n- Which MV* Javascript framework should I be using/learning?\n- Should I even be using a MV* framework for my Javascript?\n- What about this new functional/reactive programming thing?\n- How about testing? Which form of testing is \"best\"?\n- Which automation tooling should I invest my time into?\n- How about build tools?\n- CSS libraries?\n- ES6/ES7 are they ready for use via transpilers? Which transpiler?\n- [...]\n\nI feel like when it comes to learning and experimenting in the programming world, you need to have a project to use as a baseling for your learning and experimentation. I have found this much easier said than done. More often than not I find myself starting the morning off by telling myself, \"I'm going to sit down and invest a solid hour into better learning [INSERT TECHNOLOGY OR CONCEPT HERE]\". An hour, sometimes two, later I am still banging my head against my desk trying to decide what to build with said technology/concept. Even worse is that once I settle on a good \"demo product/project\" idea, I can get absorbed for days or weeks in \"product design\" trying to decide what it does. And the worst part is once it comes to trying to make whatever I've settled on look pretty. It is usually during this design, styling, etc... phase that my learning/experimentation fizzles out.\n\nOver the years, I've settled on a few ideas that I feel like are good candidates to fill this slot of using as a baseline for learning and experimenting. Some off the top of my head are:\n\n- TODO App (as cliche as they get)\n- Time Tracker App\n- Personal Finance/Budget App\n- GitHub Client\n- Personal Recipe App\n- and so on and so on...\n\nThis morning was no different in that I woke up with the intention of sitting down and putting an hour into unit testing w/ Javascript, and here I am still debating how to best put this into practice, get some code/tests written, and flex my learning muscles.\n\nI think for now, I have settled on the Personal Finance/Budget App for a number of reasons:\n\n- It doesn't require interaction with any 3rd party APIs/services\n- It requires some actual logic/calculation\n- It lends itself to simple/easy layout and design\n- It is a concept that I am familar with\n- I have spent an unhealthy amount of time in Excel\n- It solves a problem that I actually have\n\n> It solves a problem that I actually have\n\nI feel like that last point is the most important when it comes to working on side-projects or learning experiments. Something that you can understand, relate to, and possibly even use.\n\n> It is usually during this design, styling, etc... phase that my learning/experimentation fizzles out.\n\nThat is the toughest part. I still haven't quite found the solution to this. Although I have some ideas in mind. I plan to follow this up with the first step towards muscling past this phase. I want to lay the groundwork for a baseline project that is relatable and meaningful enough to me that I can stick with it. I need to muscle through this phase and define that baseline project. I must decide the what and why of this product. I want it to be a small enough undertaking that I can port it to several different technologies and implementations in a relatively short amount of time. I want it to be large enough an undertaking that I can feel certain pain points and strengths of said technologies.\n\nIf you have any good baseline projects that work for you, let me know! I would love to hear what is working well for others out there. I know this is a common struggle out there.\n\n<span style=\"font-size: xx-small;\">Image courtesy of <a href=\"http://www.flickr.com/photos/andresthor/3963368371/\" target=\"_blank\">andresthor</a></span>",
            "html": "<p>When attempting to pick up or improve your skills relating to a technology or concept, it is so easy to be sidelined by distraction. Instead of spending one hour kicking off an Angular app, I find myself distracted setting up tooling and development environment. Rather than taking an hour and getting some test coverage going for my React app, I find myself debating which testing framework I should go with. Instead of simply interfacing with some existing API (GitHub, Twitter, etc...) I find myself getting sidetracked into building my own API alongside whatever client side project I have in mind. In many cases, distraction prevents me from even getting started with what I set out to accomplish, \"learning this one single thing\".</p>\n\n<p>The farther I progress with my Javascript skills/career the more difficult avoiding this distraction becomes. The more tools and concepts I expose myself to the higher the number of possible branches of distraction. There are so many possibilities of concepts, libraries, frameworks, and tooling out there that I feel like you almost have to just pick one and commit some time to it, promising yourself you will at least give it a fair shot before moving onto its counterpart. Some examples of these types of \"choices\":</p>\n\n<ul>\n<li>Which MV* Javascript framework should I be using/learning?</li>\n<li>Should I even be using a MV* framework for my Javascript?</li>\n<li>What about this new functional/reactive programming thing?</li>\n<li>How about testing? Which form of testing is \"best\"?</li>\n<li>Which automation tooling should I invest my time into?</li>\n<li>How about build tools?</li>\n<li>CSS libraries?</li>\n<li>ES6/ES7 are they ready for use via transpilers? Which transpiler?</li>\n<li>[...]</li>\n</ul>\n\n<p>I feel like when it comes to learning and experimenting in the programming world, you need to have a project to use as a baseling for your learning and experimentation. I have found this much easier said than done. More often than not I find myself starting the morning off by telling myself, \"I'm going to sit down and invest a solid hour into better learning [INSERT TECHNOLOGY OR CONCEPT HERE]\". An hour, sometimes two, later I am still banging my head against my desk trying to decide what to build with said technology/concept. Even worse is that once I settle on a good \"demo product/project\" idea, I can get absorbed for days or weeks in \"product design\" trying to decide what it does. And the worst part is once it comes to trying to make whatever I've settled on look pretty. It is usually during this design, styling, etc... phase that my learning/experimentation fizzles out.</p>\n\n<p>Over the years, I've settled on a few ideas that I feel like are good candidates to fill this slot of using as a baseline for learning and experimenting. Some off the top of my head are:</p>\n\n<ul>\n<li>TODO App (as cliche as they get)</li>\n<li>Time Tracker App</li>\n<li>Personal Finance/Budget App</li>\n<li>GitHub Client</li>\n<li>Personal Recipe App</li>\n<li>and so on and so on...</li>\n</ul>\n\n<p>This morning was no different in that I woke up with the intention of sitting down and putting an hour into unit testing w/ Javascript, and here I am still debating how to best put this into practice, get some code/tests written, and flex my learning muscles.</p>\n\n<p>I think for now, I have settled on the Personal Finance/Budget App for a number of reasons:</p>\n\n<ul>\n<li>It doesn't require interaction with any 3rd party APIs/services</li>\n<li>It requires some actual logic/calculation</li>\n<li>It lends itself to simple/easy layout and design</li>\n<li>It is a concept that I am familar with</li>\n<li>I have spent an unhealthy amount of time in Excel</li>\n<li>It solves a problem that I actually have</li>\n</ul>\n\n<blockquote>\n  <p>It solves a problem that I actually have</p>\n</blockquote>\n\n<p>I feel like that last point is the most important when it comes to working on side-projects or learning experiments. Something that you can understand, relate to, and possibly even use.</p>\n\n<blockquote>\n  <p>It is usually during this design, styling, etc... phase that my learning/experimentation fizzles out.</p>\n</blockquote>\n\n<p>That is the toughest part. I still haven't quite found the solution to this. Although I have some ideas in mind. I plan to follow this up with the first step towards muscling past this phase. I want to lay the groundwork for a baseline project that is relatable and meaningful enough to me that I can stick with it. I need to muscle through this phase and define that baseline project. I must decide the what and why of this product. I want it to be a small enough undertaking that I can port it to several different technologies and implementations in a relatively short amount of time. I want it to be large enough an undertaking that I can feel certain pain points and strengths of said technologies.</p>\n\n<p>If you have any good baseline projects that work for you, let me know! I would love to hear what is working well for others out there. I know this is a common struggle out there.</p>\n\n<p><span style=\"font-size: xx-small;\">Image courtesy of <a href=\"http://www.flickr.com/photos/andresthor/3963368371/\" target=\"_blank\">andresthor</a></span></p>",
            "image": "/content/images/2015/05/stress_face02.jpg",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": "The farther I progress with my Javascript skills/career, the more difficult avoiding  distraction becomes. Concepts, libraries, frameworks, and tooling ...",
            "author_id": 1,
            "created_at": "2015-05-27 14:04:29",
            "created_by": 1,
            "updated_at": "2015-05-27 14:26:59",
            "updated_by": 1,
            "published_at": "2015-05-27 14:20:35",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 44,
            "uuid": "decd19c6-9310-4ce2-bdd9-9f0a319ba8c1",
            "title": "Some Initial Thoughts on Adopting React",
            "slug": "initial-thoughts-on-adopting-react",
            "markdown": "I've spent roughly the last 6 months investing a lot of time and energy into getting up to speed with Facebook's React. It has been an overwhelmingly positive experience and I've learned a lot throughout the process. I wanted to share some thoughts I've formed along the way.\n\n> I've experienced mild success with both Ember and Angular, but for some reason, neither framework has really compelled me (or employer(s) at the time) to commit and adopt. [...] Then came React.\n\nA little backstory about how I ended up with React. Over the last 2 years, I have progressively been spending more and more time with Javascript both in my experimental pet-project time and at my day job(s). During this time, I've invested weeks on end into investigating and picking up [Ember](http://emberjs.com/), [Angular](angularjs.org), and other [Javascript libraries and frameworks](http://todomvc.com/). I've experienced mild success with both Ember and Angular, but for some reason, neither framework has really compelled me (or employer(s) at the time) to commit and adopt. I know many will disagree with me, but my experience has been that they have a relatively high entry level and commitment required to successfully adopt and bring into an existing project/team.\n\nThen came React. I remember the initial buzz on Twitter. Everybody seemed to be talking about this new \"UI Library\" from Facebook. I was particularly burnt out at the time from spending countless hours and days experimenting with Angular and Ember and never really gaining much traction with either of them. Now that I had transitioned to spending 90% of my programming-time with Javascript, it seemed that I was learning a new framework, library, or technique every day. It was becoming exhausting. I ignored that intitial buzz around React and kept my head down, continuing with the status quo.\n\nI finally decided to dedicate some time and give React some attention to see what all the fuss was about. Within 30 minutes or so, I had glazed over the docs, worked my way through the tutorial, and React had my attention. Something just felt right.\n\nThe more I played with React, and the more I got a better feel of what was happening throughout the larger Javascript community, the more I knew that I really could buckle down and invest some time into this.\n\n> Fast forward 6 months, and I'm leading a project developing a large new feature [...] in React\n\nFast forward 6 months, and I'm leading a project developing a large new feature (built exclusively in React of course :)) that will live within our primary application at work. As it stands, we are on the path of fully adopting React for new development moving forward and refactoring crucial features as needed. It has been an overly positive experience and had a great effect on our development process, team dynamic, and even product quality.\n\nI attribute this to a number of reasons. Here are some more specific reasons that have contributed to the positive experience.\n\n## JSX\n\nYou can't get past the [React Doc's Homepage](http://facebook.github.io/react/index.html) without encountering JSX ([Facebook's JSX Spec] (https://facebook.github.io/jsx/)). This has been quite the point of contention among developers, and intially received negative feedback when Facebook initially open sourced React.\n\nPersonally, that this was initially one of the biggest selling points for me and I feel like it has had a huge impact on React's rise in popularity and success.\n\nHere is a contrived side-by-side. You can easily imagine how a more complex \"without JSX\" example might look. Not to say it can't be done, but I see no reason to shed JSX in favor of \"purity\".\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/zukapi/latest/embed?js\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n## ES6 (ES2015)\n\nAnother huge bonus side effect I've experienced from diving into React is exposing myself to ES6 (ES2015). This seems like a deliberate descision from the React team to \"Promote best practices as default\". \n\nSince I've begun working with React, all of my new code has been primarly ES6 **thanks to (Babel)[http://babeljs.io/]**. There is much more to be said about why you should be looking at or adopting ES6/ES2015 now. If you haven't given ES6 a shot, I highly recommend you go give Babel a spin.\n\n## One Way Data Flow\n\nMuch wonder and happiness has come from the two-way data binding that React's ancestors provided. Being able to fire up a fresh Angular app, add a few ng attributes, and have some text be automatically bound to some input felt like magic! But with power comes a price. Much heartache and sorrow has resulted from large applications and impossible-to-debug scenarios as a result of two-way data binding. If you are coming from that type of world/mentality, then React's unidirectional data flow may be a bit jarring at first. \n\nI have found it refreshingly explicit.\n\nI feel like the one way data flow that React promotes has had a huge impact on my way of thinking and has opened my eyes to the importance of \"data flow\". This definitely takes some getting used to and raises some questions when dealing with parent/child components.\n\n> There is no guesswork or piecing together timelines of events to figure out \"what will this component look like after X and before Y and during Z\".\n\nWith this one way data flow, components are a function of props and state. There is no guesswork or piecing together timelines of events to figure out \"what will this component look like after X and before Y and during Z\". This is a paradigm shift I am still wrapping my mind around, but it is becoming clearer with time and has helped me better reason about the responsibilties of my components.\n\n## and so much more...\n\nThere is so much more to be said about React and the impact it is having on my personal growth/development, team dynamics, and even product quality. Some more topics I would like to put some more thought and time into wrting:\n\n- The power of `render()` and `propTypes` (as documentation)\n- Unidirectional data flow\n- Flux (currently implementing production project w/ [Alt](http://alt.js.org/))\n- Functional Programming \n- Reactive Programming\n- RxJS\n- Animation with React\n- react-router\n- Some of the more helpful React-related resources and developers I've come across",
            "html": "<p>I've spent roughly the last 6 months investing a lot of time and energy into getting up to speed with Facebook's React. It has been an overwhelmingly positive experience and I've learned a lot throughout the process. I wanted to share some thoughts I've formed along the way.</p>\n\n<blockquote>\n  <p>I've experienced mild success with both Ember and Angular, but for some reason, neither framework has really compelled me (or employer(s) at the time) to commit and adopt. [...] Then came React.</p>\n</blockquote>\n\n<p>A little backstory about how I ended up with React. Over the last 2 years, I have progressively been spending more and more time with Javascript both in my experimental pet-project time and at my day job(s). During this time, I've invested weeks on end into investigating and picking up <a href=\"http://emberjs.com/\">Ember</a>, <a href=\"angularjs.org\">Angular</a>, and other <a href=\"http://todomvc.com/\">Javascript libraries and frameworks</a>. I've experienced mild success with both Ember and Angular, but for some reason, neither framework has really compelled me (or employer(s) at the time) to commit and adopt. I know many will disagree with me, but my experience has been that they have a relatively high entry level and commitment required to successfully adopt and bring into an existing project/team.</p>\n\n<p>Then came React. I remember the initial buzz on Twitter. Everybody seemed to be talking about this new \"UI Library\" from Facebook. I was particularly burnt out at the time from spending countless hours and days experimenting with Angular and Ember and never really gaining much traction with either of them. Now that I had transitioned to spending 90% of my programming-time with Javascript, it seemed that I was learning a new framework, library, or technique every day. It was becoming exhausting. I ignored that intitial buzz around React and kept my head down, continuing with the status quo.</p>\n\n<p>I finally decided to dedicate some time and give React some attention to see what all the fuss was about. Within 30 minutes or so, I had glazed over the docs, worked my way through the tutorial, and React had my attention. Something just felt right.</p>\n\n<p>The more I played with React, and the more I got a better feel of what was happening throughout the larger Javascript community, the more I knew that I really could buckle down and invest some time into this.</p>\n\n<blockquote>\n  <p>Fast forward 6 months, and I'm leading a project developing a large new feature [...] in React</p>\n</blockquote>\n\n<p>Fast forward 6 months, and I'm leading a project developing a large new feature (built exclusively in React of course :)) that will live within our primary application at work. As it stands, we are on the path of fully adopting React for new development moving forward and refactoring crucial features as needed. It has been an overly positive experience and had a great effect on our development process, team dynamic, and even product quality.</p>\n\n<p>I attribute this to a number of reasons. Here are some more specific reasons that have contributed to the positive experience.</p>\n\n<h2 id=\"jsx\">JSX</h2>\n\n<p>You can't get past the <a href=\"http://facebook.github.io/react/index.html\">React Doc's Homepage</a> without encountering JSX ([Facebook's JSX Spec] (<a href=\"https://facebook.github.io/jsx/\">https://facebook.github.io/jsx/</a>)). This has been quite the point of contention among developers, and intially received negative feedback when Facebook initially open sourced React.</p>\n\n<p>Personally, that this was initially one of the biggest selling points for me and I feel like it has had a huge impact on React's rise in popularity and success.</p>\n\n<p>Here is a contrived side-by-side. You can easily imagine how a more complex \"without JSX\" example might look. Not to say it can't be done, but I see no reason to shed JSX in favor of \"purity\".</p>\n\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/zukapi/latest/embed?js\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n\n<h2 id=\"es6es2015\">ES6 (ES2015)</h2>\n\n<p>Another huge bonus side effect I've experienced from diving into React is exposing myself to ES6 (ES2015). This seems like a deliberate descision from the React team to \"Promote best practices as default\". </p>\n\n<p>Since I've begun working with React, all of my new code has been primarly ES6 <strong>thanks to (Babel)[http://babeljs.io/]</strong>. There is much more to be said about why you should be looking at or adopting ES6/ES2015 now. If you haven't given ES6 a shot, I highly recommend you go give Babel a spin.</p>\n\n<h2 id=\"onewaydataflow\">One Way Data Flow</h2>\n\n<p>Much wonder and happiness has come from the two-way data binding that React's ancestors provided. Being able to fire up a fresh Angular app, add a few ng attributes, and have some text be automatically bound to some input felt like magic! But with power comes a price. Much heartache and sorrow has resulted from large applications and impossible-to-debug scenarios as a result of two-way data binding. If you are coming from that type of world/mentality, then React's unidirectional data flow may be a bit jarring at first. </p>\n\n<p>I have found it refreshingly explicit.</p>\n\n<p>I feel like the one way data flow that React promotes has had a huge impact on my way of thinking and has opened my eyes to the importance of \"data flow\". This definitely takes some getting used to and raises some questions when dealing with parent/child components.</p>\n\n<blockquote>\n  <p>There is no guesswork or piecing together timelines of events to figure out \"what will this component look like after X and before Y and during Z\".</p>\n</blockquote>\n\n<p>With this one way data flow, components are a function of props and state. There is no guesswork or piecing together timelines of events to figure out \"what will this component look like after X and before Y and during Z\". This is a paradigm shift I am still wrapping my mind around, but it is becoming clearer with time and has helped me better reason about the responsibilties of my components.</p>\n\n<h2 id=\"andsomuchmore\">and so much more...</h2>\n\n<p>There is so much more to be said about React and the impact it is having on my personal growth/development, team dynamics, and even product quality. Some more topics I would like to put some more thought and time into wrting:</p>\n\n<ul>\n<li>The power of <code>render()</code> and <code>propTypes</code> (as documentation)</li>\n<li>Unidirectional data flow</li>\n<li>Flux (currently implementing production project w/ <a href=\"http://alt.js.org/\">Alt</a>)</li>\n<li>Functional Programming </li>\n<li>Reactive Programming</li>\n<li>RxJS</li>\n<li>Animation with React</li>\n<li>react-router</li>\n<li>Some of the more helpful React-related resources and developers I've come across</li>\n</ul>",
            "image": "/content/images/2015/06/A_JavaScript_library_for_building_user_interfaces___React.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2015-06-01 13:48:17",
            "created_by": 1,
            "updated_at": "2015-06-02 13:51:25",
            "updated_by": 1,
            "published_at": "2015-06-02 13:32:13",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 45,
            "uuid": "7b834eef-3eca-4081-845c-348d330a5ce9",
            "title": "React, JSX, and ES6 example \"Hello World\" with JSBin in 4 minutes",
            "slug": "react-jsx-es6-jsbin-hello-world",
            "markdown": "In this short ~4 minute video, I quickly cover how you can easily use [JSBin](http://jsbin.com/) to experiment with [React](http://facebook.github.io/react/) Facebook's UI library and touch on some basics of React component creation, ES6, and JSBin.\n\nExample JSBin from video: http://jsbin.com/cuneha/1/edit?js,output\n\n> I've shared more thoughts on my experience adopting React both for personal projects as well as in the workplace here: http://erikaybar.name/initial-thoughts-on-adopting-react/\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JqVUBY0DGqA\" frameborder=\"0\" allowfullscreen></iframe>\n\nTopics covered in video:\n\n- Enabling JSX and ES6 in JSBin via [Babel](http://babeljs.io/)\n- Writing a simple React component\n- Using the ES6 class syntax for our React component\n- Passing props into a React component\n- Customizing JSBin to enable Sublime Text keyboard shortcuts and multi-cursor",
            "html": "<p>In this short ~4 minute video, I quickly cover how you can easily use <a href=\"http://jsbin.com/\">JSBin</a> to experiment with <a href=\"http://facebook.github.io/react/\">React</a> Facebook's UI library and touch on some basics of React component creation, ES6, and JSBin.</p>\n\n<p>Example JSBin from video: <a href=\"http://jsbin.com/cuneha/1/edit?js,output\">http://jsbin.com/cuneha/1/edit?js,output</a></p>\n\n<blockquote>\n  <p>I've shared more thoughts on my experience adopting React both for personal projects as well as in the workplace here: <a href=\"http://erikaybar.name/initial-thoughts-on-adopting-react/\">http://erikaybar.name/initial-thoughts-on-adopting-react/</a></p>\n</blockquote>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JqVUBY0DGqA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Topics covered in video:</p>\n\n<ul>\n<li>Enabling JSX and ES6 in JSBin via <a href=\"http://babeljs.io/\">Babel</a></li>\n<li>Writing a simple React component</li>\n<li>Using the ES6 class syntax for our React component</li>\n<li>Passing props into a React component</li>\n<li>Customizing JSBin to enable Sublime Text keyboard shortcuts and multi-cursor</li>\n</ul>",
            "image": "/content/images/2015/06/jsbin_react_img.jpg",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "React, JSX, and ES6 example \"Hello World\" with JSBin in 4 minutes",
            "meta_description": "You can easily use React, JSX, and ES6 with JSBin. Writing a React component with ES6 class syntax. Customizing JSBin to use multi-cursor and ES6 features.",
            "author_id": 1,
            "created_at": "2015-06-09 13:50:31",
            "created_by": 1,
            "updated_at": "2015-06-09 14:14:29",
            "updated_by": 1,
            "published_at": "2015-06-09 14:14:29",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 46,
            "uuid": "072dd3ba-62de-4280-888f-d80f85d9b3b2",
            "title": "My First Egghead.io Lesson",
            "slug": "my-first-egghead-javascript-tutorial-video",
            "markdown": "So I've been having some fun recording Javascript tutorials/videos over at [Egghead.io](https://egghead.io/instructors/erik-aybar) :)\n\n[![Refactoring Javascript with ES6/ES2015 and functional programming](/content/images/2015/08/refactor_gif.gif)](https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach)\n\nHere is **my first** published video _(free)_: [Refactoring Javascript w/ Array.prototype methods and ES6 by example](https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach).\n\n[![Javascript Tutorial Using Array prototype methods](/content/images/2015/08/Refactoring__Array_prototype_by_example__filter__some__forEach__-_JavaScript_Video_Tutorial__free__eggheadio.png)](https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach)\n\nIt is still very early, but I have several videos/topics in the works. I look forward to continually learning by teaching (which I'm finding to be the most effective way for me to learn). And of course, I hope I can help others pick up a thing or two along the way :).\n\n**I would love to hear feedback** and am 100% open for **topic requests**! Let me know in the comments below or come find me on Twitter [@erikthedev_](https://twitter.com/erikthedev_).",
            "html": "<p>So I've been having some fun recording Javascript tutorials/videos over at <a href=\"https://egghead.io/instructors/erik-aybar\">Egghead.io</a> :)</p>\n\n<p><a href=\"https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach\"><img src=\"/content/images/2015/08/refactor_gif.gif\" alt=\"Refactoring Javascript with ES6/ES2015 and functional programming\" title=\"\" /></a></p>\n\n<p>Here is <strong>my first</strong> published video <em>(free)</em>: <a href=\"https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach\">Refactoring Javascript w/ Array.prototype methods and ES6 by example</a>.</p>\n\n<p><a href=\"https://egghead.io/lessons/javascript-refactoring-array-prototype-by-example-filter-some-foreach\"><img src=\"/content/images/2015/08/Refactoring__Array_prototype_by_example__filter__some__forEach__-_JavaScript_Video_Tutorial__free__eggheadio.png\" alt=\"Javascript Tutorial Using Array prototype methods\" title=\"\" /></a></p>\n\n<p>It is still very early, but I have several videos/topics in the works. I look forward to continually learning by teaching (which I'm finding to be the most effective way for me to learn). And of course, I hope I can help others pick up a thing or two along the way :).</p>\n\n<p><strong>I would love to hear feedback</strong> and am 100% open for <strong>topic requests</strong>! Let me know in the comments below or come find me on Twitter <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a>.</p>",
            "image": "/content/images/2015/08/egghead_io_-_Learn_professional_JavaScript_tools_with_Tutorial_Videos___Training__eggheadio-1.png",
            "featured": 1,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "My 1st Egghead.io Javascript Video Tutorial",
            "meta_description": "My first Egghead.io Javascript video tutorial. Refactoring Javascript. I look forward to continually learning by teaching and look forward to feedback!",
            "author_id": 1,
            "created_at": "2015-08-07 11:43:57",
            "created_by": 1,
            "updated_at": "2015-08-11 11:55:55",
            "updated_by": 1,
            "published_at": "2015-08-07 12:41:16",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 47,
            "uuid": "20194f56-d62a-438d-9c98-bb9f02991f58",
            "title": "About",
            "slug": "about",
            "markdown": "I live and work remotely from sunny St. George, Utah with my wife and two kids. I spend most of my tech-related time getting to know, learning from, and teaching others in the Javascript, React, and remote working realms.\n\nI enjoy exploring and challenging myself to grow as a software engineer. I care deeply about much beyond code and always push for improved product, processes and teams. I'm especially interested in remote-first teams and companies. \n\nI’m most focused on Javascript, React and creating quality user experiences. I'm also passionate about product, mission, and leadership.\n\nI'm always happy to answer questions and help others start and/or grow their careers in software. Especially those from underrepresented groups in tech.\n\nYou can find me in a few other places around the web:\n\n- https://twitter.com/erikaybar_\n- https://egghead.io/instructors/erik-aybar\n- https://github.com/erikthedeveloper\n- https://medium.com/@_erikaybar\n- http://stackoverflow.com/users/2644281/erikthedeveloper\n- https://www.linkedin.com/in/erikaybar\n\nIf you want to get in touch, your best shot is to ping me on Twitter: [@erikaybar_](https://twitter.com/erikaybar_)",
            "html": "<p>I live and work remotely from sunny St. George, Utah with my wife and two kids. I spend most of my tech-related time getting to know, learning from, and teaching others in the Javascript, React, and remote working realms.</p>\n\n<p>I enjoy exploring and challenging myself to grow as a software engineer. I care deeply about much beyond code and always push for improved product, processes and teams. I'm especially interested in remote-first teams and companies. </p>\n\n<p>I’m most focused on Javascript, React and creating quality user experiences. I'm also passionate about product, mission, and leadership.</p>\n\n<p>I'm always happy to answer questions and help others start and/or grow their careers in software. Especially those from underrepresented groups in tech.</p>\n\n<p>You can find me in a few other places around the web:</p>\n\n<ul>\n<li><a href=\"https://twitter.com/erikaybar_\">https://twitter.com/erikaybar_</a></li>\n<li><a href=\"https://egghead.io/instructors/erik-aybar\">https://egghead.io/instructors/erik-aybar</a></li>\n<li><a href=\"https://github.com/erikthedeveloper\">https://github.com/erikthedeveloper</a></li>\n<li><a href=\"https://medium.com/@_erikaybar\">https://medium.com/@_erikaybar</a></li>\n<li><a href=\"http://stackoverflow.com/users/2644281/erikthedeveloper\">http://stackoverflow.com/users/2644281/erikthedeveloper</a></li>\n<li><a href=\"https://www.linkedin.com/in/erikaybar\">https://www.linkedin.com/in/erikaybar</a></li>\n</ul>\n\n<p>If you want to get in touch, your best shot is to ping me on Twitter: <a href=\"https://twitter.com/erikaybar_\">@erikaybar_</a></p>",
            "image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2015-08-11 11:59:21",
            "created_by": 1,
            "updated_at": "2018-07-23 13:27:53",
            "updated_by": 1,
            "published_at": "2015-08-11 11:59:48",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 48,
            "uuid": "0ba45464-f1b3-4804-8cb2-8f7b76bf0340",
            "title": "Using ES6 Promises Instead of Callbacks for Mongoose Queries",
            "slug": "using-es6-promises-with-mongoosejs-queries",
            "markdown": "[Mongoose](http://mongoosejs.com/) queries traditionally follow the typical node.js callback pattern. Thanks to Mongoose 4.2+ and [ES6 Promises (available in node 4.x)](https://nodejs.org/en/docs/es6/) these can be rewritten using a much more pleasant (and powerful IMO) pattern using promises. By default, these query methods return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n**Using callbacks**\n\n```language-javascript\nsomeMongooseModel.find(someInput, function(err, results) {\n  if (err) {\n    panic(err);\n    return;\n  }\n  \n  /* No error. Proceed as planned. */\n  doSomething(results);\n});\n```\n\n**Using Promises**\n\n```language-javascript\nsomeMongooseModel.find(someInput)\n  .catch(panic)\n  .then(doSomething);\n```\n\nMaking use of the actual native `Promise` that ES6 provides, requires very little setup thanks to Mongoose exposing `mongoose.Promise`\n\n```language-javascript\n// Set mongoose.Promise to any Promise implementation\nmongoose.Promise = Promise;\n```\n\nHere is a snapshot from a less trivial example showing how clean/nice it can be making use of the Promise in the context of a simple RESTful CRUD API built w/ [Express](http://expressjs.com/), [MongoDB](https://www.mongodb.com/), and Mongoose.\n\n![RESTful CRUD API built w/ Express, MongoDB, and Mongoose.](/content/images/2015/10/ListMaster.png)\n\nJust a quick tip, that I've recently discovered. Hopefully I can get around to piecing together a more complete example from my recent experiments with Express/Mongoose!",
            "html": "<p><a href=\"http://mongoosejs.com/\">Mongoose</a> queries traditionally follow the typical node.js callback pattern. Thanks to Mongoose 4.2+ and <a href=\"https://nodejs.org/en/docs/es6/\">ES6 Promises (available in node 4.x)</a> these can be rewritten using a much more pleasant (and powerful IMO) pattern using promises. By default, these query methods return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>.</p>\n\n<p><strong>Using callbacks</strong></p>\n\n<pre><code class=\"language-javascript\">someMongooseModel.find(someInput, function(err, results) {  \n  if (err) {\n    panic(err);\n    return;\n  }\n\n  /* No error. Proceed as planned. */\n  doSomething(results);\n});\n</code></pre>\n\n<p><strong>Using Promises</strong></p>\n\n<pre><code class=\"language-javascript\">someMongooseModel.find(someInput)  \n  .catch(panic)\n  .then(doSomething);\n</code></pre>\n\n<p>Making use of the actual native <code>Promise</code> that ES6 provides, requires very little setup thanks to Mongoose exposing <code>mongoose.Promise</code></p>\n\n<pre><code class=\"language-javascript\">// Set mongoose.Promise to any Promise implementation\nmongoose.Promise = Promise;  \n</code></pre>\n\n<p>Here is a snapshot from a less trivial example showing how clean/nice it can be making use of the Promise in the context of a simple RESTful CRUD API built w/ <a href=\"http://expressjs.com/\">Express</a>, <a href=\"https://www.mongodb.com/\">MongoDB</a>, and Mongoose.</p>\n\n<p><img src=\"/content/images/2015/10/ListMaster.png\" alt=\"RESTful CRUD API built w/ Express, MongoDB, and Mongoose.\" /></p>\n\n<p>Just a quick tip, that I've recently discovered. Hopefully I can get around to piecing together a more complete example from my recent experiments with Express/Mongoose!</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2015-10-24 13:37:44",
            "created_by": 1,
            "updated_at": "2017-01-17 14:10:47",
            "updated_by": 1,
            "published_at": "2015-10-24 13:57:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 49,
            "uuid": "410bc03a-deeb-448b-8bbb-1ab48f5c6db5",
            "title": "Testing React Components with AirBnb's Enzyme",
            "slug": "testing-react-components-with-enzyme",
            "markdown": "It can be hard enough breaking into testing in general. Getting started with testing React components can be extra tricky if you get off on the wrong foot. The [testing utilities provided by React](https://facebook.github.io/react/docs/test-utils.html) have some gnarly API methods such as [scryRenderedComponentsWithType()](https://facebook.github.io/react/docs/test-utils.html#scryrenderedcomponentswithtype) and leave you wrestling with fairly low level API.\n\n> Aside: WTF is `scry*`?! I can only imagine that it is a shortened version of \"sorcery\". I read the method `scryRenderedComponentsWithType` as _\"using great sourcery find the components which have been rendered of the given type\"_\n\n**There is a better way!!**\n\n...and it is [Enzyme](http://airbnb.io/enzyme/).\n\n> Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output.\n\n> Enzyme's API is meant to be intuitive and flexible by mimicking jQuery's API for DOM manipulation and traversal.\n\n> Enzyme is unopinionated regarding which test runner or assertion library you use [...]\n\nWith Enzyme you can write tests that look like\n\n```language-javascript\nimport React from 'react'\nimport expect from 'expect'\nimport {shallow} from 'enzyme'\n\ndescribe('Component: MyComponent', () => {\n  // This type of test is more useful/valuable than you might imagine :)...\n  it('renders without exploding', () => {\n    shallow(<MyComponent />)\n  })\n  \n  it('displays the things in a list of Thing components', () => {\n    const wrapper = shallow(\n      <MyComponent things={['1', '2', '3']} />\n    )\n    // Assert that there are 3 <Thing />'s within an <ul>\n    expect(\n      wrapper.find('ul').find('Thing').length\n    ).toEqual(3)\n  })\n\n  it('does \"that thing\" when you click its button', () => {\n    const thatThing = expect.createSpy()\n    const wrapper = shallow(\n      <MyComponent thatThing={thatThing} />\n    )\n    wrapper\n      .find('SomeButtonComponent')\n      .simulate('click')\n\n    expect(thatThing).toHaveBeenCalled()\n  })\n})\n```\n\nNotice that I'm using Enzyme's `shallow` here to achieve [shallow rendering in tests](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering). \n\n> Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.\n\nThis same test could use Enzyme's `mount` and would look the same, expect for it would fully mount, render/evaluate all children down the tree, and run through the [React Component lifecycle](https://facebook.github.io/react/docs/state-and-lifecycle.html).\n\n> Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs, or may require the full lifecycle in order to fully test the component (i.e., `componentDidMount` etc.)\n\n---\n\n### [Testing React Components with Enzyme [Playlist]](https://www.youtube.com/playlist?list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e)\n\nI put up a short video series on YouTube a little while back that walks through some basic setup and usage of Enzyme with React.\n\n<iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/videoseries?list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e\" frameborder=\"0\" allowfullscreen></iframe>\n\nThere is an accompanying GitHub repo https://github.com/erikthedeveloper/example-react-app-react-mail that walks through building a React app, illustrates interacting with a JSON API, and uses some testing via Enyzme.\n\n![](/content/images/2017/01/ReactMail-demo-gif-small.gif)\n\n___\n\nIf you're interested to poke around a more recent React project, I've been working on https://github.com/erikthedeveloper/react-calendar-components which is\n\n> An example React project that explores composing UI and behavior from multiple higher order components\n\nIf that excites you, head on over and check it out. I'm always open for feedback/suggestions. Ping me on Twitter [@erikthedev_](https://twitter.com/erikthedev_)!",
            "html": "<p>It can be hard enough breaking into testing in general. Getting started with testing React components can be extra tricky if you get off on the wrong foot. The <a href=\"https://facebook.github.io/react/docs/test-utils.html\">testing utilities provided by React</a> have some gnarly API methods such as <a href=\"https://facebook.github.io/react/docs/test-utils.html#scryrenderedcomponentswithtype\">scryRenderedComponentsWithType()</a> and leave you wrestling with fairly low level API.</p>\n\n<blockquote>\n  <p>Aside: WTF is <code>scry*</code>?! I can only imagine that it is a shortened version of \"sorcery\". I read the method <code>scryRenderedComponentsWithType</code> as <em>\"using great sourcery find the components which have been rendered of the given type\"</em></p>\n</blockquote>\n\n<p><strong>There is a better way!!</strong></p>\n\n<p>...and it is <a href=\"http://airbnb.io/enzyme/\">Enzyme</a>.</p>\n\n<blockquote>\n  <p>Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output.</p>\n  \n  <p>Enzyme's API is meant to be intuitive and flexible by mimicking jQuery's API for DOM manipulation and traversal.</p>\n  \n  <p>Enzyme is unopinionated regarding which test runner or assertion library you use [...]</p>\n</blockquote>\n\n<p>With Enzyme you can write tests that look like</p>\n\n<pre><code class=\"language-javascript\">import React from 'react'  \nimport expect from 'expect'  \nimport {shallow} from 'enzyme'\n\ndescribe('Component: MyComponent', () =&gt; {  \n  // This type of test is more useful/valuable than you might imagine :)...\n  it('renders without exploding', () =&gt; {\n    shallow(&lt;MyComponent /&gt;)\n  })\n\n  it('displays the things in a list of Thing components', () =&gt; {\n    const wrapper = shallow(\n      &lt;MyComponent things={['1', '2', '3']} /&gt;\n    )\n    // Assert that there are 3 &lt;Thing /&gt;'s within an &lt;ul&gt;\n    expect(\n      wrapper.find('ul').find('Thing').length\n    ).toEqual(3)\n  })\n\n  it('does \"that thing\" when you click its button', () =&gt; {\n    const thatThing = expect.createSpy()\n    const wrapper = shallow(\n      &lt;MyComponent thatThing={thatThing} /&gt;\n    )\n    wrapper\n      .find('SomeButtonComponent')\n      .simulate('click')\n\n    expect(thatThing).toHaveBeenCalled()\n  })\n})\n</code></pre>\n\n<p>Notice that I'm using Enzyme's <code>shallow</code> here to achieve <a href=\"https://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering in tests</a>. </p>\n\n<blockquote>\n  <p>Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.</p>\n</blockquote>\n\n<p>This same test could use Enzyme's <code>mount</code> and would look the same, expect for it would fully mount, render/evaluate all children down the tree, and run through the <a href=\"https://facebook.github.io/react/docs/state-and-lifecycle.html\">React Component lifecycle</a>.</p>\n\n<blockquote>\n  <p>Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs, or may require the full lifecycle in order to fully test the component (i.e., <code>componentDidMount</code> etc.)</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"testingreactcomponentswithenzymeplaylisthttpswwwyoutubecomplaylistlistplikcwtjj8_mdxwujhychfarcpnawio24e\"><a href=\"https://www.youtube.com/playlist?list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e\">Testing React Components with Enzyme [Playlist]</a></h3>\n\n<p>I put up a short video series on YouTube a little while back that walks through some basic setup and usage of Enzyme with React.</p>\n\n<iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/videoseries?list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>There is an accompanying GitHub repo <a href=\"https://github.com/erikthedeveloper/example-react-app-react-mail\">https://github.com/erikthedeveloper/example-react-app-react-mail</a> that walks through building a React app, illustrates interacting with a JSON API, and uses some testing via Enyzme.</p>\n\n<p><img src=\"/content/images/2017/01/ReactMail-demo-gif-small.gif\" alt=\"\" /></p>\n\n<hr />\n\n<p>If you're interested to poke around a more recent React project, I've been working on <a href=\"https://github.com/erikthedeveloper/react-calendar-components\">https://github.com/erikthedeveloper/react-calendar-components</a> which is</p>\n\n<blockquote>\n  <p>An example React project that explores composing UI and behavior from multiple higher order components</p>\n</blockquote>\n\n<p>If that excites you, head on over and check it out. I'm always open for feedback/suggestions. Ping me on Twitter <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a>!</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-17 13:08:57",
            "created_by": 1,
            "updated_at": "2017-01-17 14:41:40",
            "updated_by": 1,
            "published_at": "2017-01-17 13:59:10",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 50,
            "uuid": "0d09c362-007f-4f97-af63-21fea17a4c9a",
            "title": "React 101: Condensed [Medium + Slides]",
            "slug": "react-101-medium-and-slides",
            "markdown": "I put together these [React 101 slides](http://slides.com/erikaybar/react-101) for a presentation I gave at our local Javascript Meetup.\n\n<iframe src=\"//slides.com/erikaybar/react-101/embed?style=light\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n_*I was super impressed with https://slides.com/. This was my first time using it and putting together that presentation was a pleasure!_\n\n...and ended up writing an accompanying Medium post [React 101: Condensed](https://medium.com/@_erikaybar/one-developers-condensed-intro-to-react-68cbf078f992#.8w4w57qt4)\n\nThat is all :) If you find any of this interesting or useful, feel free to comment below and/or ping me on Twitter [@erikthedev_](https://twitter.com/erikthedev_)!",
            "html": "<p>I put together these <a href=\"http://slides.com/erikaybar/react-101\">React 101 slides</a> for a presentation I gave at our local Javascript Meetup.</p>\n\n<iframe src=\"//slides.com/erikaybar/react-101/embed?style=light\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<p><em>*I was super impressed with <a href=\"https://slides.com/\">https://slides.com/</a>. This was my first time using it and putting together that presentation was a pleasure!</em></p>\n\n<p>...and ended up writing an accompanying Medium post <a href=\"https://medium.com/@_erikaybar/one-developers-condensed-intro-to-react-68cbf078f992#.8w4w57qt4\">React 101: Condensed</a></p>\n\n<p>That is all :) If you find any of this interesting or useful, feel free to comment below and/or ping me on Twitter <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a>!</p>",
            "image": "https://cdn-images-1.medium.com/max/2000/1*VQBnne3zsIe1RA0lX0A_sA.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-17 14:00:56",
            "created_by": 1,
            "updated_at": "2017-01-17 14:12:16",
            "updated_by": 1,
            "published_at": "2016-04-29 15:43:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 51,
            "uuid": "451a8d74-9aae-4270-b794-dd403bc9ed14",
            "title": "Thoughts on Working Remotely",
            "slug": "thoughts-on-working-remotely",
            "markdown": "I've been working 100% remotely for ~2.5 years now. I was _sort of_ remote for a while before that. I shared some thoughts over on Medium about my experiences so far:\n\n[Fighting the “Remote” in Remote Working](https://medium.com/@_erikaybar/fighting-the-remote-in-remote-working-84551c816cf2#.8la5uhcem)\n\nThis is a topic that I have many thoughts on...\n\n```language-javascript\n// TODO: Write more about remote work\n```",
            "html": "<p>I've been working 100% remotely for ~2.5 years now. I was <em>sort of</em> remote for a while before that. I shared some thoughts over on Medium about my experiences so far:</p>\n\n<p><a href=\"https://medium.com/@_erikaybar/fighting-the-remote-in-remote-working-84551c816cf2#.8la5uhcem\">Fighting the “Remote” in Remote Working</a></p>\n\n<p>This is a topic that I have many thoughts on...</p>\n\n<pre><code class=\"language-javascript\">// TODO: Write more about remote work\n</code></pre>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-17 14:13:57",
            "created_by": 1,
            "updated_at": "2017-01-17 14:23:56",
            "updated_by": 1,
            "published_at": "2016-11-29 16:43:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 55,
            "uuid": "f6fbd172-578a-45ee-b567-07a310e2821c",
            "title": "Refactoring React - Extracting Layout Components",
            "slug": "refactoring-react-extracting-layout-components",
            "markdown": "With React, abstraction doesn't have to be limited to separating [presentational and container components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.b5cq8vczy) or [lifting up state](https://facebook.github.io/react/docs/lifting-state-up.html). Often, extracting a simple layout component can serve as a good abstraction to either clean up a bloated component or result in a generalized, reusable piece of UI. \n\nA good sign that you might benefit from extracting a layout component is a bloated `render` method with many levels of nesting. Others might be a lengthy component definition or duplicated/verbose HTML patterns throughout your components. It's easy for your `render` method to creep upwards in size as you can easily dump ~~HTML~~ [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) into them and be on your merry way. Extracting layout components can tame bloated React components and help define clearer boundaries within your UI.\n\nWhen developing a large or complex component, I find it's useful to default to duplication and less abstraction, keeping it all within a single component to begin with. I prefer to avoid making assumptions and drawing boundaries too early on. This frees me up to experiment and revisit refactoring and abstraction later on in the process. Once I've been through a few iterations of a component, I usually have a pretty good feel of where to start drawing more concrete boundaries.\n\n---\n\nA layout component could be something as simple as a `Section` component that wraps the given content with some container `div`s and applies some styles/classes.\n\nAnother example I find useful is a `Button` component that takes care of applying styling related classes and DOM attributes, while exposing a more friendly API via `props`. Here is an example of what converting the [button from Bootstrap 4](https://v4-alpha.getbootstrap.com/components/buttons/) into a React component might look like.\n\nIt could apply all the Bootstrap-specific CSS classes, HTML attributes, and even [appropriately render a `<button>` OR a `<a>` ](https://v4-alpha.getbootstrap.com/components/buttons/#button-tags) to enable using `href` with the same button component. It could allow usages such as:\n\n```language-javascript\nconst SomeButtons = ({someAction}) => (\n  <div>\n    <Button onClick={someAction}>Click Me</Button>\n\n    <Button href=\"some/url\" style=\"info\">A Link!</Button>\n\n    <Button \n      onClick={someAction} \n      style=\"danger\"\n      size=\"lg\" \n      outline\n      block\n      disabled\n    >\n      DO NOT CLICK!!\n    </Button>\n  </div>\n)\n```\n\nThat could enable any combination of the [supported Bootstrap button examples](https://v4-alpha.getbootstrap.com/components/buttons/#examples) via this React component\n\n![Bootstrapp 4 button examples](/content/images/2017/01/Buttons_-_Bootstrap.png)\n\nExample implementation _*100% untested :)_\n\n```language-javascript\n// some/path/components/Button.js\nimport React, { PropTypes } from 'react';\nimport classnames from 'classnames';\n\n/**\n * A button component (that also supports href)!\n *  Based on Bootstrap 4 button\n *  100% untested :)\n * @see https://v4-alpha.getbootstrap.com/components/buttons/\n */\nconst Button = (props) => {\n\n  const btnClasses = classnames(\n    'btn',\n    {\n      `btn-${props.style}`: !props.outline,\n      `btn-outline-${props.style}`: props.outline,\n      `btn-${props.size}`: props.size,\n      'btn-block': props.block,\n    }\n  )\n\n  // If we are disabled, lock it down!!\n  const onClick = props.disabled\n    ? (event) => {event.preventDefault()}\n    : props.onClick\n\n  // Only pass through props that aren't explicitly used by Button\n  // @see https://facebook.github.io/react/warnings/unknown-prop.html\n  const {\n    type, style, size, outline, block, disabled, href, onClick,\n    ...passableProps\n  };\n\n  // If props.href is present, render a <a />\n  if (props.href) {\n    const aClasses = classnames(\n      btnClasses,\n      {\n        'disabled': props.disabled, \n      }\n    )\n\n    return (\n      <a\n        {...passableProps}\n        href={props.href}\n        className={aClasses}\n        role=\"button\"\n        aria-disabled={props.disabled}\n        onClick={onClick}\n      >\n        {props.children}\n      </a>\n    )\n  }\n\n  return (\n    <button\n      {...passableProps}\n      className={btnClasses}\n      type={props.type}\n      disabled={props.disabled}\n      onClick={onClick}\n    >\n     {props.children}\n    </button>\n  )\n}\n\nButton.propTypes = {\n  // Bootstrap specific props\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n  style: PropTypes.oneOf(['primary', 'secondary', 'success', 'info', 'warning', 'danger']),\n  size: PropTypes.oneOf(['sm', 'lg']),\n  outline: PropTypes.bool,\n  block: PropTypes.bool,\n  disabled: PropTypes.bool,\n\n  // Enable \"link buttons\"!\n  href: PropTypes.string,\n\n  // Explicitly specify other used props\n  onClick: PropTypes.func,\n}\n\n// Provide sensible defaults\nButton.defaultProps = {\n  type: 'button',\n  style: 'primary',\n}\n```\n\n---\n\n## Example by Video\n\nIn this video, I walk through extracting a `MonthGrid` component out of this React `Calendar` component that so far, I had kept within a single component/render method. _*There is some static feedback from `0:40` - `1:10`. It does go away :)_\n\n\n<iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/qGbfD_oXXn4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n### Breakdown Components Visually\n\nWhat I begin with, is a single `Calendar` component that consists of all of this:\n![React Calendar Component](/content/images/2017/01/Skitch---All-As-Calendar-3.png)\n\nUltimately breaking it down into smaller pieces of UI such as:\n![Breaking down UI into smaller components](/content/images/2017/01/Skitch---Component-Breakdown-1.png)\n\n### Show Me The Code!\n\nTo get a feel of what I mean by a bloated render function, take a look at this **before**. Notice the giant blob which is `.MonthGrid` and everything nested under it.\n\n```language-javascript\n// import ...\n\nclass Calendar extends React.Component {\n  \n  // ...\n\n  render() {\n    const {currentMonth} = this.props;\n\n    const visibleDates = calendarMonthDates(currentMonth);\n\n    return (\n      <div className=\"Calendar\">\n\n        {/* ... */}\n\n        <div className=\"MonthGrid\">\n          {chunk(visibleDates, 7).map((weekChunk, i) => (\n            <div className=\"MonthGrid__row\" key={i}>\n              {weekChunk.map((date) => (\n                <div className=\"MonthGrid__item\" key={date.getMonth() + date.getDate()}>\n                  <div className=\"MonthGrid__item__height\" />\n                  <div className=\"MonthGrid__item__content\">\n\n                    <div className={this.getDayClassName(date)}>\n                      <div className=\"Day__date\">\n                        {date.getDate()}\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\n```\n\n\nCleaning this up a bit, I end up extracting 2 components `Day`, and `MonthGrid`. `MonthGrid` handles all of the layout-specific logic and DOM, while `Day` exposes an API that we can build on (as seen here: https://github.com/erikthedeveloper/react-calendar-components).\n\n\n```language-javascript\n// import ...\nimport MonthGrid from '../MonthGrid';\nimport Day from '../Day';\n\nclass Calendar extends React.Component {\n\n  // ...\n\n  render() {\n    const {currentMonth} = this.props;\n\n    const visibleDates = calendarMonthDates(currentMonth);\n\n    return (\n      <div className=\"Calendar\">\n\n        {/* ... */}\n\n        <MonthGrid>\n          {visibleDates.map((date) => (\n            <Day date={date} key={date.toString()} />\n          ))}\n        </MonthGrid>\n\n      </div>\n    )\n  }\n}\n\n```\n\n---\n\nIf you are interested in poking around some more React code, I've got this example project https://github.com/erikthedeveloper/react-calendar-components along with demo via React Storybook [https://erikthedeveloper.github.io/react-calendar-components/](https://erikthedeveloper.github.io/react-calendar-components/?selectedKind=Composing%20Calendar&selectedStory=Select%20Range%20%2B%20Day%20Indicators&full=0&down=0&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel). I've been exploring composing UI and behavior from multiple higher order components. \n\n---\n\nIf you found this interesting and/or useful, let me know below or ping me on Twitter [@erikthedev_](https://twitter.com/erikthedev_). I'd love to hear what approaches/libraries others are finding useful!",
            "html": "<p>With React, abstraction doesn't have to be limited to separating <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.b5cq8vczy\">presentational and container components</a> or <a href=\"https://facebook.github.io/react/docs/lifting-state-up.html\">lifting up state</a>. Often, extracting a simple layout component can serve as a good abstraction to either clean up a bloated component or result in a generalized, reusable piece of UI. </p>\n\n<p>A good sign that you might benefit from extracting a layout component is a bloated <code>render</code> method with many levels of nesting. Others might be a lengthy component definition or duplicated/verbose HTML patterns throughout your components. It's easy for your <code>render</code> method to creep upwards in size as you can easily dump <del>HTML</del> <a href=\"https://facebook.github.io/react/docs/introducing-jsx.html\">JSX</a> into them and be on your merry way. Extracting layout components can tame bloated React components and help define clearer boundaries within your UI.</p>\n\n<p>When developing a large or complex component, I find it's useful to default to duplication and less abstraction, keeping it all within a single component to begin with. I prefer to avoid making assumptions and drawing boundaries too early on. This frees me up to experiment and revisit refactoring and abstraction later on in the process. Once I've been through a few iterations of a component, I usually have a pretty good feel of where to start drawing more concrete boundaries.</p>\n\n<hr />\n\n<p>A layout component could be something as simple as a <code>Section</code> component that wraps the given content with some container <code>div</code>s and applies some styles/classes.</p>\n\n<p>Another example I find useful is a <code>Button</code> component that takes care of applying styling related classes and DOM attributes, while exposing a more friendly API via <code>props</code>. Here is an example of what converting the <a href=\"https://v4-alpha.getbootstrap.com/components/buttons/\">button from Bootstrap 4</a> into a React component might look like.</p>\n\n<p>It could apply all the Bootstrap-specific CSS classes, HTML attributes, and even <a href=\"https://v4-alpha.getbootstrap.com/components/buttons/#button-tags\">appropriately render a <code>&lt;button&gt;</code> OR a <code>&lt;a&gt;</code> </a> to enable using <code>href</code> with the same button component. It could allow usages such as:</p>\n\n<pre><code class=\"language-javascript\">const SomeButtons = ({someAction}) =&gt; (  \n  &lt;div&gt;\n    &lt;Button onClick={someAction}&gt;Click Me&lt;/Button&gt;\n\n    &lt;Button href=\"some/url\" style=\"info\"&gt;A Link!&lt;/Button&gt;\n\n    &lt;Button \n      onClick={someAction} \n      style=\"danger\"\n      size=\"lg\" \n      outline\n      block\n      disabled\n    &gt;\n      DO NOT CLICK!!\n    &lt;/Button&gt;\n  &lt;/div&gt;\n)\n</code></pre>\n\n<p>That could enable any combination of the <a href=\"https://v4-alpha.getbootstrap.com/components/buttons/#examples\">supported Bootstrap button examples</a> via this React component</p>\n\n<p><img src=\"/content/images/2017/01/Buttons_-_Bootstrap.png\" alt=\"Bootstrapp 4 button examples\" /></p>\n\n<p>Example implementation <em>*100% untested :)</em></p>\n\n<pre><code class=\"language-javascript\">// some/path/components/Button.js\nimport React, { PropTypes } from 'react';  \nimport classnames from 'classnames';\n\n/**\n * A button component (that also supports href)!\n *  Based on Bootstrap 4 button\n *  100% untested :)\n * @see https://v4-alpha.getbootstrap.com/components/buttons/\n */\nconst Button = (props) =&gt; {\n\n  const btnClasses = classnames(\n    'btn',\n    {\n      `btn-${props.style}`: !props.outline,\n      `btn-outline-${props.style}`: props.outline,\n      `btn-${props.size}`: props.size,\n      'btn-block': props.block,\n    }\n  )\n\n  // If we are disabled, lock it down!!\n  const onClick = props.disabled\n    ? (event) =&gt; {event.preventDefault()}\n    : props.onClick\n\n  // Only pass through props that aren't explicitly used by Button\n  // @see https://facebook.github.io/react/warnings/unknown-prop.html\n  const {\n    type, style, size, outline, block, disabled, href, onClick,\n    ...passableProps\n  };\n\n  // If props.href is present, render a &lt;a /&gt;\n  if (props.href) {\n    const aClasses = classnames(\n      btnClasses,\n      {\n        'disabled': props.disabled, \n      }\n    )\n\n    return (\n      &lt;a\n        {...passableProps}\n        href={props.href}\n        className={aClasses}\n        role=\"button\"\n        aria-disabled={props.disabled}\n        onClick={onClick}\n      &gt;\n        {props.children}\n      &lt;/a&gt;\n    )\n  }\n\n  return (\n    &lt;button\n      {...passableProps}\n      className={btnClasses}\n      type={props.type}\n      disabled={props.disabled}\n      onClick={onClick}\n    &gt;\n     {props.children}\n    &lt;/button&gt;\n  )\n}\n\nButton.propTypes = {  \n  // Bootstrap specific props\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n  style: PropTypes.oneOf(['primary', 'secondary', 'success', 'info', 'warning', 'danger']),\n  size: PropTypes.oneOf(['sm', 'lg']),\n  outline: PropTypes.bool,\n  block: PropTypes.bool,\n  disabled: PropTypes.bool,\n\n  // Enable \"link buttons\"!\n  href: PropTypes.string,\n\n  // Explicitly specify other used props\n  onClick: PropTypes.func,\n}\n\n// Provide sensible defaults\nButton.defaultProps = {  \n  type: 'button',\n  style: 'primary',\n}\n</code></pre>\n\n<hr />\n\n<h2 id=\"examplebyvideo\">Example by Video</h2>\n\n<p>In this video, I walk through extracting a <code>MonthGrid</code> component out of this React <code>Calendar</code> component that so far, I had kept within a single component/render method. <em>*There is some static feedback from <code>0:40</code> - <code>1:10</code>. It does go away :)</em></p>\n\n<iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/qGbfD_oXXn4?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h3 id=\"breakdowncomponentsvisually\">Breakdown Components Visually</h3>\n\n<p>What I begin with, is a single <code>Calendar</code> component that consists of all of this: <br />\n<img src=\"/content/images/2017/01/Skitch---All-As-Calendar-3.png\" alt=\"React Calendar Component\" /></p>\n\n<p>Ultimately breaking it down into smaller pieces of UI such as: <br />\n<img src=\"/content/images/2017/01/Skitch---Component-Breakdown-1.png\" alt=\"Breaking down UI into smaller components\" /></p>\n\n<h3 id=\"showmethecode\">Show Me The Code!</h3>\n\n<p>To get a feel of what I mean by a bloated render function, take a look at this <strong>before</strong>. Notice the giant blob which is <code>.MonthGrid</code> and everything nested under it.</p>\n\n<pre><code class=\"language-javascript\">// import ...\n\nclass Calendar extends React.Component {\n\n  // ...\n\n  render() {\n    const {currentMonth} = this.props;\n\n    const visibleDates = calendarMonthDates(currentMonth);\n\n    return (\n      &lt;div className=\"Calendar\"&gt;\n\n        {/* ... */}\n\n        &lt;div className=\"MonthGrid\"&gt;\n          {chunk(visibleDates, 7).map((weekChunk, i) =&gt; (\n            &lt;div className=\"MonthGrid__row\" key={i}&gt;\n              {weekChunk.map((date) =&gt; (\n                &lt;div className=\"MonthGrid__item\" key={date.getMonth() + date.getDate()}&gt;\n                  &lt;div className=\"MonthGrid__item__height\" /&gt;\n                  &lt;div className=\"MonthGrid__item__content\"&gt;\n\n                    &lt;div className={this.getDayClassName(date)}&gt;\n                      &lt;div className=\"Day__date\"&gt;\n                        {date.getDate()}\n                      &lt;/div&gt;\n                    &lt;/div&gt;\n\n                  &lt;/div&gt;\n                &lt;/div&gt;\n              ))}\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre>\n\n<p>Cleaning this up a bit, I end up extracting 2 components <code>Day</code>, and <code>MonthGrid</code>. <code>MonthGrid</code> handles all of the layout-specific logic and DOM, while <code>Day</code> exposes an API that we can build on (as seen here: <a href=\"https://github.com/erikthedeveloper/react-calendar-components\">https://github.com/erikthedeveloper/react-calendar-components</a>).</p>\n\n<pre><code class=\"language-javascript\">// import ...\nimport MonthGrid from '../MonthGrid';  \nimport Day from '../Day';\n\nclass Calendar extends React.Component {\n\n  // ...\n\n  render() {\n    const {currentMonth} = this.props;\n\n    const visibleDates = calendarMonthDates(currentMonth);\n\n    return (\n      &lt;div className=\"Calendar\"&gt;\n\n        {/* ... */}\n\n        &lt;MonthGrid&gt;\n          {visibleDates.map((date) =&gt; (\n            &lt;Day date={date} key={date.toString()} /&gt;\n          ))}\n        &lt;/MonthGrid&gt;\n\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre>\n\n<hr />\n\n<p>If you are interested in poking around some more React code, I've got this example project <a href=\"https://github.com/erikthedeveloper/react-calendar-components\">https://github.com/erikthedeveloper/react-calendar-components</a> along with demo via React Storybook <a href=\"https://erikthedeveloper.github.io/react-calendar-components/?selectedKind=Composing%20Calendar&amp;selectedStory=Select%20Range%20%2B%20Day%20Indicators&amp;full=0&amp;down=0&amp;left=1&amp;panelRight=0&amp;downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel\">https://erikthedeveloper.github.io/react-calendar-components/</a>. I've been exploring composing UI and behavior from multiple higher order components. </p>\n\n<hr />\n\n<p>If you found this interesting and/or useful, let me know below or ping me on Twitter <a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a>. I'd love to hear what approaches/libraries others are finding useful!</p>",
            "image": "https://cdn-images-1.medium.com/max/800/1*vSu9VAcm9P0-W-CF_5Oh8Q.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-19 20:37:52",
            "created_by": 1,
            "updated_at": "2017-01-22 15:18:38",
            "updated_by": 1,
            "published_at": "2017-01-20 12:39:00",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 56,
            "uuid": "3b9b090e-feb8-415b-8a22-f979b017a6de",
            "title": "Source Maps with webpack in Chrome",
            "slug": "webpack-source-maps-in-chrome",
            "markdown": "Developing without source maps can be painful. You just shouldn't have to endure that sort of thing. To top that, there isn't much worse that having to sift through minified code and guess at what is causing your mysterious errors on production. Do yourself and your team a favor! Turn those [source maps on for development](https://webpack.js.org/guides/development/#source-maps) and make sure you have them [enabled in production](https://webpack.js.org/guides/production-build/#source-maps).\n\nIf you are running into troubles with getting [source maps working with Webpack](http://survivejs.com/webpack/building-with-webpack/enabling-sourcemaps/) (especially if you're experience [problems with source maps in Chrome](https://github.com/webpack/webpack/issues/2145)), this is what has been working for me. This is one of those things that has tripped me up several times _and counting_ so I figure I better get it out there on the Internet so that others (and myself) can stumble onto it in a moment of weakness.\n\nShort version:\n\n- For development, I set `devtool` to `'eval-source-map'`\n- For production, I set `devtool` to `'source-map'`\n- Do **NOT** provide CLI flags such as `-d` or `-p`\n\nRun command such as:\n```language-bash\nwebpack\n```\n\nWith a `webpack.config.js` such as:\n```language-javascript\nconst config = {\n  // ...\n  devtool: 'source-map',\n  // ...\n}\n```\n\n---\n\nLessons learned:\n\n## 1) Warning: Mixing and Matching webpack CLI flags and webpack configs will result in fire.\n\nMake sure you **either** \n\n- Provide one of the [CLI shortcut flags](https://webpack.js.org/api/cli/#shortcuts) `-p` or `-d` for production and development respectively OR\n- Set a [valid `devtool` option](https://webpack.js.org/configuration/devtool/#devtool) on your `config.devtool`.\n\nIf you attempt to do both, then you'll end up like me:\n\n> Fool me once, shame on you\n\n![](/content/images/2017/01/_PAT-4667__Massage_the_Build_by_erikthedeveloper_-_Pull_Request__553_-_practicegenius_my_patientrewardshub_com-1.png)\n\n> Fool me twice, shame on me! *Really, I should be ashamed! I better make a note about it this time...*\n\n![](/content/images/2017/01/_PAT-4789__Source_Maps__dev___prod__by_erikthedeveloper_-_Pull_Request__598_-_practicegenius_my_patientrewardshub_com.png)\n\n## 2) Getting source maps to work in Chrome\n\nThere are a number of open GitHub issues surrounding this. If you want to dive into that and find out more, here is a good starting point: [Source Maps don't work on Chrome #2145](https://github.com/webpack/webpack/issues/2145)\n\nThis is a tricky one, that I've somehow had to wrestle a few different times. Apparently, there are some issues with Chrome and source maps. I can't say for sure how specific this is to webpack, but here is what worked for me:\n\n_REMEMBER: DO NOT MIX AND MATCH CLI FLAGS WITH CONFIG FOR `devtool` THE CLI FLAGS WILL WIN_\n\n- For development, I set `devtool` to `'eval-source-map'`\n- For production, I set `devtool` to `'source-map'`\n\nExample:\n\n```language-javascript\nconst config = {\n  // ...\n  devtool: 'source-map',\n  // ...\n}\n```\n\n---\n\n## Let's Do Some Console Debugging!\n\nHere is a look at some console debugging output with various webpack source map settings. Using this `index.js` importing a few dummy modules. Notice that the `console.log` statements are logging out the expected `filename.js:line-number`.\n\n_This is using [webpack 2.2.0](https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144#.ksw9rxhoy), but if I recall correctly these same issues were present when using 1.x and this is more of an issue with Chrome than a webpack-specific issue._\n\n![](/content/images/2017/01/webpack-source-map-example-test.png)\n\n---\n\n**👎 Naked: Using `webpack` (with no `devtool` setting or CLI flag)**\n\nHave fun debugging raw `bundle.js` :)\n\n![](/content/images/2017/01/Document.png)\n\n---\n\n**👎 *Okay:* Using `webpack -d` (the [development CLI shortcut](https://webpack.js.org/api/cli/#shortcuts))**\n\nFilenames are there, but line numbers don't match. This trivial example doesn't look so bad, but on a larger project this becomes much more of an issue.\n\n![](/content/images/2017/01/Document-1.png)\n\n---\n\n**👍 *Better:* Using `webpack` with `devtool` set to `eval-source-map` (for development)**\n\nAccurate filenames and line numbers for the line in question (not all the way down the stack trace)\n\n![](/content/images/2017/01/Document-3.png)\n\n---\n\n**👍 *Best:* Using `webpack` with `devtool` set to `source-map` (for production)**\n\nBeautiful (and correct) filenames and line numbers all the way down the stack trace.\n\n![](/content/images/2017/01/Document-2.png)\n\n---\n\nI experimented with a few of the other [devtool options](https://webpack.js.org/configuration/devtool/#devtool), and these seem to be the best options for Chrome for now. If you've come across something that works better for you, I'd be interested to hear about it!",
            "html": "<p>Developing without source maps can be painful. You just shouldn't have to endure that sort of thing. To top that, there isn't much worse that having to sift through minified code and guess at what is causing your mysterious errors on production. Do yourself and your team a favor! Turn those <a href=\"https://webpack.js.org/guides/development/#source-maps\">source maps on for development</a> and make sure you have them <a href=\"https://webpack.js.org/guides/production-build/#source-maps\">enabled in production</a>.</p>\n\n<p>If you are running into troubles with getting <a href=\"http://survivejs.com/webpack/building-with-webpack/enabling-sourcemaps/\">source maps working with Webpack</a> (especially if you're experience <a href=\"https://github.com/webpack/webpack/issues/2145\">problems with source maps in Chrome</a>), this is what has been working for me. This is one of those things that has tripped me up several times <em>and counting</em> so I figure I better get it out there on the Internet so that others (and myself) can stumble onto it in a moment of weakness.</p>\n\n<p>Short version:</p>\n\n<ul>\n<li>For development, I set <code>devtool</code> to <code>'eval-source-map'</code></li>\n<li>For production, I set <code>devtool</code> to <code>'source-map'</code></li>\n<li>Do <strong>NOT</strong> provide CLI flags such as <code>-d</code> or <code>-p</code></li>\n</ul>\n\n<p>Run command such as:  </p>\n\n<pre><code class=\"language-bash\">webpack  \n</code></pre>\n\n<p>With a <code>webpack.config.js</code> such as:  </p>\n\n<pre><code class=\"language-javascript\">const config = {  \n  // ...\n  devtool: 'source-map',\n  // ...\n}\n</code></pre>\n\n<hr />\n\n<p>Lessons learned:</p>\n\n<h2 id=\"1warningmixingandmatchingwebpackcliflagsandwebpackconfigswillresultinfire\">1) Warning: Mixing and Matching webpack CLI flags and webpack configs will result in fire.</h2>\n\n<p>Make sure you <strong>either</strong> </p>\n\n<ul>\n<li>Provide one of the <a href=\"https://webpack.js.org/api/cli/#shortcuts\">CLI shortcut flags</a> <code>-p</code> or <code>-d</code> for production and development respectively OR</li>\n<li>Set a <a href=\"https://webpack.js.org/configuration/devtool/#devtool\">valid <code>devtool</code> option</a> on your <code>config.devtool</code>.</li>\n</ul>\n\n<p>If you attempt to do both, then you'll end up like me:</p>\n\n<blockquote>\n  <p>Fool me once, shame on you</p>\n</blockquote>\n\n<p><img src=\"/content/images/2017/01/_PAT-4667__Massage_the_Build_by_erikthedeveloper_-_Pull_Request__553_-_practicegenius_my_patientrewardshub_com-1.png\" alt=\"\" /></p>\n\n<blockquote>\n  <p>Fool me twice, shame on me! <em>Really, I should be ashamed! I better make a note about it this time...</em></p>\n</blockquote>\n\n<p><img src=\"/content/images/2017/01/_PAT-4789__Source_Maps__dev___prod__by_erikthedeveloper_-_Pull_Request__598_-_practicegenius_my_patientrewardshub_com.png\" alt=\"\" /></p>\n\n<h2 id=\"2gettingsourcemapstoworkinchrome\">2) Getting source maps to work in Chrome</h2>\n\n<p>There are a number of open GitHub issues surrounding this. If you want to dive into that and find out more, here is a good starting point: <a href=\"https://github.com/webpack/webpack/issues/2145\">Source Maps don't work on Chrome #2145</a></p>\n\n<p>This is a tricky one, that I've somehow had to wrestle a few different times. Apparently, there are some issues with Chrome and source maps. I can't say for sure how specific this is to webpack, but here is what worked for me:</p>\n\n<p><em>REMEMBER: DO NOT MIX AND MATCH CLI FLAGS WITH CONFIG FOR <code>devtool</code> THE CLI FLAGS WILL WIN</em></p>\n\n<ul>\n<li>For development, I set <code>devtool</code> to <code>'eval-source-map'</code></li>\n<li>For production, I set <code>devtool</code> to <code>'source-map'</code></li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code class=\"language-javascript\">const config = {  \n  // ...\n  devtool: 'source-map',\n  // ...\n}\n</code></pre>\n\n<hr />\n\n<h2 id=\"letsdosomeconsoledebugging\">Let's Do Some Console Debugging!</h2>\n\n<p>Here is a look at some console debugging output with various webpack source map settings. Using this <code>index.js</code> importing a few dummy modules. Notice that the <code>console.log</code> statements are logging out the expected <code>filename.js:line-number</code>.</p>\n\n<p><em>This is using <a href=\"https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144#.ksw9rxhoy\">webpack 2.2.0</a>, but if I recall correctly these same issues were present when using 1.x and this is more of an issue with Chrome than a webpack-specific issue.</em></p>\n\n<p><img src=\"/content/images/2017/01/webpack-source-map-example-test.png\" alt=\"\" /></p>\n\n<hr />\n\n<p><strong>👎 Naked: Using <code>webpack</code> (with no <code>devtool</code> setting or CLI flag)</strong></p>\n\n<p>Have fun debugging raw <code>bundle.js</code> :)</p>\n\n<p><img src=\"/content/images/2017/01/Document.png\" alt=\"\" /></p>\n\n<hr />\n\n<p><strong>👎 <em>Okay:</em> Using <code>webpack -d</code> (the <a href=\"https://webpack.js.org/api/cli/#shortcuts\">development CLI shortcut</a>)</strong></p>\n\n<p>Filenames are there, but line numbers don't match. This trivial example doesn't look so bad, but on a larger project this becomes much more of an issue.</p>\n\n<p><img src=\"/content/images/2017/01/Document-1.png\" alt=\"\" /></p>\n\n<hr />\n\n<p><strong>👍 <em>Better:</em> Using <code>webpack</code> with <code>devtool</code> set to <code>eval-source-map</code> (for development)</strong></p>\n\n<p>Accurate filenames and line numbers for the line in question (not all the way down the stack trace)</p>\n\n<p><img src=\"/content/images/2017/01/Document-3.png\" alt=\"\" /></p>\n\n<hr />\n\n<p><strong>👍 <em>Best:</em> Using <code>webpack</code> with <code>devtool</code> set to <code>source-map</code> (for production)</strong></p>\n\n<p>Beautiful (and correct) filenames and line numbers all the way down the stack trace.</p>\n\n<p><img src=\"/content/images/2017/01/Document-2.png\" alt=\"\" /></p>\n\n<hr />\n\n<p>I experimented with a few of the other <a href=\"https://webpack.js.org/configuration/devtool/#devtool\">devtool options</a>, and these seem to be the best options for Chrome for now. If you've come across something that works better for you, I'd be interested to hear about it!</p>",
            "image": "/content/images/2017/01/webpack-logo-on-white-bg.jpg",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-21 14:23:13",
            "created_by": 1,
            "updated_at": "2017-01-23 15:12:37",
            "updated_by": 1,
            "published_at": "2017-01-23 15:12:37",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 58,
            "uuid": "c306df0e-5e0d-4cc9-91d5-172655ddab71",
            "title": "Git Tip: Deleting Old Local Branches",
            "slug": "git-deleting-old-local-branches",
            "markdown": "> How can I clean up all these old local git branches?\n\nStale/unused git branches build up rather quickly, and this is something that has resurfaced a number of times in our team chat at work. I figure it's time I make a note of it here for others (and myself) to reference in the future!\n\nThis is how dirty my branches were this morning:\n```bash\n> git branch | wc -l\n205\n\n# *magic*\n\n> git branch | wc -l\n56\n```\n\n**For those of you looking for that magic one liner!**\n\n*First, be sure to prune your remote branches*\n```bash\ngit remote prune origin \n```\n*and then ✨🎩🐇*\n```bash\ngit branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d\n```\n\n---\n\nNow let's walk through it a bit...\n\n## 0) Prune remote branches\n\n```bash\ngit remote prune origin\n```\n\n[Read more about `git remote prune` here](https://git-scm.com/docs/git-remote#git-remote-empruneem)\n> Deletes all stale remote-tracking branches under <name>. These stale branches have already been removed from the remote repository referenced by <name>, but are still locally available in \"remotes/<name>\".\n\n## 1) List local git branches\n\n[`git branch -vv` will list all local branches along with some additional information](http://) such as their related upstream/remote branch and latest commit message\n\n```bash\n> git branch -vv\n#...\nfeature/some-local-only-feature cba8191 Some commit message\nfeature/some-old-feature cba2191 [origin/feature/some-old-feature: gone] Some commit message about some old feature\nfeature/some-active-feature wba2191 [origin/feature/some-active-feature: ahead 40, behind 10] Some active feature branch\n#...\n```\n\n## 2) Filter git branches down to only those with deleted upstream/remote counterparts\n\nNext, we pipe the output from `git branch -vv` into `grep 'origin/.*: gone]'`. This filters our list down to only lines that match the regex `origin/.*: gone]` leaving us with\n\n```bash\n> git branch -vv | grep 'origin/.*: gone]'\n#...\nfeature/some-old-feature cba2191 [origin/feature/some-old-feature: gone] Some commit message about some old feature\n#...\n```\n\nRead more about [using regular expressions with `grep` here](https://www.cyberciti.biz/faq/grep-regular-expressions/).\n\n\n>#### Random, useful `grep` tip : Invert Match\nI [just came across](http://stackoverflow.com/a/10411661/2644281) `grep`'s `-v` (short for `--invert-match`) `grep -v 'some pattern'` that filters lines down to those **not** matching any of the specified patterns. \n\n## 3) Pluck out branch names from output\n\nPiping that into `awk '{print $1}'` cleans up our output so we end up with a branch name per line.\n\n```bash\n> git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}'\n#...\nfeature/some-old-feature\n#...\n```\nThis is because `$1` translates into the 1st item in each line (items being separated by space(s)) which is the branch name. Example:\n\n* `$1`: `feature/some-old-feature`\n* `$2`: `cba2191`\n* `$3`: `[origin/feature/some-old-feature:`\n* `$4`: `gone]`\n* `$5`: `First`\n* `$6`: `words`\n* `$7`: `in_commit_message...`\n* ...\n\n## 4a) Delete the branches!\n\nNext, we pipe our filtered down, cleaned up git branches list into [`git branch -d` (short for `--delete`)](https://git-scm.com/docs/git-branch#git-branch---delete) and say our final goodbyes.\n\n```bash\n> git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d\n```\n\nThe `xargs` portion results in the equivalent of manually typing out each of the branch names as subsequent arguments such as\n\n```bash\ngit branch -d branch01 branch02 branch03 # ...\n``` \n\n## 4b) Review/edit list before deleting\n\nIf you want to review and/or edit the list of branches before deleting them. One way to accomplish this is to pipe the branch names into your clipboard via `pbcopy`, paste them into your favorite editor, and then pipe them into `git branch -d` yourself. Example:\n\n- Pipe list into your clipboard via `git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | pbcopy`\n- Paste into editor. Review. Edit as needed.\n- Copy the edited list back into your clipboard.\n- Pipe clipboard into commmand via: `pbpaste | xargs git branch -d`\n\n---\n\nThat's it!\n\nI know I'll be referencing this from time to time myself. If you find this useful or have any alternative suggestions, let me know in the comments below or ping me [@erikthedev_](https://twitter.com/)!\n",
            "html": "<blockquote>\n  <p>How can I clean up all these old local git branches?</p>\n</blockquote>\n\n<p>Stale/unused git branches build up rather quickly, and this is something that has resurfaced a number of times in our team chat at work. I figure it's time I make a note of it here for others (and myself) to reference in the future!</p>\n\n<p>This is how dirty my branches were this morning:  </p>\n\n<pre><code class=\"language-bash\">&gt; git branch | wc -l\n205\n\n# *magic*\n\n&gt; git branch | wc -l\n56  \n</code></pre>\n\n<p><strong>For those of you looking for that magic one liner!</strong></p>\n\n<p><em>First, be sure to prune your remote branches</em></p>\n\n<pre><code class=\"language-bash\">git remote prune origin  \n</code></pre>\n\n<p><em>and then ✨🎩🐇</em></p>\n\n<pre><code class=\"language-bash\">git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d  \n</code></pre>\n\n<hr />\n\n<p>Now let's walk through it a bit...</p>\n\n<h2 id=\"0pruneremotebranches\">0) Prune remote branches</h2>\n\n<pre><code class=\"language-bash\">git remote prune origin  \n</code></pre>\n\n<p><a href=\"https://git-scm.com/docs/git-remote#git-remote-empruneem\">Read more about <code>git remote prune</code> here</a></p>\n\n<blockquote>\n  <p>Deletes all stale remote-tracking branches under <name>. These stale branches have already been removed from the remote repository referenced by <name>, but are still locally available in \"remotes/<name>\".</p>\n</blockquote>\n\n<h2 id=\"1listlocalgitbranches\">1) List local git branches</h2>\n\n<p><a href=\"http://\"><code>git branch -vv</code> will list all local branches along with some additional information</a> such as their related upstream/remote branch and latest commit message</p>\n\n<pre><code class=\"language-bash\">&gt; git branch -vv\n#...\nfeature/some-local-only-feature cba8191 Some commit message  \nfeature/some-old-feature cba2191 [origin/feature/some-old-feature: gone] Some commit message about some old feature  \nfeature/some-active-feature wba2191 [origin/feature/some-active-feature: ahead 40, behind 10] Some active feature branch  \n#...\n</code></pre>\n\n<h2 id=\"2filtergitbranchesdowntoonlythosewithdeletedupstreamremotecounterparts\">2) Filter git branches down to only those with deleted upstream/remote counterparts</h2>\n\n<p>Next, we pipe the output from <code>git branch -vv</code> into <code>grep 'origin/.*: gone]'</code>. This filters our list down to only lines that match the regex <code>origin/.*: gone]</code> leaving us with</p>\n\n<pre><code class=\"language-bash\">&gt; git branch -vv | grep 'origin/.*: gone]'\n#...\nfeature/some-old-feature cba2191 [origin/feature/some-old-feature: gone] Some commit message about some old feature  \n#...\n</code></pre>\n\n<p>Read more about <a href=\"https://www.cyberciti.biz/faq/grep-regular-expressions/\">using regular expressions with <code>grep</code> here</a>.</p>\n\n<blockquote>\n  <h4 id=\"randomusefulgreptipinvertmatch\">Random, useful <code>grep</code> tip : Invert Match</h4>\n  \n  <p>I <a href=\"http://stackoverflow.com/a/10411661/2644281\">just came across</a> <code>grep</code>'s <code>-v</code> (short for <code>--invert-match</code>) <code>grep -v 'some pattern'</code> that filters lines down to those <strong>not</strong> matching any of the specified patterns. </p>\n</blockquote>\n\n<h2 id=\"3pluckoutbranchnamesfromoutput\">3) Pluck out branch names from output</h2>\n\n<p>Piping that into <code>awk '{print $1}'</code> cleans up our output so we end up with a branch name per line.</p>\n\n<pre><code class=\"language-bash\">&gt; git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}'\n#...\nfeature/some-old-feature  \n#...\n</code></pre>\n\n<p>This is because <code>$1</code> translates into the 1st item in each line (items being separated by space(s)) which is the branch name. Example:</p>\n\n<ul>\n<li><code>$1</code>: <code>feature/some-old-feature</code></li>\n<li><code>$2</code>: <code>cba2191</code></li>\n<li><code>$3</code>: <code>[origin/feature/some-old-feature:</code></li>\n<li><code>$4</code>: <code>gone]</code></li>\n<li><code>$5</code>: <code>First</code></li>\n<li><code>$6</code>: <code>words</code></li>\n<li><code>$7</code>: <code>in_commit_message...</code></li>\n<li>...</li>\n</ul>\n\n<h2 id=\"4adeletethebranches\">4a) Delete the branches!</h2>\n\n<p>Next, we pipe our filtered down, cleaned up git branches list into <a href=\"https://git-scm.com/docs/git-branch#git-branch---delete\"><code>git branch -d</code> (short for <code>--delete</code>)</a> and say our final goodbyes.</p>\n\n<pre><code class=\"language-bash\">&gt; git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d\n</code></pre>\n\n<p>The <code>xargs</code> portion results in the equivalent of manually typing out each of the branch names as subsequent arguments such as</p>\n\n<pre><code class=\"language-bash\">git branch -d branch01 branch02 branch03 # ...  \n</code></pre>\n\n<h2 id=\"4brevieweditlistbeforedeleting\">4b) Review/edit list before deleting</h2>\n\n<p>If you want to review and/or edit the list of branches before deleting them. One way to accomplish this is to pipe the branch names into your clipboard via <code>pbcopy</code>, paste them into your favorite editor, and then pipe them into <code>git branch -d</code> yourself. Example:</p>\n\n<ul>\n<li>Pipe list into your clipboard via <code>git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | pbcopy</code></li>\n<li>Paste into editor. Review. Edit as needed.</li>\n<li>Copy the edited list back into your clipboard.</li>\n<li>Pipe clipboard into commmand via: <code>pbpaste | xargs git branch -d</code></li>\n</ul>\n\n<hr />\n\n<p>That's it!</p>\n\n<p>I know I'll be referencing this from time to time myself. If you find this useful or have any alternative suggestions, let me know in the comments below or ping me <a href=\"https://twitter.com/\">@erikthedev_</a>!</p>",
            "image": "/content/images/2017/01/branch-trimming.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2017-01-31 13:41:10",
            "created_by": 1,
            "updated_at": "2017-01-31 15:06:15",
            "updated_by": 1,
            "published_at": "2017-01-31 15:06:15",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          },
          {
            "id": 59,
            "uuid": "75f546a3-6a88-4a7a-bc19-9598c54f815c",
            "title": "Optimistic UI Updates in React (egghead.io course)",
            "slug": "optimistic-ui-updates-in-react-eggheadio-course",
            "markdown": "It's been out for several months now, but my first [egghead.io](https://egghead.io/) course was recently released 🎉 The course is [Optimistic UI Updates in React](https://egghead.io/courses/optimistic-ui-updates-in-react) where I illustrate by example creating more responsive, snappier user interfaces by leveraging optimistic UI updates specifically with React although the concept applies generally regardless of technologies and frameworks involved.\n\n<style>\n.twitter-tweet {\n  margin: 0 auto;\n}\n</style>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">🎉 It&#39;s live! My first ever <a href=\"https://twitter.com/eggheadio?ref_src=twsrc%5Etfw\">@eggheadio</a> course 🎬 Optimistic UI Updates in <a href=\"https://twitter.com/reactjs?ref_src=twsrc%5Etfw\">@reactjs</a> just went live! To the <a href=\"https://twitter.com/eggheadio?ref_src=twsrc%5Etfw\">@eggheadio</a> folks who helped guide me through the production process: Thank you 🙏🏼<br><br>25 minutes total. RT and head on over and give it a watch 😃<a href=\"https://t.co/abreLPAgNf\">https://t.co/abreLPAgNf</a></p>&mdash; Erik Aybar (@erikaybar_) <a href=\"https://twitter.com/erikaybar_/status/979410572545544192?ref_src=twsrc%5Etfw\">March 29, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n---\n\nI wrote [an accompanying Medium post](https://medium.com/@_erikaybar/optimistic-ui-updates-in-react-9e139ffa2e45) that walks through the first half of the course and the first example of breaking down the process of building a Twitter-inspired user interface where a user can “like” a tweet and explore some of the challenges of optimistically updating the UI to reflect:\n\n1. Whether or not the current user has liked a tweet\n2. The current total number of likes a tweet has\n\nAccounting for reverting state upon request failures and a handful of edge cases along the way.\n\nRelated reading if you want to dive deeper on the topic of Optimistic UI updates: [True Lies Of Optimistic User Interfaces](https://www.smashingmagazine.com/2016/11/true-lies-of-optimistic-user-interfaces/)\n\nView the entire Egghead.io Course here: https://egghead.io/courses/optimistic-ui-updates-in-react",
            "html": "<p>It's been out for several months now, but my first <a href=\"https://egghead.io/\">egghead.io</a> course was recently released 🎉 The course is <a href=\"https://egghead.io/courses/optimistic-ui-updates-in-react\">Optimistic UI Updates in React</a> where I illustrate by example creating more responsive, snappier user interfaces by leveraging optimistic UI updates specifically with React although the concept applies generally regardless of technologies and frameworks involved.</p>\n\n<style>  \n.twitter-tweet {\n  margin: 0 auto;\n}\n</style>  \n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">🎉 It&#39;s live! My first ever <a href=\"https://twitter.com/eggheadio?ref_src=twsrc%5Etfw\">@eggheadio</a> course 🎬 Optimistic UI Updates in <a href=\"https://twitter.com/reactjs?ref_src=twsrc%5Etfw\">@reactjs</a> just went live! To the <a href=\"https://twitter.com/eggheadio?ref_src=twsrc%5Etfw\">@eggheadio</a> folks who helped guide me through the production process: Thank you 🙏🏼<br><br>25 minutes total. RT and head on over and give it a watch 😃<a href=\"https://t.co/abreLPAgNf\">https://t.co/abreLPAgNf</a></p>&mdash; Erik Aybar (@erikaybar_) <a href=\"https://twitter.com/erikaybar_/status/979410572545544192?ref_src=twsrc%5Etfw\">March 29, 2018</a></blockquote>  \n\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<hr />\n\n<p>I wrote <a href=\"https://medium.com/@_erikaybar/optimistic-ui-updates-in-react-9e139ffa2e45\">an accompanying Medium post</a> that walks through the first half of the course and the first example of breaking down the process of building a Twitter-inspired user interface where a user can “like” a tweet and explore some of the challenges of optimistically updating the UI to reflect:</p>\n\n<ol>\n<li>Whether or not the current user has liked a tweet  </li>\n<li>The current total number of likes a tweet has</li>\n</ol>\n\n<p>Accounting for reverting state upon request failures and a handful of edge cases along the way.</p>\n\n<p>Related reading if you want to dive deeper on the topic of Optimistic UI updates: <a href=\"https://www.smashingmagazine.com/2016/11/true-lies-of-optimistic-user-interfaces/\">True Lies Of Optimistic User Interfaces</a></p>\n\n<p>View the entire Egghead.io Course here: <a href=\"https://egghead.io/courses/optimistic-ui-updates-in-react\">https://egghead.io/courses/optimistic-ui-updates-in-react</a></p>",
            "image": "/content/images/2018/07/Optimistic_UI_Updates_in_React_from__erikaybar__on__eggheadio.png",
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": "2018-07-23 06:04:09",
            "created_by": 1,
            "updated_at": "2018-07-23 06:26:43",
            "updated_by": 1,
            "published_at": "2018-07-23 06:21:48",
            "published_by": 1,
            "visibility": "public",
            "mobiledoc": null,
            "amp": null
          }
        ],
        "users": [
          {
            "id": 1,
            "uuid": "722b26c0-1b40-45e8-96e4-3474abf8eb4b",
            "name": "Erik Aybar",
            "slug": "erik",
            "password": "REDACTED",
            "email": "REDACTED",
            "image": "//www.gravatar.com/avatar/cbba0e71277ff68446eb768aad8c3a4b?d=404&s=250",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": "2019-04-08 12:22:31",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2019-04-08 12:22:31",
            "updated_by": 1,
            "tour": null,
            "visibility": "public",
            "facebook": null,
            "twitter": null
          }
        ],
        "roles": [
          {
            "id": 1,
            "uuid": "a18b653d-7c80-4f88-b81b-381faff53f0a",
            "name": "Administrator",
            "description": "Administrators",
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "98397d66-4b6e-4fcf-b7a2-86cf3aa3a47f",
            "name": "Editor",
            "description": "Editors",
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "1d706c4f-e707-4af6-87d0-6142a5e26972",
            "name": "Author",
            "description": "Authors",
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "ecc9a08f-06a0-4b25-be0a-5ef9989c8867",
            "name": "Owner",
            "description": "Blog Owner",
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          }
        ],
        "roles_users": [{"id": 1, "role_id": 4, "user_id": 1}],
        "permissions": [
          {
            "id": 1,
            "uuid": "c0e926e0-843e-4764-8dca-5443a7ebe273",
            "name": "Export database",
            "object_type": "db",
            "action_type": "exportContent",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "0731175e-419c-4373-ab41-30d1d1325532",
            "name": "Import database",
            "object_type": "db",
            "action_type": "importContent",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "c26506cf-09fe-42a9-8162-6d64ad2a26f9",
            "name": "Delete all content",
            "object_type": "db",
            "action_type": "deleteAllContent",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "f09ac0bf-1d2e-4a9f-b50e-aca3fb89c5e7",
            "name": "Send mail",
            "object_type": "mail",
            "action_type": "send",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 5,
            "uuid": "212b10c0-b6a0-432b-a89a-7f4d58a08000",
            "name": "Browse notifications",
            "object_type": "notification",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 6,
            "uuid": "30382af8-ba45-4b4d-b121-cc41fe60d2f2",
            "name": "Add notifications",
            "object_type": "notification",
            "action_type": "add",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 7,
            "uuid": "2fd99a56-eecc-444d-aa1e-e87b3966e284",
            "name": "Delete notifications",
            "object_type": "notification",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 8,
            "uuid": "966feb88-956c-4d13-ad23-a216422ed438",
            "name": "Browse posts",
            "object_type": "post",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 9,
            "uuid": "0649b366-19d4-4362-b764-dff60d65c0eb",
            "name": "Read posts",
            "object_type": "post",
            "action_type": "read",
            "object_id": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1
          },
          {
            "id": 10,
            "uuid": "74538796-29f5-41d5-8140-fd5d50ad01ee",
            "name": "Edit posts",
            "object_type": "post",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 11,
            "uuid": "e08ff0e6-6eec-4302-899e-f2bfaff606f2",
            "name": "Add posts",
            "object_type": "post",
            "action_type": "add",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 12,
            "uuid": "4990f04c-a38c-4d4a-922d-5169a86e8006",
            "name": "Delete posts",
            "object_type": "post",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 13,
            "uuid": "cebe2c3b-cbc4-4d8b-9f6e-6eb821b77f47",
            "name": "Browse settings",
            "object_type": "setting",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 14,
            "uuid": "f09d8a63-80b5-4083-81e5-98dd6e38f1c4",
            "name": "Read settings",
            "object_type": "setting",
            "action_type": "read",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 15,
            "uuid": "fb6573df-e039-4aa9-aed5-d1a4638bb041",
            "name": "Edit settings",
            "object_type": "setting",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 16,
            "uuid": "df160422-2125-4a20-99bc-1121c2cf7042",
            "name": "Generate slugs",
            "object_type": "slug",
            "action_type": "generate",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 17,
            "uuid": "de3c7ba4-674d-4a44-a952-643678de878a",
            "name": "Browse tags",
            "object_type": "tag",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 18,
            "uuid": "06baad83-2406-4510-96e4-41b67b474628",
            "name": "Read tags",
            "object_type": "tag",
            "action_type": "read",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 19,
            "uuid": "f8023c1a-8b8a-442f-bd31-820c7a2ed464",
            "name": "Edit tags",
            "object_type": "tag",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 20,
            "uuid": "94357221-7889-4967-886f-e862a5821ca9",
            "name": "Add tags",
            "object_type": "tag",
            "action_type": "add",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 21,
            "uuid": "dd672228-eefc-4e9e-b182-0b1ef12d107b",
            "name": "Delete tags",
            "object_type": "tag",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 22,
            "uuid": "813c3fb0-5869-4bac-b4f0-dd2e0cd18599",
            "name": "Browse themes",
            "object_type": "theme",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 23,
            "uuid": "58226a22-bf11-4126-b712-281b66b76317",
            "name": "Edit themes",
            "object_type": "theme",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 24,
            "uuid": "277200e2-5ec9-442e-ae48-8a7cedd1a707",
            "name": "Browse users",
            "object_type": "user",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 25,
            "uuid": "6d129609-334a-4fcd-b2d9-01d9ab88a8d6",
            "name": "Read users",
            "object_type": "user",
            "action_type": "read",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 26,
            "uuid": "4d7a03a9-cbf6-4021-b1a6-99aa3284462f",
            "name": "Edit users",
            "object_type": "user",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 27,
            "uuid": "86864125-de33-44bf-b8b3-a9931964652b",
            "name": "Add users",
            "object_type": "user",
            "action_type": "add",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 28,
            "uuid": "a9f7fb53-932b-4c8d-9dc6-d822bcd6208b",
            "name": "Delete users",
            "object_type": "user",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 29,
            "uuid": "3b020c8c-374b-402e-93a3-d71a3ce7409e",
            "name": "Assign a role",
            "object_type": "role",
            "action_type": "assign",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 30,
            "uuid": "e4999d9a-4a07-43e6-adcf-2905793eeea6",
            "name": "Browse roles",
            "object_type": "role",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2014-11-18 13:12:57",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:57",
            "updated_by": 1
          },
          {
            "id": 31,
            "uuid": "86952c32-7d7d-4f68-949d-0931288f8545",
            "name": "Browse clients",
            "object_type": "client",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2017-01-19 14:17:23",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:23",
            "updated_by": 1
          },
          {
            "id": 32,
            "uuid": "09fd7e44-b61a-4aef-9524-69c56d2265b9",
            "name": "Read clients",
            "object_type": "client",
            "action_type": "read",
            "object_id": null,
            "created_at": "2017-01-19 14:17:23",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:23",
            "updated_by": 1
          },
          {
            "id": 33,
            "uuid": "5da6d652-9081-48c1-adce-25bc5d511d40",
            "name": "Edit clients",
            "object_type": "client",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 34,
            "uuid": "ffd50af0-2994-48ce-8c63-4d7a135cb13f",
            "name": "Add clients",
            "object_type": "client",
            "action_type": "add",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 35,
            "uuid": "81e60f02-978d-4457-9af0-bc06f0a89d45",
            "name": "Delete clients",
            "object_type": "client",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 36,
            "uuid": "519eb99d-c2a5-4946-914f-8d8266bdd786",
            "name": "Browse subscribers",
            "object_type": "subscriber",
            "action_type": "browse",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 37,
            "uuid": "8f563606-90b6-4335-93c7-8a988422b8f6",
            "name": "Read subscribers",
            "object_type": "subscriber",
            "action_type": "read",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 38,
            "uuid": "901c204c-1e8f-47b3-8e0f-3eaf6dc30cbc",
            "name": "Edit subscribers",
            "object_type": "subscriber",
            "action_type": "edit",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 39,
            "uuid": "0055d649-048f-4cd0-9d80-7850c71930f8",
            "name": "Add subscribers",
            "object_type": "subscriber",
            "action_type": "add",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 40,
            "uuid": "9dd95258-08d7-435c-ad73-76b8c659a638",
            "name": "Delete subscribers",
            "object_type": "subscriber",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2017-01-19 14:17:24",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:24",
            "updated_by": 1
          },
          {
            "id": 41,
            "uuid": "36165e9e-da88-4d94-9987-ebafb47e1c4c",
            "name": "Upload themes",
            "object_type": "theme",
            "action_type": "add",
            "object_id": null,
            "created_at": "2017-01-19 14:17:27",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:27",
            "updated_by": 1
          },
          {
            "id": 42,
            "uuid": "5e3153d0-c3cf-4252-8a72-1591fe22119d",
            "name": "Download themes",
            "object_type": "theme",
            "action_type": "read",
            "object_id": null,
            "created_at": "2017-01-19 14:17:27",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:27",
            "updated_by": 1
          },
          {
            "id": 43,
            "uuid": "2a4bca24-8bf8-479b-991f-dd4bc9d30f87",
            "name": "Delete themes",
            "object_type": "theme",
            "action_type": "destroy",
            "object_id": null,
            "created_at": "2017-01-19 14:17:27",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:27",
            "updated_by": 1
          }
        ],
        "permissions_users": [],
        "permissions_roles": [
          {"id": 1, "role_id": 1, "permission_id": 1},
          {"id": 2, "role_id": 1, "permission_id": 2},
          {"id": 3, "role_id": 1, "permission_id": 3},
          {"id": 4, "role_id": 1, "permission_id": 4},
          {"id": 5, "role_id": 1, "permission_id": 5},
          {"id": 6, "role_id": 1, "permission_id": 6},
          {"id": 7, "role_id": 1, "permission_id": 7},
          {"id": 8, "role_id": 1, "permission_id": 8},
          {"id": 9, "role_id": 1, "permission_id": 9},
          {"id": 10, "role_id": 1, "permission_id": 10},
          {"id": 11, "role_id": 1, "permission_id": 11},
          {"id": 12, "role_id": 1, "permission_id": 12},
          {"id": 13, "role_id": 1, "permission_id": 13},
          {"id": 14, "role_id": 1, "permission_id": 14},
          {"id": 15, "role_id": 1, "permission_id": 15},
          {"id": 16, "role_id": 1, "permission_id": 16},
          {"id": 17, "role_id": 1, "permission_id": 17},
          {"id": 18, "role_id": 1, "permission_id": 18},
          {"id": 19, "role_id": 1, "permission_id": 19},
          {"id": 20, "role_id": 1, "permission_id": 20},
          {"id": 21, "role_id": 1, "permission_id": 21},
          {"id": 22, "role_id": 1, "permission_id": 22},
          {"id": 23, "role_id": 1, "permission_id": 23},
          {"id": 24, "role_id": 1, "permission_id": 24},
          {"id": 25, "role_id": 1, "permission_id": 25},
          {"id": 26, "role_id": 1, "permission_id": 26},
          {"id": 27, "role_id": 1, "permission_id": 27},
          {"id": 28, "role_id": 1, "permission_id": 28},
          {"id": 29, "role_id": 1, "permission_id": 29},
          {"id": 30, "role_id": 1, "permission_id": 30},
          {"id": 31, "role_id": 2, "permission_id": 8},
          {"id": 32, "role_id": 2, "permission_id": 9},
          {"id": 33, "role_id": 2, "permission_id": 10},
          {"id": 34, "role_id": 2, "permission_id": 11},
          {"id": 35, "role_id": 2, "permission_id": 12},
          {"id": 36, "role_id": 2, "permission_id": 13},
          {"id": 37, "role_id": 2, "permission_id": 14},
          {"id": 38, "role_id": 2, "permission_id": 16},
          {"id": 39, "role_id": 2, "permission_id": 17},
          {"id": 40, "role_id": 2, "permission_id": 18},
          {"id": 41, "role_id": 2, "permission_id": 19},
          {"id": 42, "role_id": 2, "permission_id": 20},
          {"id": 43, "role_id": 2, "permission_id": 21},
          {"id": 44, "role_id": 2, "permission_id": 24},
          {"id": 45, "role_id": 2, "permission_id": 25},
          {"id": 46, "role_id": 2, "permission_id": 26},
          {"id": 47, "role_id": 2, "permission_id": 27},
          {"id": 48, "role_id": 2, "permission_id": 28},
          {"id": 49, "role_id": 2, "permission_id": 29},
          {"id": 50, "role_id": 2, "permission_id": 30},
          {"id": 51, "role_id": 3, "permission_id": 8},
          {"id": 52, "role_id": 3, "permission_id": 9},
          {"id": 53, "role_id": 3, "permission_id": 11},
          {"id": 54, "role_id": 3, "permission_id": 13},
          {"id": 55, "role_id": 3, "permission_id": 14},
          {"id": 56, "role_id": 3, "permission_id": 16},
          {"id": 57, "role_id": 3, "permission_id": 17},
          {"id": 58, "role_id": 3, "permission_id": 18},
          {"id": 59, "role_id": 3, "permission_id": 20},
          {"id": 60, "role_id": 3, "permission_id": 24},
          {"id": 61, "role_id": 3, "permission_id": 25},
          {"id": 62, "role_id": 3, "permission_id": 30},
          {"id": 63, "role_id": 1, "permission_id": 31},
          {"id": 64, "role_id": 1, "permission_id": 32},
          {"id": 65, "role_id": 1, "permission_id": 33},
          {"id": 66, "role_id": 1, "permission_id": 34},
          {"id": 67, "role_id": 1, "permission_id": 35},
          {"id": 68, "role_id": 2, "permission_id": 31},
          {"id": 69, "role_id": 2, "permission_id": 32},
          {"id": 70, "role_id": 2, "permission_id": 33},
          {"id": 71, "role_id": 2, "permission_id": 34},
          {"id": 72, "role_id": 2, "permission_id": 35},
          {"id": 73, "role_id": 3, "permission_id": 31},
          {"id": 74, "role_id": 3, "permission_id": 32},
          {"id": 75, "role_id": 3, "permission_id": 33},
          {"id": 76, "role_id": 3, "permission_id": 34},
          {"id": 77, "role_id": 3, "permission_id": 35},
          {"id": 78, "role_id": 1, "permission_id": 36},
          {"id": 79, "role_id": 1, "permission_id": 37},
          {"id": 80, "role_id": 1, "permission_id": 38},
          {"id": 81, "role_id": 1, "permission_id": 39},
          {"id": 82, "role_id": 1, "permission_id": 40},
          {"id": 83, "role_id": 2, "permission_id": 39},
          {"id": 84, "role_id": 3, "permission_id": 39},
          {"id": 85, "role_id": 1, "permission_id": 41},
          {"id": 86, "role_id": 1, "permission_id": 42},
          {"id": 87, "role_id": 1, "permission_id": 43}
        ],
        "permissions_apps": [],
        "settings": [
          {
            "id": 1,
            "uuid": "f44411ba-20f6-4bcb-a592-df926bf8c70e",
            "key": "databaseVersion",
            "value": "009",
            "type": "core",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:25",
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "e49224a6-8488-4170-9e10-4022d5bc510c",
            "key": "dbHash",
            "value": "a2217af0-f1dd-4d07-87b6-759219c796c6",
            "type": "core",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:25",
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "59203458-7e84-44ce-8c95-3c6b6854360b",
            "key": "nextUpdateCheck",
            "value": "1554767502",
            "type": "core",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2019-04-07 23:44:18",
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "5a171731-4554-42ed-8de6-7e4be845476e",
            "key": "displayUpdateNotification",
            "value": "0.11.14",
            "type": "core",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2019-04-07 23:44:18",
            "updated_by": 1
          },
          {
            "id": 5,
            "uuid": "78e9eafc-0f97-470e-87db-577c4a279702",
            "key": "title",
            "value": "Erik Aybar",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 6,
            "uuid": "e6a855ef-6790-467f-aaab-d4bf5720ca7e",
            "key": "description",
            "value": "Here you'll find my ramblings about life, Javascript, React, and working remotely as a software engineer.",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 7,
            "uuid": "bfcdfd0a-a605-46c0-863d-35ff71fb1615",
            "key": "email",
            "value": "REDACTED",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:25",
            "updated_by": 1
          },
          {
            "id": 8,
            "uuid": "63e81e86-cf0d-47bd-8139-b16bd818c4d1",
            "key": "logo",
            "value": "/content/images/2018/07/me-profile-pic-2018-square.jpeg",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 9,
            "uuid": "4ccac0d1-551e-4f20-8940-4bcd5768cda2",
            "key": "cover",
            "value": "/content/images/2014/Feb/Just_Chillin_blurred.png",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 10,
            "uuid": "f37a686e-4d65-4003-b87f-ff6b8c979b8c",
            "key": "defaultLang",
            "value": "en_US",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 11,
            "uuid": "c9676de1-b9f4-4919-8ad1-c26e0366ccfc",
            "key": "postsPerPage",
            "value": "6",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 12,
            "uuid": "579f0f03-3ef9-4f95-8cfd-46fba4885e3d",
            "key": "forceI18n",
            "value": "true",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 13,
            "uuid": "88169fdf-f115-40bc-88cc-2fdec18e8a6a",
            "key": "permalinks",
            "value": "/:slug/",
            "type": "blog",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 14,
            "uuid": "ff214077-58f4-4049-8da2-d996ee216ae7",
            "key": "activeApps",
            "value": "[]",
            "type": "app",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:25",
            "updated_by": 1
          },
          {
            "id": 15,
            "uuid": "94b98cd1-7ea1-4dcb-a2ff-0d80caf7b884",
            "key": "installedApps",
            "value": "[]",
            "type": "app",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 12:53:49",
            "updated_by": 1
          },
          {
            "id": 16,
            "uuid": "897354e6-00c5-4b8a-b581-6948e7d3014a",
            "key": "activeTheme",
            "value": "casper",
            "type": "theme",
            "created_at": "2014-11-18 13:12:59",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 17,
            "uuid": "f1171f90-ed5a-48e2-8d2c-9caf4b813401",
            "key": "ghost_head",
            "value": "<!-- Prism code highlighting -->\n<!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/prism.css\" /> -->\n<!-- <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/default.min.css\"> -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/atom-one-dark.min.css\">\n<style>\n/* Prevent that narsty word wrapping! */\n.hljs {\n  white-space: pre;\n  overflow-x: auto;\n  width: 1000px;\n}\npre {\n  border: none;\n  padding: 0;\n}\n</style>\n\n<!-- Google Analytics -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n                        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-41315772-1', 'erikaybar.name');\nga('send', 'pageview');\n</script>",
            "type": "blog",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 18,
            "uuid": "a68ef1f9-5aaf-4f8b-8353-48fd323e9ca5",
            "key": "ghost_foot",
            "value": "<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n<!-- Prism code highlighting -->\n<!-- <script type=\"text/javascript\" src=\"/assets/js/prism.js\"></script> -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/highlight.min.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n",
            "type": "blog",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 19,
            "uuid": "c03deb87-1d28-4cd6-8668-d6ab463717d5",
            "key": "labs",
            "value": "{}",
            "type": "blog",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 20,
            "uuid": "3656b272-d40c-4dde-98fb-c8a78099e23e",
            "key": "navigation",
            "value": "[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"About\",\"url\":\"/about/\"},{\"label\":\"Twitter\",\"url\":\"https://twitter.com/erikthedev_\"},{\"label\":\"Medium\",\"url\":\"https://medium.com/@_erikaybar\"},{\"label\":\"GitHub\",\"url\":\"https://github.com/erikthedeveloper\"},{\"label\":\"egghead.io\",\"url\":\"https://egghead.io/instructors/erik-aybar\"}]",
            "type": "blog",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 21,
            "uuid": "2100f430-eca2-4650-b772-68eaec26454e",
            "key": "isPrivate",
            "value": "false",
            "type": "private",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 22,
            "uuid": "9d96f82f-2156-4d0a-b5b1-cc86f8ffdcaa",
            "key": "password",
            "value": "null",
            "type": "private",
            "created_at": "2017-01-18 14:41:32",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 23,
            "uuid": "7a2dc39c-a02e-490a-b830-dc22ee2013aa",
            "key": "seenNotifications",
            "value": "[]",
            "type": "core",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:25",
            "updated_by": 1
          },
          {
            "id": 24,
            "uuid": "fc690089-29c9-46a9-9a01-aead9f30aa79",
            "key": "migrations",
            "value": "{\"006/01\":\"2017-01-19T14:17:27Z\"}",
            "type": "core",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2017-01-19 14:17:27",
            "updated_by": 1
          },
          {
            "id": 25,
            "uuid": "73a5cc80-65f4-4b23-8ec4-501ad20299c4",
            "key": "activeTimezone",
            "value": "America/Denver",
            "type": "blog",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 26,
            "uuid": "d0df7533-c130-4d50-ab3e-a63ef5871a9f",
            "key": "amp",
            "value": "true",
            "type": "blog",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 27,
            "uuid": "244294d5-b8ca-456e-8698-40664eaa5210",
            "key": "facebook",
            "value": "",
            "type": "blog",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 28,
            "uuid": "e96d1049-362a-481b-9952-a994cd43acf1",
            "key": "twitter",
            "value": "@erikthedev_",
            "type": "blog",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          },
          {
            "id": 29,
            "uuid": "4a305aa3-5f6b-464d-8785-ec1eb1c5c17a",
            "key": "slack",
            "value": "[{\"url\":\"\"}]",
            "type": "blog",
            "created_at": "2017-01-19 14:17:22",
            "created_by": 1,
            "updated_at": "2018-07-23 13:19:43",
            "updated_by": 1
          }
        ],
        "posts_tags": [
          {"id": 2, "post_id": 2, "tag_id": 1, "sort_order": 0},
          {"id": 8, "post_id": 6, "tag_id": 7, "sort_order": 0},
          {"id": 9, "post_id": 6, "tag_id": 8, "sort_order": 1},
          {"id": 10, "post_id": 6, "tag_id": 9, "sort_order": 2},
          {"id": 11, "post_id": 7, "tag_id": 10, "sort_order": 0},
          {"id": 12, "post_id": 7, "tag_id": 11, "sort_order": 1},
          {"id": 13, "post_id": 7, "tag_id": 12, "sort_order": 2},
          {"id": 14, "post_id": 8, "tag_id": 10, "sort_order": 0},
          {"id": 15, "post_id": 8, "tag_id": 11, "sort_order": 1},
          {"id": 16, "post_id": 8, "tag_id": 12, "sort_order": 2},
          {"id": 17, "post_id": 8, "tag_id": 13, "sort_order": 3},
          {"id": 18, "post_id": 9, "tag_id": 12, "sort_order": 0},
          {"id": 19, "post_id": 9, "tag_id": 13, "sort_order": 1},
          {"id": 20, "post_id": 10, "tag_id": 14, "sort_order": 0},
          {"id": 21, "post_id": 10, "tag_id": 16, "sort_order": 1},
          {"id": 22, "post_id": 10, "tag_id": 17, "sort_order": 2},
          {"id": 23, "post_id": 11, "tag_id": 2, "sort_order": 0},
          {"id": 24, "post_id": 11, "tag_id": 9, "sort_order": 1},
          {"id": 25, "post_id": 11, "tag_id": 16, "sort_order": 2},
          {"id": 26, "post_id": 12, "tag_id": 18, "sort_order": 0},
          {"id": 27, "post_id": 13, "tag_id": 18, "sort_order": 0},
          {"id": 28, "post_id": 14, "tag_id": 3, "sort_order": 0},
          {"id": 29, "post_id": 14, "tag_id": 20, "sort_order": 1},
          {"id": 30, "post_id": 16, "tag_id": 2, "sort_order": 0},
          {"id": 31, "post_id": 18, "tag_id": 9, "sort_order": 0},
          {"id": 32, "post_id": 18, "tag_id": 21, "sort_order": 1},
          {"id": 33, "post_id": 18, "tag_id": 22, "sort_order": 2},
          {"id": 37, "post_id": 22, "tag_id": 20, "sort_order": 0},
          {"id": 38, "post_id": 22, "tag_id": 25, "sort_order": 1},
          {"id": 39, "post_id": 23, "tag_id": 20, "sort_order": 0},
          {"id": 40, "post_id": 23, "tag_id": 25, "sort_order": 1},
          {"id": 41, "post_id": 24, "tag_id": 26, "sort_order": 0},
          {"id": 42, "post_id": 31, "tag_id": 15, "sort_order": 0},
          {"id": 43, "post_id": 31, "tag_id": 27, "sort_order": 1},
          {"id": 44, "post_id": 33, "tag_id": 3, "sort_order": 0},
          {"id": 45, "post_id": 33, "tag_id": 19, "sort_order": 1},
          {"id": 55, "post_id": 21, "tag_id": 12, "sort_order": 0},
          {"id": 56, "post_id": 21, "tag_id": 28, "sort_order": 1},
          {"id": 57, "post_id": 21, "tag_id": 30, "sort_order": 2},
          {"id": 76, "post_id": 3, "tag_id": 3, "sort_order": 0},
          {"id": 78, "post_id": 5, "tag_id": 22, "sort_order": 0},
          {"id": 88, "post_id": 34, "tag_id": 11, "sort_order": 0},
          {"id": 89, "post_id": 34, "tag_id": 28, "sort_order": 1},
          {"id": 90, "post_id": 34, "tag_id": 29, "sort_order": 2},
          {"id": 109, "post_id": 20, "tag_id": 9, "sort_order": 0},
          {"id": 110, "post_id": 20, "tag_id": 23, "sort_order": 1},
          {"id": 111, "post_id": 20, "tag_id": 24, "sort_order": 2},
          {"id": 112, "post_id": 20, "tag_id": 31, "sort_order": 3},
          {"id": 116, "post_id": 38, "tag_id": 9, "sort_order": 0},
          {"id": 117, "post_id": 38, "tag_id": 24, "sort_order": 1},
          {"id": 118, "post_id": 38, "tag_id": 31, "sort_order": 2},
          {"id": 123, "post_id": 40, "tag_id": 30, "sort_order": 0},
          {"id": 132, "post_id": 42, "tag_id": 30, "sort_order": 0},
          {"id": 133, "post_id": 42, "tag_id": 32, "sort_order": 1},
          {"id": 264, "post_id": 44, "tag_id": 30, "sort_order": 0},
          {"id": 265, "post_id": 44, "tag_id": 33, "sort_order": 1},
          {"id": 278, "post_id": 45, "tag_id": 30, "sort_order": 0},
          {"id": 279, "post_id": 45, "tag_id": 33, "sort_order": 1},
          {"id": 620, "post_id": 46, "tag_id": 30, "sort_order": 0},
          {"id": 621, "post_id": 46, "tag_id": 34, "sort_order": 1},
          {"id": 622, "post_id": 46, "tag_id": 35, "sort_order": 2},
          {"id": 889, "post_id": 48, "tag_id": 11, "sort_order": 0},
          {"id": 890, "post_id": 48, "tag_id": 36, "sort_order": 1},
          {"id": 901, "post_id": 50, "tag_id": 30, "sort_order": 0},
          {"id": 902, "post_id": 50, "tag_id": 33, "sort_order": 1},
          {"id": 915, "post_id": 51, "tag_id": 38, "sort_order": 0},
          {"id": 916, "post_id": 49, "tag_id": 24, "sort_order": 0},
          {"id": 917, "post_id": 49, "tag_id": 30, "sort_order": 1},
          {"id": 918, "post_id": 49, "tag_id": 33, "sort_order": 2},
          {"id": 919, "post_id": 55, "tag_id": 33, "sort_order": 0},
          {"id": 920, "post_id": 55, "tag_id": 30, "sort_order": 1},
          {"id": 921, "post_id": 55, "tag_id": 39, "sort_order": 2},
          {"id": 922, "post_id": 56, "tag_id": 40, "sort_order": 1},
          {"id": 923, "post_id": 56, "tag_id": 30, "sort_order": 0},
          {"id": 924, "post_id": 58, "tag_id": 3, "sort_order": 0},
          {"id": 925, "post_id": 58, "tag_id": 41, "sort_order": 1},
          {"id": 926, "post_id": 59, "tag_id": 42, "sort_order": 1},
          {"id": 927, "post_id": 59, "tag_id": 33, "sort_order": 0}
        ],
        "apps": [],
        "app_settings": [],
        "app_fields": [],
        "tags": [
          {
            "id": 1,
            "uuid": "6a3e55f8-4a32-4cb9-b403-a76b62c7702f",
            "name": "Getting Started",
            "slug": "getting-started",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:12:56",
            "created_by": 1,
            "updated_at": "2014-11-18 13:12:56",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 2,
            "uuid": "c512a26e-24ee-4c1e-a987-3c9954800948",
            "name": "Links for Thought",
            "slug": "links-for-thought",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 3,
            "uuid": "818288c3-7fe8-4077-a329-db6d6509ed7d",
            "name": "git",
            "slug": "git",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 4,
            "uuid": "bbf98e2b-4162-44f0-9fae-972d5df31891",
            "name": "Recommended Reading",
            "slug": "recommended-reading",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 5,
            "uuid": "80321c75-a514-4245-a1cc-ea944d0eefbc",
            "name": "Responsive Web",
            "slug": "responsive-web",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 6,
            "uuid": "9054d9e1-1d93-4bb5-a303-0fbbaa7c00a8",
            "name": "Web Developer Gems",
            "slug": "web-developer-gems",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 7,
            "uuid": "c96f6aec-73fa-469b-9063-2b6dad9f3fe7",
            "name": "Web Technologies",
            "slug": "web-technologies",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 8,
            "uuid": "07b6fdd9-8c57-434c-8057-03c68f96e564",
            "name": "Utah",
            "slug": "utah",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 9,
            "uuid": "7225a190-8657-428a-9c04-ec0e10ed22c0",
            "name": "Laravel",
            "slug": "laravel",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 10,
            "uuid": "8a4e120d-9b36-473e-9a68-97d91a87b469",
            "name": "SailsJS",
            "slug": "sailsjs",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 11,
            "uuid": "eb162de5-14ca-451e-bd3a-38a3821bed1e",
            "name": "node.js",
            "slug": "node-js",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 12,
            "uuid": "890b69c1-09ae-49d9-baf9-5274d151deb3",
            "name": "MVC",
            "slug": "mvc",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 13,
            "uuid": "cc00941b-d3f9-4baa-b9f0-0adad16cae4e",
            "name": "Open Source (github)",
            "slug": "open-source-github",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 14,
            "uuid": "045664ac-30ba-48a1-a1cf-40b0b1397bd0",
            "name": "php",
            "slug": "php",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 15,
            "uuid": "955405c3-3053-402c-89fe-56d8e0b7d967",
            "name": "tdd",
            "slug": "tdd",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 16,
            "uuid": "834d4bd0-711d-4eb7-bba7-af1ad01056c3",
            "name": "modern php",
            "slug": "modern-php",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 17,
            "uuid": "2288a129-108c-4c85-8827-3a39b42e9cac",
            "name": "composer",
            "slug": "composer",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 18,
            "uuid": "d5cd01c8-bcfa-4a0c-b98e-7c25c565efe8",
            "name": "AngularJS",
            "slug": "angularjs",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 19,
            "uuid": "1945a89f-fe12-4f5a-9250-3f8bcd6a704e",
            "name": "github",
            "slug": "github",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 20,
            "uuid": "05d5bb8d-5783-4754-9e6e-56b48c4fe067",
            "name": "workflow",
            "slug": "workflow",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 21,
            "uuid": "e81fcd1f-fabd-4b9c-86ee-9c92dab2e627",
            "name": "OctoberCMS",
            "slug": "octobercms",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 22,
            "uuid": "dc4162b3-69c4-4acd-b47b-3f80f82768c9",
            "name": "Vagrant",
            "slug": "vagrant",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 23,
            "uuid": "a77acb11-01f5-4d2c-b7b8-bca3a3eecf19",
            "name": "RESTful API",
            "slug": "restful-api",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 24,
            "uuid": "6f5653a6-72bc-406a-9a11-bf52ab44f8a0",
            "name": "Testing",
            "slug": "testing",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 25,
            "uuid": "44e1b6f2-49c0-4bb0-9a15-42e2c31037cb",
            "name": "OS X",
            "slug": "os-x",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 26,
            "uuid": "36dc1d86-2525-4602-b305-265e1d996fef",
            "name": "Algorithms",
            "slug": "algorithms",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 27,
            "uuid": "ec4e2428-f915-476f-9876-59ebb065b3ab",
            "name": "phpspec",
            "slug": "phpspec",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 28,
            "uuid": "0bd35a63-7427-4345-8ce9-4c3026bf0735",
            "name": "ember.js",
            "slug": "ember-js",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 29,
            "uuid": "c4955a50-dc9b-4567-ac33-839a201b1415",
            "name": "bootstrap",
            "slug": "bootstrap",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 13:40:08",
            "created_by": 1,
            "updated_at": "2014-11-18 13:40:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 30,
            "uuid": "f53312c6-45fc-4b2b-9b0f-fd11f6699634",
            "name": "javascript",
            "slug": "javascript",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-11-18 14:53:14",
            "created_by": 1,
            "updated_at": "2014-11-18 14:53:14",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 31,
            "uuid": "0811f950-6e94-4910-8a5d-0d16f0ddba7f",
            "name": "Behat",
            "slug": "behat",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2014-12-12 14:24:12",
            "created_by": 1,
            "updated_at": "2014-12-12 14:24:12",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 32,
            "uuid": "200bca15-b26f-480e-91ee-0f173d980861",
            "name": "learning",
            "slug": "learning",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2015-05-27 14:14:47",
            "created_by": 1,
            "updated_at": "2015-05-27 14:14:47",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 33,
            "uuid": "aa115e68-fc8a-4182-a29d-80c8d1a98133",
            "name": "React",
            "slug": "react",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2015-06-01 13:49:12",
            "created_by": 1,
            "updated_at": "2015-06-01 13:49:12",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 34,
            "uuid": "c4ae6761-a670-4353-938f-51c0648d5c78",
            "name": "life",
            "slug": "life",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2015-08-07 12:00:45",
            "created_by": 1,
            "updated_at": "2015-08-07 12:00:45",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 35,
            "uuid": "7ee45eed-d594-4972-98a3-d0b03f121aaa",
            "name": "screencasts",
            "slug": "screencasts",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2015-08-07 12:39:58",
            "created_by": 1,
            "updated_at": "2015-08-07 12:39:58",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 36,
            "uuid": "d1fa7e2c-a885-4362-bcfb-885e106fa46f",
            "name": "ES6+",
            "slug": "es6",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2015-10-24 13:57:46",
            "created_by": 1,
            "updated_at": "2015-10-24 13:57:46",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 37,
            "uuid": "b04d0ee8-6a63-469e-ba84-b018aae2b436",
            "name": "ja",
            "slug": "ja",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2017-01-17 13:24:34",
            "created_by": 1,
            "updated_at": "2017-01-17 13:24:34",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 38,
            "uuid": "e7ed86d3-77d9-422b-bf03-98e5afa20381",
            "name": "remote",
            "slug": "remote",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2017-01-17 14:19:11",
            "created_by": 1,
            "updated_at": "2017-01-17 14:19:11",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 39,
            "uuid": "a142b17a-c49c-4cf1-83fb-a9260fa5d1e9",
            "name": "video",
            "slug": "video",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2017-01-20 14:37:19",
            "created_by": 1,
            "updated_at": "2017-01-20 14:37:19",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 40,
            "uuid": "31abecf2-d1c4-46b3-9d06-b919bd308ea1",
            "name": "webpack",
            "slug": "webpack",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2017-01-21 15:20:22",
            "created_by": 1,
            "updated_at": "2017-01-21 15:20:22",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 41,
            "uuid": "41896d03-8893-48c5-bd0a-19aa63694851",
            "name": "command line",
            "slug": "command-line",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2017-01-31 15:06:08",
            "created_by": 1,
            "updated_at": "2017-01-31 15:06:08",
            "updated_by": 1,
            "visibility": "public"
          },
          {
            "id": 42,
            "uuid": "50e84258-ff10-4073-add8-17dbdc082270",
            "name": "egghead.io",
            "slug": "egghead-io",
            "description": null,
            "image": null,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": "2018-07-23 06:11:38",
            "created_by": 1,
            "updated_at": "2018-07-23 06:11:38",
            "updated_by": 1,
            "visibility": "public"
          }
        ],
        "subscribers": []
      }
    }
  ]
}
